/*
 * Ancestris - http://www.ancestris.org
 * 
 * Copyright 2015-2020 Ancestris
 * 
 * Author: Frédéric Lapeyre (frederic@ancestris.org).
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 */
package ancestris.modules.gedcomcompare.options;

import ancestris.core.CoreOptions;
import ancestris.modules.gedcomcompare.communication.UserProfile;
import ancestris.util.swing.DialogManager;
import ancestris.util.swing.FileChooserBuilder;
import static genj.util.EnvironmentChecker.getProperty;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.util.Random;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.BadLocationException;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle;
import org.openide.util.NbPreferences;
import org.openide.windows.WindowManager;

public final class GedcomCompareOptionsPanel extends javax.swing.JPanel implements PropertyChangeListener {

    private final static int IMG_ICON_WIDTH = 14;
    private final static int IMG_ICON_HEIGHT = 16;

    private final static int IMG_SMALL_WIDTH = 16;
    private final static int IMG_SMALL_HEIGHT = 19;

    private final static int IMG_MEDIUM_WIDTH = 51;
    private final static int IMG_MEDIUM_HEIGHT = 62;

    public final static int IMG_LARGE_WIDTH = 155;
    public final static int IMG_LARGE_HEIGHT = 186;

    private final static int PSEUDO_MAXLENGTH = 15;
    private final ImageIcon DEFPROF_PHOTO = new ImageIcon(getClass().getResource("/ancestris/modules/gedcomcompare/resources/nophotobig.png"));


    private static String photoPath = "";
    private static File dest = null;
    private static BufferedImage targetImage = null;
    private static boolean loading = false;

    private boolean changeInProgress = false;


    GedcomCompareOptionsPanel(GedcomCompareOptionsPanelController controller) {
        
        initComponents();
        
        DocumentChangeListener listener = new DocumentChangeListener();
        jTextField2.getDocument().putProperty("owner", CoreOptions.P_USERNAME); 
        jTextField2.getDocument().addDocumentListener(listener);
        jTextField4.getDocument().putProperty("owner", CoreOptions.P_USEREMAIL); 
        jTextField4.getDocument().addDocumentListener(listener);
        CoreOptions.getInstance().addPropertyChangeListener(this);
        
        loading = false;
    }

    ;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jTextField1 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        showOutputCheckBox = new javax.swing.JCheckBox();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(GedcomCompareOptionsPanel.class, "GedcomCompareOptionsPanel.jLabel5.text")); // NOI18N

        jTextField5.setText(org.openide.util.NbBundle.getMessage(GedcomCompareOptionsPanel.class, "GedcomCompareOptionsPanel.jTextField5.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel6, org.openide.util.NbBundle.getMessage(GedcomCompareOptionsPanel.class, "GedcomCompareOptionsPanel.jLabel6.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(GedcomCompareOptionsPanel.class, "GedcomCompareOptionsPanel.jLabel1.text")); // NOI18N

        jTextField6.setText(org.openide.util.NbBundle.getMessage(GedcomCompareOptionsPanel.class, "GedcomCompareOptionsPanel.jTextField6.text")); // NOI18N

        jTextField1.setText(org.openide.util.NbBundle.getMessage(GedcomCompareOptionsPanel.class, "GedcomCompareOptionsPanel.jTextField1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel7, org.openide.util.NbBundle.getMessage(GedcomCompareOptionsPanel.class, "GedcomCompareOptionsPanel.jLabel7.text")); // NOI18N

        jTextField4.setText(org.openide.util.NbBundle.getMessage(GedcomCompareOptionsPanel.class, "GedcomCompareOptionsPanel.jTextField4.text")); // NOI18N

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel8, org.openide.util.NbBundle.getMessage(GedcomCompareOptionsPanel.class, "GedcomCompareOptionsPanel.jLabel8.text")); // NOI18N
        jLabel8.setToolTipText(org.openide.util.NbBundle.getMessage(GedcomCompareOptionsPanel.class, "GedcomCompareOptionsPanel.jLabel8.toolTipText")); // NOI18N
        jLabel8.setBorder(null);
        jLabel8.setIconTextGap(0);
        jLabel8.setPreferredSize(new java.awt.Dimension(155, 186));
        jLabel8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel8MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jLabel8.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(GedcomCompareOptionsPanel.class, "GedcomCompareOptionsPanel.jLabel8.AccessibleContext.accessibleName")); // NOI18N
        jLabel8.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(GedcomCompareOptionsPanel.class, "GedcomCompareOptionsPanel.jLabel8.AccessibleContext.accessibleDescription")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(GedcomCompareOptionsPanel.class, "GedcomCompareOptionsPanel.jLabel2.text")); // NOI18N

        jTextField2.setText(org.openide.util.NbBundle.getMessage(GedcomCompareOptionsPanel.class, "GedcomCompareOptionsPanel.jTextField2.text")); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel7)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addGap(32, 32, 32)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTextField5)
                    .addComponent(jTextField2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
                    .addComponent(jTextField4)
                    .addComponent(jTextField6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(4, 4, 4)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(GedcomCompareOptionsPanel.class, "GedcomCompareOptionsPanel.jPanel2.TabConstraints.tabTitle"), jPanel2); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(showOutputCheckBox, org.openide.util.NbBundle.getMessage(GedcomCompareOptionsPanel.class, "GedcomCompareOptionsPanel.showOutputCheckBox.text")); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(showOutputCheckBox)
                .addContainerGap(273, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(showOutputCheckBox)
                .addContainerGap(159, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(GedcomCompareOptionsPanel.class, "GedcomCompareOptionsPanel.jPanel3.TabConstraints.tabTitle"), jPanel3); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addGap(17, 17, 17))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel8MouseClicked
        loading = true;
        chooseAndDisplayImage();
        loading = false;
    }//GEN-LAST:event_jLabel8MouseClicked

    void load() {
        jTextField1.setText(NbPreferences.forModule(GedcomCompareOptionsPanel.class).get("Pseudo", getPseudo()).trim());
        jTextField2.setText(CoreOptions.getInstance().getUserName(""));
        jTextField4.setText(CoreOptions.getInstance().getUserEmail(""));
        jTextField5.setText(NbPreferences.forModule(GedcomCompareOptionsPanel.class).get("City", "").trim());
        jTextField6.setText(NbPreferences.forModule(GedcomCompareOptionsPanel.class).get("Country", "").trim());
        photoPath = NbPreferences.forModule(GedcomCompareOptionsPanel.class).get("Photo", "");
        jLabel8.setText("");
        jLabel8.setToolTipText(NbBundle.getMessage(GedcomCompareOptionsPanel.class, "GedcomCompareOptionsPanel.jLabel8.toolTipText"));
        if (loadSavePhoto(new File(photoPath))) {
            jLabel8.setIcon(new ImageIcon(targetImage));
        } else {
            jLabel8.setIcon(DEFPROF_PHOTO);
        }
        showOutputCheckBox.setSelected(NbPreferences.forModule(GedcomCompareOptionsPanel.class).getBoolean("ShowOutput", false));
    }

    void store() {
        String str = jTextField1.getText();
        int i = str.indexOf(" ");
        NbPreferences.forModule(GedcomCompareOptionsPanel.class).put("Pseudo", i == -1 ? str : str.substring(0, i));  // no space in pseudo
        CoreOptions.getInstance().setUserName(jTextField2.getText().trim());
        CoreOptions.getInstance().setUserEmail(jTextField4.getText().trim());
        NbPreferences.forModule(GedcomCompareOptionsPanel.class).put("City", jTextField5.getText().trim());
        NbPreferences.forModule(GedcomCompareOptionsPanel.class).put("Country", jTextField6.getText().trim());
        if (targetImage != null && dest != null) {
            photoPath = dest.getAbsolutePath();
            saveImage(dest);
            NbPreferences.forModule(GedcomCompareOptionsPanel.class).put("Photo", photoPath);
        }
        NbPreferences.forModule(GedcomCompareOptionsPanel.class).putBoolean("ShowOutput", showOutputCheckBox.isSelected());
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if (!changeInProgress) {
            if (evt.getPropertyName().equals("username")) {
                jTextField2.setText((String) evt.getNewValue());
            } else if (evt.getPropertyName().equals("useremail")) {
                jTextField4.setText((String) evt.getNewValue());
            }
        }
        WindowManager.getDefault().invokeWhenUIReady(new Runnable() {
            @Override
            public void run() {
                changeInProgress = false;
            }
        });
    }

    boolean valid() {
        // TODO check whether form is consistent and complete
        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JCheckBox showOutputCheckBox;
    // End of variables declaration//GEN-END:variables

    /**
     * Get file from user and if file is not a picture or if picture cannot be
     * resized, set null icon and display "choose another file" message
     */
    private void chooseAndDisplayImage() {

        File file = new FileChooserBuilder(GedcomCompareOptionsPanel.class)
                .setFilesOnly(true)
                .setDefaultBadgeProvider()
                .setTitle(NbBundle.getMessage(GedcomCompareOptionsPanel.class, "FileChooserTitle"))
                .setApproveText(NbBundle.getMessage(GedcomCompareOptionsPanel.class, "FileChooserButton"))
                .setDefaultExtension(FileChooserBuilder.getImageFilter().getExtensions()[0])
                .setFileFilter(FileChooserBuilder.getImageFilter())
                .setAcceptAllFileFilterUsed(false)
                .setFileHiding(true)
                .setDefaultPreviewer()
                .showOpenDialog();
        if (file != null) {
            if (processImage(file)) {
                jLabel8.setIcon(new ImageIcon(targetImage));
            } else {
                jLabel8.setIcon(DEFPROF_PHOTO);
            }
        }
    }

    private static boolean loadSavePhoto(File f) {
        if (processImage(f)) {
            saveImage(f);
            return true;
        }
        return false;
    }

    private static boolean processImage(File f) {
        try {
            if (f == null) {
                throw new Exception("FileIsNull");
            }

            targetImage = scaleImage(f, IMG_LARGE_WIDTH, IMG_LARGE_HEIGHT);
            File dir = new File(new File(System.getProperty("user.home.ancestris")).getParent() + File.separator + "config" + File.separator + "Preferences" +  NbPreferences.forModule(GedcomCompareOptionsPanel.class).absolutePath());
            dir.mkdirs();
            dest = new File(dir, removeExtension(f.getName()) + ".jpg");
            return true;

        } catch (Exception ex) {
            if (loading) {
                DialogManager.create(NbBundle.getMessage(GedcomCompareOptionsPanel.class, "TITL_" + ex.getMessage()),
                        NbBundle.getMessage(GedcomCompareOptionsPanel.class, "TITL_PleaseChooseOther"))
                        .setMessageType(DialogManager.ERROR_MESSAGE).show();
            }
            return false;
        }
    }

    private static void saveImage(File f) {
        try {
            ImageIO.write(targetImage, "jpeg", f);
        } catch (Exception ex) {
            DialogManager.create(NbBundle.getMessage(GedcomCompareOptionsPanel.class, "TITL_CannotSaveCopy"),
                    NbBundle.getMessage(GedcomCompareOptionsPanel.class, "TITL_PleaseCheckPath", photoPath)).setMessageType(DialogManager.ERROR_MESSAGE).show();
        }
    }

    private static BufferedImage scaleImage(File f, int IMG_LARGE_WIDTH, int IMG_LARGE_HEIGHT) throws Exception {

        BufferedImage ret = null;
        Image image = null;
        try {
            image = ImageIO.read(f);
        } catch (Exception ex) {
            throw new Exception("FileIsNotAnImage");
        }

        if (image == null) {
            throw new Exception("FileIsNotAnImage");
        }

        int imageWidth = image.getWidth(null);
        int imageHeight = image.getHeight(null);
        if ((imageWidth <= 0) || (imageHeight <= 0)) {
            image.flush();
            throw new Exception("FileIsNotAnImage");
        }

        double imageRatio = (double) imageWidth / (double) imageHeight;
        int targetWidth = IMG_LARGE_WIDTH;
        int targetHeight = IMG_LARGE_HEIGHT;
        double targetRatio = (double) targetWidth / (double) targetHeight;
        if (targetRatio < imageRatio) {
            targetHeight = (int) (targetWidth / imageRatio);
        } else {
            targetWidth = (int) (targetHeight * imageRatio);
        }

        try {
            ret = resizeImage(image, targetWidth, targetHeight);
        } catch (Exception e) {
            throw new Exception("FileCannotBeResized");
        }

        return ret;
    }

    private static BufferedImage resizeImage(Image img, int width, int height) {
        BufferedImage dimg = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
        Graphics2D g = dimg.createGraphics();
        g.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
        g.drawImage(img, 0, 0, width, height, null);
        g.dispose();
        return dimg;
    }

    public static byte[] getPhotoBytes(File f) {
        try {
            BufferedImage img = ImageIO.read(f);
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            ImageIO.write(img, "jpg", baos);
            baos.flush();
            return baos.toByteArray();
        } catch (IOException ex) {
            //Exceptions.printStackTrace(ex);
        }
        return null;
    }

    public static ImageIcon getPhoto(int size, byte[] photoBytes) {
        Image image = null;
        if (photoBytes == null) {
            return null;
        }
        try {
            BufferedImage bufferedImage = ImageIO.read(new ByteArrayInputStream(photoBytes));
            if (size == 0) {
                image = bufferedImage.getScaledInstance(IMG_ICON_WIDTH, IMG_ICON_HEIGHT, Image.SCALE_DEFAULT);
            } else if (size == 1) {
                image = bufferedImage.getScaledInstance(IMG_SMALL_WIDTH, IMG_SMALL_HEIGHT, Image.SCALE_DEFAULT);
            } else if (size == 2) {
                image = bufferedImage.getScaledInstance(IMG_MEDIUM_WIDTH, IMG_MEDIUM_HEIGHT, Image.SCALE_DEFAULT);
            } else if (size == 3) {
                image = bufferedImage.getScaledInstance(IMG_LARGE_WIDTH, IMG_LARGE_HEIGHT, Image.SCALE_DEFAULT);
            } else {
                image = bufferedImage.getScaledInstance(IMG_MEDIUM_WIDTH, IMG_MEDIUM_HEIGHT, Image.SCALE_DEFAULT);
            }
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
        return new ImageIcon(image);
    }

    public static String getPseudo() {
        String p = NbPreferences.forModule(GedcomCompareOptionsPanel.class).get("Pseudo", getDefaultPseudo()).trim();
        NbPreferences.forModule(GedcomCompareOptionsPanel.class).put("Pseudo", p);  // store it right away to avoid generating another one
        return p;
    }

    public static String getDefaultPseudo() {
        String rawName = getProperty("user.home.ancestris", "", "").trim();
        
        int i = rawName.indexOf(File.separator);
        rawName = rawName.substring(i+1);  // get rid of first "/"
        i = rawName.indexOf(File.separator);
        rawName = rawName.substring(i+1);  // get rid of first word
        i = rawName.indexOf(File.separator);
        if (i == -1) {
            i = rawName.length();
        }
        rawName = rawName.substring(0, Math.min(PSEUDO_MAXLENGTH, i)).trim();
        
        // Generate random string if empty
        if (rawName.isEmpty()) {
            char[] buf = new char[PSEUDO_MAXLENGTH-3];
            char[] symbols = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".toCharArray();
            Random random = new Random();
            for (int idx = 0; idx < buf.length; ++idx) {
                buf[idx] = symbols[random.nextInt(symbols.length)];
            }
            rawName = "ZZZ" + new String(buf);
        }
        
        return rawName;
    }

    public static UserProfile getProfile() {
        UserProfile profile = new UserProfile();
        profile.name = CoreOptions.getInstance().getUserName("");
        profile.email = CoreOptions.getInstance().getUserEmail("");
        profile.city = NbPreferences.forModule(GedcomCompareOptionsPanel.class).get("City", "").trim();
        profile.country = NbPreferences.forModule(GedcomCompareOptionsPanel.class).get("Country", "").trim();
        File f = new File(NbPreferences.forModule(GedcomCompareOptionsPanel.class).get("Photo", ""));
        if (loadSavePhoto(f)) {
            profile.photoBytes = getPhotoBytes(f);
        }
        return profile;
    }

    public static String getProfileError() {
        UserProfile myProfile = getProfile();

        if (myProfile.name.isEmpty()) {
            return NbBundle.getMessage(GedcomCompareOptionsPanel.class, "ERR_NullName");
        }
        if (!isValidEmailAddress(myProfile.email)) {
            return NbBundle.getMessage(GedcomCompareOptionsPanel.class, "ERR_NullEmail");
        }
        if (myProfile.city.isEmpty() || myProfile.country.isEmpty()) {
            return NbBundle.getMessage(GedcomCompareOptionsPanel.class, "ERR_NullPlace");
        }
        if (myProfile.photoBytes == null || myProfile.photoBytes.length == 0) {
            return NbBundle.getMessage(GedcomCompareOptionsPanel.class, "ERR_NullPhoto");
        }
        return "";
    }

    public static boolean isValidEmailAddress(String email) {
        String ePattern = "^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$";
        java.util.regex.Pattern p = java.util.regex.Pattern.compile(ePattern);
        java.util.regex.Matcher m = p.matcher(email);
        return m.matches();
    }

    private static String removeExtension(String name) {
        String ret = name;
        int dotIndex = name.lastIndexOf('.');
        if (dotIndex >= 0) { // to prevent exception if there is no dot
            ret = name.substring(0, dotIndex);
        }
        return ret;
    }


    
    
    
    
    
    
    private class DocumentChangeListener implements DocumentListener {

        @Override
        public void insertUpdate(DocumentEvent e) {
            updateOption(e);
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            updateOption(e);
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            updateOption(e);
        }

        private void updateOption(DocumentEvent e) {
            String property = (String) e.getDocument().getProperty("owner");
            String oldValue = "";
            String newValue = "";
            try {
                newValue = e.getDocument().getText(0, e.getDocument().getLength());
            } catch (BadLocationException ex) {
                Exceptions.printStackTrace(ex);
            }
            changeInProgress = true;
            CoreOptions.getInstance().fireOptionChange(property, oldValue, newValue);
        }
    }


}
