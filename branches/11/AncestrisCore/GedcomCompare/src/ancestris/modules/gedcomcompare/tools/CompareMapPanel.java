/*
 * Ancestris - http://www.ancestris.org
 * 
 * Copyright 2020 Ancestris
 * 
 * Author: Frédéric Lapeyre (frederic@ancestris.org).
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 */
package ancestris.modules.gedcomcompare.tools;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import java.awt.event.KeyEvent;
import java.awt.geom.Point2D;
import java.util.HashSet;
import java.util.Set;
import javax.swing.JComponent;
import javax.swing.KeyStroke;
import org.jxmapviewer.JXMapViewer;
import org.jxmapviewer.viewer.DefaultWaypointRenderer;
import org.jxmapviewer.viewer.GeoPosition;
import org.jxmapviewer.viewer.Waypoint;
import org.jxmapviewer.viewer.WaypointPainter;
import org.openide.windows.WindowManager;

/**
 *
 * @author frederic
 */
public class CompareMapPanel extends javax.swing.JPanel {

    private LegendPanel legend = null;
    private boolean isZoomFixed = false;
    
    /**
     * Creates new form CompareMapPanel
     */
    public CompareMapPanel() {
        initComponents();
        jXMapKit1.setMiniMapVisible(false);
        jXMapKit1.setZoomButtonsVisible(true);
        jXMapKit1.setZoomSliderVisible(true);

        getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_ADD, 0), "zoomout");
        getActionMap().put("zoomout", jXMapKit1.getZoomOutAction());
        getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_SUBTRACT, 0), "zoomin");
        getActionMap().put("zoomin", jXMapKit1.getZoomInAction());

        // Add legend at the top left corner with padding
        legend = new LegendPanel();
        legend.setBounds(10, 10, legend.getPreferredSize().width, legend.getPreferredSize().height);
        GridBagConstraints c = new GridBagConstraints();
        c.gridx = 0;
        c.gridy = 0;
        c.anchor = GridBagConstraints.FIRST_LINE_START;
        c.insets = new Insets(6, 6, 6, 6);
        jXMapKit1.getMainMap().add(legend, c);

    }
    
    public void init(STMap map1, STMap map2, STMap intersection) {
        
        // Build customized waypoints that will hold the gedcom reference and the ST location and time period
        Set<STPoint> stPoints = map1.getPoints(0);
        stPoints.addAll(map2.getPoints(1));
        stPoints.addAll(intersection.getPoints(2));
        
        // Display waypoints
        WaypointPainter painter = new WaypointPainter();
        painter.setWaypoints(stPoints);
        painter.setRenderer(new WaypointRenderer());
        jXMapKit1.setAddressLocationPainter(painter);
        jXMapKit1.repaint();

        // Center and scale map based on points set
        WindowManager.getDefault().invokeWhenUIReady(new Runnable() {
            @Override
            public void run() {
                if (!isZoomFixed) {
                    // Adjust zoom
                    jXMapKit1.getMainMap().zoomToBestFit(getGeoPositions(stPoints), 0.9);
                }
                // Update legend
                legend.setNames(map1.getName() + " (" + map1.getPoints(0).size() + ")",
                        map2.getName() + " (" + map2.getPoints(1).size() + ")",
                        intersection.getPoints(2).size());
                legend.setBounds(10, 10, legend.getPreferredSize().width, legend.getPreferredSize().height);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jXMapKit1 = new org.jxmapviewer.JXMapKit();

        jXMapKit1.setPreferredSize(new java.awt.Dimension(600, 500));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jXMapKit1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jXMapKit1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.jxmapviewer.JXMapKit jXMapKit1;
    // End of variables declaration//GEN-END:variables

    public void fixZoom() {
        isZoomFixed = true;
    }
    
    private Set<GeoPosition> getGeoPositions(Set<STPoint> set) {
        Set<GeoPosition> ret = new HashSet<>();
        set.forEach((p) -> {
            ret.add(p.getPosition());
        });
        return ret;
    } 
    
    private class WaypointRenderer extends DefaultWaypointRenderer {

        Color[] colors = new Color[]{Color.BLUE, new Color(0, 144, 0), Color.RED};
        
        public WaypointRenderer() {
            super();
        }

        @Override
        public void paintWaypoint(Graphics2D g, JXMapViewer map, Waypoint wp) {
            Point2D point = map.getTileFactory().geoToPixel(wp.getPosition(), map.getZoom());
            int x = Long.valueOf(Math.round(point.getX())).intValue();
            int y = Long.valueOf(Math.round(point.getY())).intValue();
            
            STPoint stPoint = (STPoint) wp;
            
            int size = (int) (Math.sqrt(stPoint.getTime()) * 20 / (map.getZoom() + 1));
            Color color = colors[stPoint.getType()];
            
            g.setColor(color);
            if (stPoint.getType() == 2) {
                g.fillOval(x - size, y - size, 2 * size, 2 * size);
            } else {
                g.setStroke(new BasicStroke(3f));
                g.drawOval(x - size, y - size, 2 * size, 2 * size);
            }
            
        }

    }
}
