/*
 * Ancestris - http://www.ancestris.org
 * 
 * Copyright 2017 Ancestris
 * 
 * Author: Frédéric Lapeyre (frederic@ancestris.org).
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 */
package ancestris.modules.editors.standard.tools;

import genj.gedcom.Fam;
import genj.gedcom.Gedcom;
import genj.gedcom.GedcomException;
import genj.gedcom.Indi;
import genj.gedcom.PropertyHusband;
import genj.gedcom.PropertyWife;
import genj.util.Registry;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JButton;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle;

/**
 * 
 * @author frederic
 */
public class FamChooser extends javax.swing.JPanel {

    private static Integer CHOICE_SET = 0;
    private static Integer CHOICE_CHOOSE = 1;
    private static Integer CHOICE_CREATE = 2;
    
    private Registry registry = null;

    private Indi parent = null;
    private Indi child = null;
    private boolean isFather = true;
    private JButton okButton = null;

    private List<String> items = null;
    private List<Integer> choices = null;
    private List<Fam> fams = null;
    
    /**
     * Creates new form FamChooser
     */
    public FamChooser(Indi parent, Indi child, boolean isFather, JButton okButton) {
        registry = Registry.get(getClass());
        this.parent = parent;
        this.child = child;
        this.isFather = isFather;
        this.okButton = okButton;
        initList();
        
        initComponents();
        
        
        jList.setSelectedIndex(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane = new javax.swing.JScrollPane();
        jList = new javax.swing.JList();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        jList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = items.toArray(new String[items.size()]);;
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListMouseClicked(evt);
            }
        });
        jScrollPane.setViewportView(jList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
    }//GEN-LAST:event_formComponentResized

    private void jListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListMouseClicked
        if (evt.getButton() == MouseEvent.BUTTON1 && evt.getClickCount() == 2 && okButton.isEnabled()) {
            okButton.doClick();
        }
    }//GEN-LAST:event_jListMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList jList;
    private javax.swing.JScrollPane jScrollPane;
    // End of variables declaration//GEN-END:variables

    /**
     * USER CHOICES ARE:
     *     first -  Set "Pierre ALPHA" as "husband/wife" in the existing family of "Sophie ISOLEE"
     *           - Choose existing family "Pierre ALPHA x Gisèle CCC married xx/xx/xx" as parents of "Sophie ISOLEE"
     *           - ...
     *           - Choose existing family "Pierre ALPHA x Louise BBB married xx/xx/xx" as parents of "Sophie ISOLEE"
     *     last  - Create a new family for child "Sophie ISOLEE" with "Pierre ALPHA" as the parent
     */
    private void initList() {
        
        String title = isFather ? PropertyHusband.LABEL_FATHER : PropertyWife.LABEL_MOTHER;
        Fam childFam = child.getFamilyWhereBiologicalChild();
        items = new ArrayList<String>();
        choices = new ArrayList<Integer>();
        fams = new ArrayList<Fam>();
        
        if (childFam != null) {
            addItem(NbBundle.getMessage(getClass(), "FamChooser.Choice_Set", parent.toString(true), title, childFam.toString(true), child.toString(true)), CHOICE_SET, childFam);
        }
        
        for (Fam fam : parent.getFamiliesWhereSpouse()) {
            Indi husb = fam.getHusband();
            Indi wife = fam.getWife();
            if (!child.isDescendantOf(fam) && child != husb && child != wife) {
                addItem(NbBundle.getMessage(getClass(), "FamChooser.Choice_Choose", fam.toString(true)), CHOICE_CHOOSE, fam);
            }
        }
        
        if (childFam == null) {
            addItem(NbBundle.getMessage(getClass(), "FamChooser.Choice_Create", child.toString(true), parent.toString(true), title), CHOICE_CREATE, null);
        }
        
    }

    private void addItem(String message, Integer type, Fam fam) {
        items.add(message);
        choices.add(type);
        fams.add(fam);
    }

    public boolean existChoices() {
        return items.size() > 1;
    }

    public void updateGedcom() {
        try {
            int i = jList.getSelectedIndex();
            
            if (CHOICE_SET.equals(choices.get(i))) {
                if (isFather) {
                    fams.get(i).setHusband(parent);
                } else {
                    fams.get(i).setWife(parent);
                }
            }

            else if (CHOICE_CREATE.equals(choices.get(i))) {
                Fam fam = (Fam) parent.getGedcom().createEntity(Gedcom.FAM);
                fam.addDefaultProperties();
                fam.addChild(child);
                if (isFather) {
                    fam.setHusband(parent);
                } else {
                    fam.setWife(parent);
                }
            }
            
            else if (CHOICE_CHOOSE.equals(choices.get(i))) {
                fams.get(i).addChild(child);
            }
            
        } catch (GedcomException ex) {
            Exceptions.printStackTrace(ex);
        }
    }



}
