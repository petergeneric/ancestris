/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.ancestris.trancestris.explorers.zipexplorer;

import java.awt.Color;
import java.awt.Frame;
import java.beans.PropertyVetoException;
import java.io.File;
import java.util.Locale;
import java.util.StringTokenizer;
import java.util.logging.Logger;
import javax.swing.UIManager;
import javax.swing.tree.TreeSelectionModel;
import org.ancestris.trancestris.editors.actions.EditorSearchPanel;
import org.ancestris.trancestris.resources.ResourceFile;
import org.ancestris.trancestris.resources.ZipArchive;
import org.openide.nodes.Children;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
//import org.openide.util.ImageUtilities;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.Node;
import org.openide.util.ImageUtilities;
import org.openide.util.Lookup;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;
import org.openide.util.lookup.ProxyLookup;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//org.ancestris.trancestris.explorers.zipexplorer//ZipExplorer//EN",
autostore = false)
public final class ZipExplorerTopComponent extends TopComponent implements ExplorerManager.Provider {

    private static final Logger logger = Logger.getLogger(ZipExplorerTopComponent.class.getName());
    private static ZipExplorerTopComponent instance;
    /**
     * path to the icon used by the component and its open action
     */
    static final String ICON_PATH = "org/ancestris/trancestris/explorers/zipexplorer/actions/zip-icon.png";
    private static final String PREFERRED_ID = "ZipExplorerTopComponent";
    private ExplorerManager zipExplorerManager = null;
    private ZipArchive zipArchive = null;
    private InstanceContent instanceContent = new InstanceContent();
    private final ProxyLookup proxyLookup;
    private ZipRootNode newZipRootNode = null;

    public ZipExplorerTopComponent() {
        try {
            UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
        } catch (Exception ex) {
            Exceptions.printStackTrace(ex);
        }

        initComponents();
        setName(NbBundle.getMessage(ZipExplorerTopComponent.class, "CTL_ZipExplorerTopComponent"));
        setToolTipText(NbBundle.getMessage(ZipExplorerTopComponent.class, "HINT_ZipExplorerTopComponent"));
        setIcon(ImageUtilities.loadImage(ICON_PATH, true));
        putClientProperty(TopComponent.PROP_CLOSING_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_UNDOCKING_DISABLED, Boolean.TRUE);
        zipExplorerManager = new ExplorerManager();
        ((BeanTreeView) beanTreeView).setRootVisible(false);
        ((BeanTreeView) beanTreeView).setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
//        associateLookup(ExplorerUtils.createLookup(zipExplorerManager, getActionMap()));
//        ZipRootNode newZipRootNode = new ZipRootNode(zipFile, content);
//        setActivatedNodes(new Node[]{newZipRootNode});
        Lookup lookup = ExplorerUtils.createLookup(zipExplorerManager, getActionMap());
        proxyLookup = new ProxyLookup(lookup, new AbstractLookup(instanceContent));
        associateLookup(proxyLookup);
        missingButton.setForeground(ResourceFile.TR_MISSING_COL);
        missingButton.setText(missingButton.getText());
        updateButton.setForeground(ResourceFile.TR_UPDATE_COL);
        updateButton.setText(updateButton.getText());
    }

    public void selectNode(String nodePath) {
        Node findNode = newZipRootNode;

        StringTokenizer st = new StringTokenizer(nodePath, "/");
        while (st.hasMoreTokens()) {
            String nodeName = st.nextToken();
            findNode = findNode.getChildren().findChild(nodeName);
            if (findNode == null) {
                break;
            }
        }
        if (findNode != null) {
            try {
                zipExplorerManager.setSelectedNodes(new Node[]{findNode});
            } catch (PropertyVetoException ex) {
                Exceptions.printStackTrace(ex);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        allButton = new javax.swing.JButton();
        missingButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        selectionButton = new javax.swing.JButton();
        collButton = new javax.swing.JButton();
        beanTreeView = new BeanTreeView();

        setLayout(new java.awt.BorderLayout());

        org.openide.awt.Mnemonics.setLocalizedText(allButton, org.openide.util.NbBundle.getMessage(ZipExplorerTopComponent.class, "ZipExplorerTopComponent.allButton.text")); // NOI18N
        allButton.setToolTipText(org.openide.util.NbBundle.getMessage(ZipExplorerTopComponent.class, "ZipExplorerTopComponent.allButton.toolTipText")); // NOI18N
        allButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(missingButton, org.openide.util.NbBundle.getMessage(ZipExplorerTopComponent.class, "ZipExplorerTopComponent.missingButton.text")); // NOI18N
        missingButton.setToolTipText(org.openide.util.NbBundle.getMessage(ZipExplorerTopComponent.class, "ZipExplorerTopComponent.missingButton.toolTipText")); // NOI18N
        missingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                missingButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(updateButton, org.openide.util.NbBundle.getMessage(ZipExplorerTopComponent.class, "ZipExplorerTopComponent.updateButton.text")); // NOI18N
        updateButton.setToolTipText(org.openide.util.NbBundle.getMessage(ZipExplorerTopComponent.class, "ZipExplorerTopComponent.updateButton.toolTipText")); // NOI18N
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(selectionButton, org.openide.util.NbBundle.getMessage(ZipExplorerTopComponent.class, "ZipExplorerTopComponent.selectionButton.text")); // NOI18N
        selectionButton.setToolTipText(org.openide.util.NbBundle.getMessage(ZipExplorerTopComponent.class, "ZipExplorerTopComponent.selectionButton.toolTipText")); // NOI18N
        selectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectionButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(collButton, org.openide.util.NbBundle.getMessage(ZipExplorerTopComponent.class, "ZipExplorerTopComponent.collButton.text")); // NOI18N
        collButton.setToolTipText(org.openide.util.NbBundle.getMessage(ZipExplorerTopComponent.class, "ZipExplorerTopComponent.collButton.toolTipText")); // NOI18N
        collButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                collButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(allButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(missingButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(updateButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(selectionButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                .addComponent(collButton)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(allButton)
                .addComponent(missingButton)
                .addComponent(updateButton)
                .addComponent(collButton)
                .addComponent(selectionButton))
        );

        add(jPanel1, java.awt.BorderLayout.NORTH);
        add(beanTreeView, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void allButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allButtonActionPerformed
        if (beanTreeView != null) {
            ((BeanTreeView) beanTreeView).expandAll();
        }
    }//GEN-LAST:event_allButtonActionPerformed

    private void collButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_collButtonActionPerformed
        if (beanTreeView != null && newZipRootNode != null) {
            Children children = newZipRootNode.getChildren();
            for (Node node : children.getNodes()) {
                collapseNode(node);
            }
        }
    }//GEN-LAST:event_collButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        expandColor(ResourceFile.TR_UPDATE_COL);
    }//GEN-LAST:event_updateButtonActionPerformed

    private void missingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_missingButtonActionPerformed
        expandColor(ResourceFile.TR_MISSING_COL);
    }//GEN-LAST:event_missingButtonActionPerformed

    private void selectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectionButtonActionPerformed
        if (beanTreeView != null) {
            for (Node node : zipExplorerManager.getSelectedNodes()) {
                expandNode(node);
            }
        }
    }//GEN-LAST:event_selectionButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton allButton;
    private javax.swing.JScrollPane beanTreeView;
    private javax.swing.JButton collButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton missingButton;
    private javax.swing.JButton selectionButton;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables

    /**
     * Gets default instance. Do not use directly: reserved for *.settings files
     * only, i.e. deserialization routines; otherwise you could get a
     * non-deserialized instance. To obtain the singleton instance, use {@link #findInstance}.
     */
    public static synchronized ZipExplorerTopComponent getDefault() {
        if (instance == null) {
            instance = new ZipExplorerTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the ZipExplorerTopComponent instance. Never call {@link #getDefault}
     * directly!
     */
    public static synchronized ZipExplorerTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            logger.warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof ZipExplorerTopComponent) {
            return (ZipExplorerTopComponent) win;
        }
        logger.warning(
                "There seem to be multiple components with the '" + PREFERRED_ID
                + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    public void componentOpened() {
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    Object readProperties(java.util.Properties p) {
        if (instance == null) {
            instance = this;
        }
        instance.readPropertiesImpl(p);
        return instance;
    }

    private void readPropertiesImpl(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return zipExplorerManager;
    }

    public void setBundles(File zipFile, Locale fromLocale, Locale toLocale) {
        EditorSearchPanel editorSearchPanel = EditorSearchPanel.getInstance();

        zipArchive = new ZipArchive(zipFile, fromLocale, toLocale);
        Frame mainWindow = WindowManager.getDefault().getMainWindow();
        mainWindow.setTitle(NbBundle.getMessage(ZipExplorerTopComponent.class, "CTL_MainWindow_Title", fromLocale.getDisplayLanguage(), 
                toLocale.getDisplayLanguage(), 
                (int) (((float) (zipArchive.getTranslatedLineCount()) / (float) zipArchive.getLineCount()) * 100)));
        editorSearchPanel.setFromLocaleToggleButtonText(fromLocale.getDisplayLanguage());
        editorSearchPanel.setToLocaleToggleButtonText(toLocale.getDisplayLanguage());
        newZipRootNode = new ZipRootNode(zipArchive);
        zipExplorerManager.setRootContext(newZipRootNode);
        ((BeanTreeView) beanTreeView).setRootVisible(true);
        instanceContent.add(newZipRootNode);
    }

    public ZipArchive getBundles() {
        return zipArchive;
    }

    private void expandNode(Node node) {
        for (Node n : node.getChildren().getNodes()) {
            expandNode(n);
        }
        ((BeanTreeView) beanTreeView).expandNode(node);
        
    }

    private void collapseNode(Node node) {
        for (Node n : node.getChildren().getNodes()) {
            collapseNode(n);
        }
        ((BeanTreeView) beanTreeView).collapseNode(node);
    }

    private void expandNodeColor(Node node, Color color) {
        ZipDirectoryNode zipNode = (ZipDirectoryNode) node;
        if (zipNode.directory.getColor() == color) {
            ((BeanTreeView) beanTreeView).expandNode(node);
        }
        for (Node n : node.getChildren().getNodes()) {
            if (!n.isLeaf()) {
                expandNodeColor(n, color);
            }
        }
    }

    private void expandColor(Color color) {
        if (beanTreeView != null) {
            Node[] nodes = zipExplorerManager.getSelectedNodes();
            if (nodes.length == 0) {
                nodes = newZipRootNode.getChildren().getNodes();
            }
            for (Node node : nodes) {
                if (node instanceof ZipRootNode) {
                    for (Node n : newZipRootNode.getChildren().getNodes()) {
                        expandNodeColor(n, color);
                    }
                } else {
                    expandNodeColor(node, color);
                }
            }
        }
    }

}
