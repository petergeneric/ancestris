package ancestris.modules.viewers.entityviewer.panels;

import ancestris.modules.gedcom.utilities.swing.EntityTag2Icon;
import genj.gedcom.Entity;
import genj.gedcom.Gedcom;
import genj.gedcom.TagPath;
import java.awt.Component;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.swing.AbstractListModel;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JList;

/**
 *
 * @author lemovice
 */
public class SelectEntityPanel extends javax.swing.JPanel {

    EntityComboBoxModel entityComboBoxModel;
    private final ArrayList<TagPath> SORTS = new ArrayList<TagPath>() {

        {
            add(new TagPath("INDI"));
            add(new TagPath("INDI:NAME"));
            add(new TagPath("INDI:BIRT:DATE"));
            add(new TagPath("INDI:DEAT:DATE"));
            add(new TagPath("FAM"));
            add(new TagPath("FAM:MARR:DATE"));
            add(new TagPath("FAM:HUSB:*:..:NAME"));
            add(new TagPath("FAM:WIFE:*:..:NAME"));
            add(new TagPath("OBJE"));
            add(new TagPath("OBJE:TITL"));
            add(new TagPath("OBJE:FILE:TITL"));
            add(new TagPath("NOTE"));
            add(new TagPath("NOTE:NOTE"));
            add(new TagPath("SOUR"));
            add(new TagPath("SOUR:TITL"));
            add(new TagPath("SOUR:ABBR"));
            add(new TagPath("SOUR:AUTH"));
            add(new TagPath("SOUR:REPO"));
            add(new TagPath("SUBM"));
            add(new TagPath("REPO"));
            add(new TagPath("REPO:NAME"));
            add(new TagPath("REPO:REFN"));
            add(new TagPath("REPO:RIN"));
        }
    };

    /**
     * Creates new form SelectEntityPanel
     */
    public SelectEntityPanel(Gedcom gedcom, String entityTag) {
        Collection<? extends Entity> entities = gedcom.getEntities(entityTag);
        entityComboBoxModel = new EntityComboBoxModel(entityTag);

        entityComboBoxModel.addAll(entities);
        entityComboBoxModel.setSelectedItem(entities.isEmpty() ? null : entities.toArray()[0]);

        initComponents();

        entityTypeLabel.setIcon(EntityTag2Icon.getIcon(entityTag));
        entityComboBox.setSelectedIndex(entities.isEmpty() ? -1 : 0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        entityTypeLabel = new javax.swing.JLabel();
        entityComboBox = new javax.swing.JComboBox<Entity>();

        entityTypeLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/viewers/entityviewer/resources/Individual.png"))); // NOI18N

        entityComboBox.setModel(entityComboBoxModel);
        entityComboBox.setRenderer(new ComboBoxRenderer ());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(entityTypeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(entityComboBox, 0, 207, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(entityTypeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(entityComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<Entity> entityComboBox;
    private javax.swing.JLabel entityTypeLabel;
    // End of variables declaration//GEN-END:variables

    public Entity getSelectedEntity() {
        return (Entity) entityComboBoxModel.getSelectedItem();
    }

    public void setSelectedEntity(Entity selectedEntity) {
        entityComboBoxModel.setSelectedItem(selectedEntity);
    }

    public class EntityComboBoxModel extends AbstractListModel<Entity> implements ComboBoxModel<Entity> {

        Entity selectedEntity;
        ArrayList<Entity> entityList = new ArrayList<Entity>();
        private List<TagPath> sorts;

        public EntityComboBoxModel(String entityTag) {
            sorts = new ArrayList<TagPath>();

            for (TagPath tagPath : SORTS) {
                if (!tagPath.getFirst().equals(entityTag)) {
                    continue;
                }
                sorts.add(tagPath);
            }
        }

        @Override
        public int getSize() {
            return entityList.size();
        }

        @Override
        public Entity getElementAt(int i) {
            return entityList.get(i);
        }

        @Override
        public void setSelectedItem(Object o) {
            selectedEntity = (Entity) o;
        }

        public boolean addAll(Collection<? extends Entity> c) {
            int size = entityList.size();
            entityList.ensureCapacity(size);
            boolean addAll = entityList.addAll(c);
            fireIntervalAdded(this, size, entityList.size());
            return addAll;
        }

        public void clear() {
            int size = entityList.size();
            entityList.clear();
            fireIntervalRemoved(this, 0, size);
        }

        @Override
        public Object getSelectedItem() {
            return selectedEntity;
        }
    }

    private class ComboBoxRenderer extends DefaultListCellRenderer {

        public ComboBoxRenderer() {
        }

        /*
         * This method finds the image and text corresponding to the selected
         * value and returns the label, set up to display the text and image.
         */
        @Override
        public Component getListCellRendererComponent(
                JList list,
                Object value,
                int index,
                boolean isSelected,
                boolean cellHasFocus) {
            if (isSelected) {
                setBackground(list.getSelectionBackground());
                setForeground(list.getSelectionForeground());
            } else {
                setBackground(list.getBackground());
                setForeground(list.getForeground());
            }

            return super.getListCellRendererComponent(list, ((Entity) value).toString(true), index, isSelected, cellHasFocus);
        }
    }
}
