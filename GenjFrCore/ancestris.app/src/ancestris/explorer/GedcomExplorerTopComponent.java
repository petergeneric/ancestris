/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ancestris.explorer;

import genj.view.ContextProvider;
import genj.view.ViewContext;
import ancestris.gedcom.GedcomDirectory;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
//import org.openide.util.ImageUtilities;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Node;
import org.openide.windows.Mode;
import org.openide.windows.RetainLocation;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//ancestris.explorer//GedcomExplorer//EN",
autostore = false)
@RetainLocation("ancestris-explorer")
public final class GedcomExplorerTopComponent extends TopComponent implements ExplorerManager.Provider/*, ContextProvider*/{

    private static GedcomExplorerTopComponent instance;
    /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
    private static final String PREFERRED_ID = "GedcomExplorerTopComponent"; //NOI18N

    private transient ExplorerManager explorerManager = new ExplorerManager();
    private boolean forceClose=false;

    public GedcomExplorerTopComponent() {
        forceClose=false;
        initComponents();
        setName(NbBundle.getMessage(GedcomExplorerTopComponent.class, "CTL_GedcomExplorerTopComponent"));
        setToolTipText(NbBundle.getMessage(GedcomExplorerTopComponent.class, "HINT_GedcomExplorerTopComponent"));
//        setIcon(ImageUtilities.loadImage(ICON_PATH, true));
        putClientProperty(TopComponent.PROP_CLOSING_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_MAXIMIZATION_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_KEEP_PREFERRED_SIZE_WHEN_SLIDED_IN, Boolean.TRUE);
        putClientProperty("TopComponentAllowDockAnywhere", Boolean.TRUE);

        associateLookup(ExplorerUtils.createLookup(explorerManager, getActionMap()));
        explorerManager.setRootContext(new AbstractNode(new GedcomFileChildren()));
        ((BeanTreeView) gedcomsPane).setRootVisible(false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        displayType = new javax.swing.JComboBox();
        gedcomsPane = new BeanTreeView();

        setLayout(new java.awt.BorderLayout());

        displayType.setModel(displayTypeModel);
        add(displayType, java.awt.BorderLayout.PAGE_START);
        add(gedcomsPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox displayType;
    private javax.swing.JScrollPane gedcomsPane;
    // End of variables declaration//GEN-END:variables
    private DefaultComboBoxModel displayTypeModel = new DefaultComboBoxModel(new String[] {
        org.openide.util.NbBundle.getMessage(GedcomExplorerTopComponent.class, "DisplayType.AllEntities"),
        org.openide.util.NbBundle.getMessage(GedcomExplorerTopComponent.class, "DisplayType.Neighbourhood") });

    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     */
    public static synchronized GedcomExplorerTopComponent getDefault() {
        if (instance == null) {
            instance = new GedcomExplorerTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the GedcomExplorerTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized GedcomExplorerTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(GedcomExplorerTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system."); //NOI8N
            return getDefault();
        }
        if (win instanceof GedcomExplorerTopComponent) {
            return (GedcomExplorerTopComponent) win;
        }
        Logger.getLogger(GedcomExplorerTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID //NOI18N
                + "' ID. That is a potential source of errors and unexpected behavior.");  //NOI18N
        return getDefault();
    }

    @Override
    public boolean canClose(){return  forceClose;}

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    public void open() {
         Mode m = WindowManager.getDefault().findMode ("leftSlidingSide");
         if (m != null) {
            m.dockInto(this);
         }
         super.open();
    }

    // Closes explorer if no gedcom file opened
//    @Override
//    protected void componentOpened() {
//        super.componentOpened();
//        if( GedcomDirectory.getInstance().getContexts().isEmpty() ) {
//            forceClose = true;
//                close();
//        }
//    }
//
    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");  //NOI18N
        // TODO store your settings
    }

    Object readProperties(java.util.Properties p) {
        if (instance == null) {
            instance = this;
        }
        instance.readPropertiesImpl(p);
        return instance;
    }

    private void readPropertiesImpl(java.util.Properties p) {
//        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    public ExplorerManager getExplorerManager() {
         return explorerManager;
    }

    public ViewContext getContext() {
        Node[] nodes = getActivatedNodes();
        if (nodes == null || nodes.length == 0)
            return null;
        Node contextnode = nodes[0];
        if (contextnode instanceof ExplorerNode)
            return new ViewContext(((ExplorerNode)contextnode).getContext());
        return null;
    }
}
