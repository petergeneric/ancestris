/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ZipExplorerSearchPanel.java
 *
 * Created on 30 avr. 2012, 16:31:25
 */
package org.ancestris.trancestris.explorers.zipexplorer.actions;

import java.util.List;
import org.ancestris.trancestris.resources.ZipArchive;

/**
 *
 * @author lemovice
 */
public class ZipExplorerSearchPanel extends javax.swing.JPanel {

    ZipArchive zipArchive = null;

    /** Creates new form ZipExplorerSearchPanel */
    public ZipExplorerSearchPanel(ZipArchive zipArchive) {
        this.zipArchive = zipArchive;
        initComponents();
        fromLocaleCheckBox.setText(zipArchive.getFromLocale().getDisplayLanguage());
        toLocaleCheckBox.setText(zipArchive.getToLocale().getDisplayLanguage());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        localeButtonGroup = new javax.swing.ButtonGroup();
        expressionTextField = new javax.swing.JTextField();
        resultScrollPane = new javax.swing.JScrollPane();
        resultTextArea = new javax.swing.JTextArea();
        searchButton = new javax.swing.JButton();
        fromLocaleCheckBox = new javax.swing.JCheckBox();
        toLocaleCheckBox = new javax.swing.JCheckBox();

        expressionTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                expressionTextFieldKeyPressed(evt);
            }
        });

        resultTextArea.setColumns(20);
        resultTextArea.setRows(5);
        resultScrollPane.setViewportView(resultTextArea);

        searchButton.setText(org.openide.util.NbBundle.getMessage(ZipExplorerSearchPanel.class, "ZipExplorerSearchPanel.searchButton.text")); // NOI18N
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        localeButtonGroup.add(fromLocaleCheckBox);
        fromLocaleCheckBox.setSelected(true);
        fromLocaleCheckBox.setText("From Locale");

        localeButtonGroup.add(toLocaleCheckBox);
        toLocaleCheckBox.setText("To Locale");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(resultScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 393, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(toLocaleCheckBox)
                            .addComponent(fromLocaleCheckBox))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(expressionTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(expressionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchButton)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(fromLocaleCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(toLocaleCheckBox)))
                .addGap(12, 12, 12)
                .addComponent(resultScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE)
                .addGap(14, 14, 14))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        search();
    }//GEN-LAST:event_searchButtonActionPerformed

    private void expressionTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_expressionTextFieldKeyPressed
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            search();
        }
    }//GEN-LAST:event_expressionTextFieldKeyPressed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField expressionTextField;
    private javax.swing.JCheckBox fromLocaleCheckBox;
    private javax.swing.ButtonGroup localeButtonGroup;
    private javax.swing.JScrollPane resultScrollPane;
    private javax.swing.JTextArea resultTextArea;
    private javax.swing.JButton searchButton;
    private javax.swing.JCheckBox toLocaleCheckBox;
    // End of variables declaration//GEN-END:variables

    private void search() {
        List<String> search = null;
        if (fromLocaleCheckBox.isSelected()) {
            search = zipArchive.search(expressionTextField.getText(), true);
        } else {
            search = zipArchive.search(expressionTextField.getText(), false);
        }
        // Clear the Text Area
        resultTextArea.setText("");
        for (String dirName : search) {
            resultTextArea.append(dirName + "\n");
        }
    }
}
