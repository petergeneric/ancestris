/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * EditorOpenActionPanel.java
 *
 * Created on 16 juin 2011, 23:11:29
 */
package org.ancestris.trancestris.application.actions;

import java.io.File;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Locale;
import java.util.SortedSet;
import java.util.TreeSet;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.openide.util.NbPreferences;
import org.openide.windows.WindowManager;

/**
 *
 * @author dominique
 */
public class OpenZipBundlePanel extends javax.swing.JPanel {

    File zipFile = null;
    static HashMap<String, Locale> localeList = new HashMap<String, Locale>();
    static Locale[] locales = null;
    Locale fromLocale = Locale.UK;
    Locale toLocale = Locale.getDefault();

    {
        for (Locale locale : Locale.getAvailableLocales()) {
            if (localeList.get(locale.getDisplayLanguage()) == null) {
                localeList.put(locale.getDisplayLanguage(), locale);
            }
        }
        Locale breton = new Locale("br");
        localeList.put(breton.getDisplayLanguage(), breton);

        locales = new Locale[localeList.size()];
        SortedSet<String> sortedset = new TreeSet<String>(localeList.keySet());

        Iterator<String> iter = sortedset.iterator();

        int index = 0;
        while (iter.hasNext()) {
            locales[index++] = localeList.get(iter.next());
        }
    }

    private class LocaleComboBoxModel extends DefaultComboBoxModel {

        String selectedLocale = Locale.getDefault().getDisplayLanguage();

        public LocaleComboBoxModel() {
            super();
        }

        @Override
        public int getSize() {
            return localeList.size();
        }

        @Override
        public Object getElementAt(int i) {
            return locales[i].getDisplayLanguage();
        }

        @Override
        public void setSelectedItem(Object o) {
            selectedLocale = (String) o;
        }

        @Override
        public Object getSelectedItem() {
            return selectedLocale;
        }
    }

    /** Creates new form EditorOpenActionPanel */
    public OpenZipBundlePanel() {
        fromLocale = getLocaleFromString(NbPreferences.forModule(OpenZipBundlePanel.class).get("fromLocale", Locale.ENGLISH.toString()));
        toLocale = getLocaleFromString(NbPreferences.forModule(OpenZipBundlePanel.class).get("toLocale", Locale.getDefault().toString()));
        String dirName = NbPreferences.forModule(OpenZipBundlePanel.class).get("Dossier", System.getProperty("user.dir"));
        String fileName = NbPreferences.forModule(OpenZipBundlePanel.class).get("Fichier", "Ancestris_Bundles.zip");
        if (dirName.length() > 0) {
            zipFile = new File(dirName + System.getProperty("file.separator") + fileName);
        }
        initComponents();
        fromLocaleComboBox.setSelectedItem(fromLocale.getDisplayLanguage());
        toLoacaleComboBox.setSelectedItem(toLocale.getDisplayLanguage());
        if (zipFile != null) {
            bundleFileNameTextField.setText(zipFile.toString());
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        translationLabel = new javax.swing.JLabel();
        fromLocaleComboBox = new javax.swing.JComboBox(new LocaleComboBoxModel());
        openFileChooserButton = new javax.swing.JButton();
        bundleFileNameTextField = new javax.swing.JTextField();
        toLabel = new javax.swing.JLabel();
        toLoacaleComboBox = new javax.swing.JComboBox(new LocaleComboBoxModel());

        setMaximumSize(new java.awt.Dimension(32789, 24));
        setOpaque(false);

        translationLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/ancestris/trancestris/application/actions/translate.gif"))); // NOI18N
        translationLabel.setText(org.openide.util.NbBundle.getMessage(OpenZipBundlePanel.class, "OpenZipBundlePanel.translationLabel.text")); // NOI18N

        fromLocaleComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fromLocaleComboBoxActionPerformed(evt);
            }
        });

        openFileChooserButton.setText(org.openide.util.NbBundle.getMessage(OpenZipBundlePanel.class, "OpenZipBundlePanel.openFileChooserButton.text")); // NOI18N
        openFileChooserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileChooserButtonActionPerformed(evt);
            }
        });

        toLabel.setText(org.openide.util.NbBundle.getMessage(OpenZipBundlePanel.class, "OpenZipBundlePanel.toLabel.text")); // NOI18N

        toLoacaleComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toLoacaleComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(translationLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fromLocaleComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(toLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(toLoacaleComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(bundleFileNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(openFileChooserButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(translationLabel)
                    .addComponent(toLabel)
                    .addComponent(fromLocaleComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toLoacaleComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bundleFileNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(openFileChooserButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void openFileChooserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileChooserButtonActionPerformed
        final FileNameExtensionFilter filter = new FileNameExtensionFilter("Zip files", "zip");
        String dirName = NbPreferences.forModule(OpenZipBundlePanel.class).get("Dossier", "");
        String fileName = NbPreferences.forModule(OpenZipBundlePanel.class).get("Fichier", "");

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(filter);
        if (dirName.length() > 0) {
            // Set the current directory
            fileChooser.setCurrentDirectory(new File(dirName));
        }

        if (fileName.length() > 0) {
            fileChooser.setSelectedFile(new File(fileName));
        }

        if (fileChooser.showOpenDialog(WindowManager.getDefault().getMainWindow()) == JFileChooser.APPROVE_OPTION) {
            zipFile = fileChooser.getSelectedFile();
            bundleFileNameTextField.setText(zipFile.getPath());
        }
    }//GEN-LAST:event_openFileChooserButtonActionPerformed

    private void fromLocaleComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fromLocaleComboBoxActionPerformed
        fromLocale = localeList.get((String) fromLocaleComboBox.getSelectedItem());
    }//GEN-LAST:event_fromLocaleComboBoxActionPerformed

    private void toLoacaleComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toLoacaleComboBoxActionPerformed
        toLocale = localeList.get((String) toLoacaleComboBox.getSelectedItem());
    }//GEN-LAST:event_toLoacaleComboBoxActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField bundleFileNameTextField;
    private javax.swing.JComboBox fromLocaleComboBox;
    private javax.swing.JButton openFileChooserButton;
    private javax.swing.JLabel toLabel;
    private javax.swing.JComboBox toLoacaleComboBox;
    private javax.swing.JLabel translationLabel;
    // End of variables declaration//GEN-END:variables

    private Locale getLocaleFromString(String str) {
        if (str == null || str.length() == 0) {
            return null;
        }
        String locale[] = (str + "__").split("_", 3);

        return new Locale(locale[0], locale[1], locale[2]);
    }
}
