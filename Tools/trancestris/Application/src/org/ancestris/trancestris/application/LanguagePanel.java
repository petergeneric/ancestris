/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.ancestris.trancestris.application;

import java.util.ArrayList;
import java.util.Locale;
import org.openide.util.NbBundle;

final class LanguagePanel extends javax.swing.JPanel {

    private final LanguageOptionsPanelController controller;
    // Values
    Locale[] locales = {
        new Locale("br"),
        new Locale("da"),
        Locale.GERMAN,
        Locale.ENGLISH,
        new Locale("es"),
        Locale.FRENCH,
        Locale.ITALIAN,
        new Locale("nl"),
        new Locale("no"),
        new Locale("pl"),
        new Locale("ru"),
        new Locale("fi"),
        new Locale("sv")
    };

    LanguagePanel(LanguageOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
        // TODO listen to changes in form fields and call controller.changed()
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<String>(initLanguages());

        jLabel1.setFont(new java.awt.Font("DejaVu Sans", 1, 13)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(LanguagePanel.class, "LanguagePanel.jLabel1.text")); // NOI18N

        jComboBox1.setToolTipText(org.openide.util.NbBundle.getMessage(LanguagePanel.class, "LanguagePanel.jComboBox1.toolTipText")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 405, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(48, 48, 48)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 72, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(22, 22, 22)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(23, Short.MAX_VALUE)))
        );

        jLabel1.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(LanguagePanel.class, "LanguagePanel.jLabel1.text")); // NOI18N
    }// </editor-fold>//GEN-END:initComponents

    void load() {
        // TODO read settings and initialize GUI
        // Example:        
        // someCheckBox.setSelected(Preferences.userNodeForPackage(LanguagePanel.class).getBoolean("someFlag", false));
        // or for org.openide.util with API spec. version >= 7.4:
        // someCheckBox.setSelected(NbPreferences.forModule(LanguagePanel.class).getBoolean("someFlag", false));
        // or:
        // someTextField.setText(SomeSystemOption.getDefault().getSomeStringProperty());
        StartupOptions stopts = new StartupOptions();
        setLanguage(stopts.getJvmLocale());
    }

    void store() {
        // TODO store modified settings
        // Example:
        // Preferences.userNodeForPackage(LanguagePanel.class).putBoolean("someFlag", someCheckBox.isSelected());
        // or for org.openide.util with API spec. version >= 7.4:
        // NbPreferences.forModule(LanguagePanel.class).putBoolean("someFlag", someCheckBox.isSelected());
        // or:
        // SomeSystemOption.getDefault().setSomeStringProperty(someTextField.getText());
        StartupOptions stopts = new StartupOptions();
        boolean needRestart = false;

        Locale oldLocale = stopts.getJvmLocale();

        Locale newLocale = getLanguage();
        if (oldLocale == null)
            needRestart = (newLocale != null);
        else
            needRestart = ! oldLocale.equals(newLocale);
        stopts.setJvmLocale(newLocale);
        stopts.applyChanges();
        if (needRestart)
            // the markForRestart is not applicable here as the restart process loop done in nbexec file
            // doesn't reread app.conf file wich is read once before the loop.
            // W/O modifying nbexec and windows dll, the startup  settings are not re-read
            // So, as in a basic usage of ancestris the language preference will not be set by the user,
            // we tell the user to stop the start again ancestris. This way all the new startup settings are correctly read
            Lifecycle.askForStopAndStart(null,getLanguage());
    }

    boolean valid() {
        // TODO check whether form is consistent and complete
        return true;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
    private String[] initLanguages() {
        ArrayList<String> langDescr = new ArrayList<String>(locales.length);
        langDescr.add(NbBundle.getMessage(LanguagePanel.class, "options.lang.system"));
        for (Locale locale:locales){
            langDescr.add(locale.getDisplayName(locale));
        }
        return langDescr.toArray(new String[0]);
    }

    /**
     * Find the index in languagesfor the language string lang. If not found returns -1
     * @param lang
     * @return
     */
    private int findLanguageIndex(Locale locale){
        if (locale == null)
            return -1;
        for (int i=0;i<locales.length;i++){
            if (locale.equals(locales[i]))
                return i;
        }
        // tries only language
        locale = new Locale(locale.getLanguage(),locale.getCountry());
        for (int i=0;i<locales.length;i++){
            if (locale.getLanguage().equals(locales[i].getLanguage()))
                return i;
        }
        return -1;
    }
    
    /**
     * Set the language selector accorgingly to the locale setting passed in parameter
     * @param str
     */
    void setLanguage(Locale locale) {
        int i = findLanguageIndex(locale);
        // Index in combo is one more this value
        i += 1;
        jComboBox1.setSelectedIndex(i);
    }

    // null means default locale from system
    Locale getLanguage() {
        int i = jComboBox1.getSelectedIndex()-1;
        if (i<0 || i>=locales.length)
            return null;
        return locales[i];
    }
}
