/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * EditorSearchPanel.java
 *
 * Created on 19 mai 2012, 14:31:10
 */
package org.ancestris.trancestris.editors.actions;

import java.awt.event.KeyEvent;
import org.ancestris.trancestris.editors.resourceeditor.ResourceEditorTopComponent;
import org.openide.windows.WindowManager;

/**
 *
 * @author dominique
 */
public class EditorSearchPanel extends javax.swing.JPanel {

    private ResourceEditorTopComponent resourceEditorTopComponent = null;
    private static EditorSearchPanel instance = null;

    /**
     * Creates new form EditorSearchPanel
     */
    public EditorSearchPanel(ResourceEditorTopComponent resourceEditorTopComponent) {
        initComponents();
        this.resourceEditorTopComponent = resourceEditorTopComponent;
        instance = this;
    }

    public static EditorSearchPanel getInstance() {
        if (instance == null) {
            instance = new EditorSearchPanel((ResourceEditorTopComponent) WindowManager.getDefault().findTopComponent("ResourceEditorTopComponent"));
        }
        return instance;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        localebuttonGroup = new javax.swing.ButtonGroup();
        expressionTextField = new javax.swing.JTextField();
        caseSensitiveCheckBox = new javax.swing.JCheckBox();
        searchPreviousButton = new javax.swing.JButton();
        searchNextButton = new javax.swing.JButton();
        fromLocaleToggleButton = new javax.swing.JToggleButton();
        toLocaleToggleButton = new javax.swing.JToggleButton();
        jLabel1 = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), null));

        expressionTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                expressionTextFieldKeyPressed(evt);
            }
        });

        caseSensitiveCheckBox.setSelected(true);
        caseSensitiveCheckBox.setText(org.openide.util.NbBundle.getMessage(EditorSearchPanel.class, "EditorSearchPanel.caseSensitiveCheckBox.text")); // NOI18N

        searchPreviousButton.setText(org.openide.util.NbBundle.getMessage(EditorSearchPanel.class, "EditorSearchPanel.searchPreviousButton.text")); // NOI18N
        searchPreviousButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchPreviousButtonActionPerformed(evt);
            }
        });

        searchNextButton.setText(org.openide.util.NbBundle.getMessage(EditorSearchPanel.class, "EditorSearchPanel.searchNextButton.text")); // NOI18N
        searchNextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchNextButtonActionPerformed(evt);
            }
        });

        localebuttonGroup.add(fromLocaleToggleButton);
        fromLocaleToggleButton.setSelected(true);
        fromLocaleToggleButton.setText(org.openide.util.NbBundle.getMessage(EditorSearchPanel.class, "EditorSearchPanel.fromLocaleToggleButton.text")); // NOI18N

        localebuttonGroup.add(toLocaleToggleButton);
        toLocaleToggleButton.setText(org.openide.util.NbBundle.getMessage(EditorSearchPanel.class, "EditorSearchPanel.toLocaleToggleButton.text")); // NOI18N

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/ancestris/trancestris/editors/actions/Search24x24.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(0, 0, 0)
                .addComponent(caseSensitiveCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fromLocaleToggleButton, javax.swing.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE)
                .addGap(6, 6, 6)
                .addComponent(toLocaleToggleButton, javax.swing.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(expressionTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchPreviousButton, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchNextButton, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(caseSensitiveCheckBox)
                .addComponent(fromLocaleToggleButton)
                .addComponent(expressionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(toLocaleToggleButton)
                .addComponent(searchPreviousButton)
                .addComponent(searchNextButton)
                .addComponent(jLabel1))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void expressionTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_expressionTextFieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (resourceEditorTopComponent != null) {
                resourceEditorTopComponent.search(true, expressionTextField.getText(), fromLocaleToggleButton.isSelected(), caseSensitiveCheckBox.isSelected());
            }
        }
}//GEN-LAST:event_expressionTextFieldKeyPressed

    private void searchPreviousButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchPreviousButtonActionPerformed
        if (resourceEditorTopComponent != null) {
            resourceEditorTopComponent.search(false, expressionTextField.getText(), fromLocaleToggleButton.isSelected(), caseSensitiveCheckBox.isSelected());
        }
}//GEN-LAST:event_searchPreviousButtonActionPerformed

    private void searchNextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchNextButtonActionPerformed
        if (resourceEditorTopComponent != null) {
            resourceEditorTopComponent.search(true, expressionTextField.getText(), fromLocaleToggleButton.isSelected(), caseSensitiveCheckBox.isSelected());
        }
}//GEN-LAST:event_searchNextButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox caseSensitiveCheckBox;
    private javax.swing.JTextField expressionTextField;
    private javax.swing.JToggleButton fromLocaleToggleButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.ButtonGroup localebuttonGroup;
    private javax.swing.JButton searchNextButton;
    private javax.swing.JButton searchPreviousButton;
    private javax.swing.JToggleButton toLocaleToggleButton;
    // End of variables declaration//GEN-END:variables

    /**
     * @param expressionTextField the expressionTextField to set
     */
    public void setExpressionTextField(String expression) {
        expressionTextField.setText(expression);
    }

    public String getExpressionTextField() {
        return expressionTextField.getText();
    }

    /**
     * @param caseSensitiveCheckBox the caseSensitiveCheckBox to set
     */
    public void setCaseSensitiveCheckBoxSelected(boolean selected) {
        caseSensitiveCheckBox.setSelected(selected);
    }

    public boolean isCaseSensitiveCheckBoxSelected() {
        return caseSensitiveCheckBox.isSelected();
    }

    /**
     * @param fromLocaleToggleButton the fromLocaleToggleButton to set
     */
    public void setFromLocaleToggleButtonSelected(boolean selected) {
        fromLocaleToggleButton.setSelected(selected);
    }

    /**
     * @param fromLocaleToggleButton the fromLocaleToggleButton to set
     */
    public boolean isFromLocaleToggleButtonSelected() {
        return fromLocaleToggleButton.isSelected();
    }

    /**
     * @param toLocaleToggleButton the toLocaleToggleButton to set
     */
    public void setToLocaleToggleButtonSelected(boolean selected) {
        toLocaleToggleButton.setSelected(selected);
    }

    /**
     * @param toLocaleToggleButton the toLocaleToggleButton to set
     */
    public boolean isToLocaleToggleButtonSelected() {
        return toLocaleToggleButton.isSelected();
    }

    /**
     * @param fromLocaleToggleButton the fromLocaleToggleButton to set
     */
    public void setFromLocaleToggleButtonText(String text) {
        fromLocaleToggleButton.setText(text);
    }

    /**
     * @param toLocaleToggleButton the toLocaleToggleButton to set
     */
    public void setToLocaleToggleButtonText(String text) {
        toLocaleToggleButton.setText(text);
    }
}
