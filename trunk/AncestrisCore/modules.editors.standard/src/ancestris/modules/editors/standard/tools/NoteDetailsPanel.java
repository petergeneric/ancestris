/*
 * Ancestris - http://www.ancestris.org
 * 
 * Copyright 2016 Ancestris
 * 
 * Author: Frédéric Lapeyre (frederic@ancestris.org).
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 */
package ancestris.modules.editors.standard.tools;

import ancestris.swing.UndoTextPane;
import genj.util.Registry;
import java.awt.Dimension;
import java.awt.Toolkit;
import javax.swing.text.BadLocationException;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import org.openide.windows.WindowManager;

/**
 *
 * 
 * 
 * @author frederic
 */
public class NoteDetailsPanel extends javax.swing.JPanel {

    private Registry registry = null;
    private StyledDocument doc;
    private Style style;
    private int fontSize = 12;
    
    /**
     * Creates new form NoteDetailsPanel
     */
    public NoteDetailsPanel() {
        registry = Registry.get(getClass());
        initComponents();
        
        initSize();
        doc = (StyledDocument) noteText.getDocument();
        style = doc.addStyle("StyleName", null);
    }

    private void redisplayText() {
        String selText = noteText.getSelectedText();
        int start = noteText.getSelectionStart();
        int end = noteText.getSelectionEnd();
        String tmpText = noteText.getText();
        StyleConstants.setFontSize(style, fontSize);
        try {
            doc.remove(0, tmpText.length());
            doc.insertString(0, tmpText, style);
        } catch (BadLocationException ex) {
            //Exceptions.printStackTrace(ex);
        }
        noteText.setSelectionStart(start);
        noteText.setSelectionEnd(end);
        noteText.scrollToReference(selText != null ? selText : tmpText.substring(start, start));
        WindowManager.getDefault().invokeWhenUIReady(new Runnable() {
            @Override
            public void run() {
                noteText.requestFocusInWindow();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        growFont = new javax.swing.JButton();
        shrinkFont = new javax.swing.JButton();
        textPanel = new javax.swing.JPanel();
        scrollPane = new javax.swing.JScrollPane();
        noteText = new UndoTextPane();

        setPreferredSize(new java.awt.Dimension(500, 400));

        growFont.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/standard/images/growfont.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(growFont, org.openide.util.NbBundle.getMessage(NoteDetailsPanel.class, "NoteDetailsPanel.growFont.text")); // NOI18N
        growFont.setPreferredSize(new java.awt.Dimension(32, 32));
        growFont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                growFontActionPerformed(evt);
            }
        });

        shrinkFont.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/standard/images/shrinkfont.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(shrinkFont, org.openide.util.NbBundle.getMessage(NoteDetailsPanel.class, "NoteDetailsPanel.shrinkFont.text")); // NOI18N
        shrinkFont.setPreferredSize(new java.awt.Dimension(32, 32));
        shrinkFont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shrinkFontActionPerformed(evt);
            }
        });

        textPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        scrollPane.setViewportView(noteText);

        javax.swing.GroupLayout textPanelLayout = new javax.swing.GroupLayout(textPanel);
        textPanel.setLayout(textPanelLayout);
        textPanelLayout.setHorizontalGroup(
            textPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 484, Short.MAX_VALUE)
        );
        textPanelLayout.setVerticalGroup(
            textPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, textPanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 346, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(growFont, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(shrinkFont, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(growFont, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(shrinkFont, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void growFontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_growFontActionPerformed
        fontSize++;
        redisplayText();
    }//GEN-LAST:event_growFontActionPerformed

    private void shrinkFontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shrinkFontActionPerformed
        fontSize--;
        redisplayText();
    }//GEN-LAST:event_shrinkFontActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton growFont;
    private javax.swing.JTextPane noteText;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JButton shrinkFont;
    private javax.swing.JPanel textPanel;
    // End of variables declaration//GEN-END:variables

    public void setText(String text) {
        initSize();
        noteText.setText(text);
        noteText.setCaretPosition(0);
        redisplayText();
    }

    public String getText() {
        saveSize();
        return noteText.getText();
    }

    private void initSize() {
        this.setPreferredSize(new Dimension(registry.get("noteEditorWidth", this.getPreferredSize().width), registry.get("noteEditorHeight", this.getPreferredSize().height)));
    }

    private void saveSize() {
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        int w = this.getSize().width;
        if (w > dim.width*8/10) {
            w = dim.width*8/10;
        }
        int h = this.getSize().height;
        if (h > dim.height*8/10) {
            h = dim.height*8/10;
        }
        registry.put("noteEditorWidth", w);
        registry.put("noteEditorHeight", h);
    }


}
