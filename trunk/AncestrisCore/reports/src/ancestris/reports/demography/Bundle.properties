# Ancestris - http://www.ancestris.org
# 
# Copyright 2021 Ancestris
# 
# Author: Fr\u00e9d\u00e9ric Lapeyre (frederic@ancestris.org).
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#
# Message strings for the ReportDemography Report
#
# Languages supported :
#     - Danish - 2017/08/26 by Lars Helbo
#     - Dutch
#     - English (default)
#     - French
#     - German
#     - Latvian - 2017/12/14 - M\u00c4\u0081rti\u00c5\u0086\u00c5\u00a1 An\u00c5\u00a1mits
#     - Polish - 2017/01/12 by Bogumi\u00c5\u0082 Cieniek
#     - Swedish
#
# ---------------------------------------------------------------------
# ====>  IMPORTANT : This file must be saved with UTF-8 encoding schema
# ---------------------------------------------------------------------
#

# Last updated: 


#NOI18N
author   = Nils Meier, Jo Pol
#NOI18N
version  = 2.0
#NOI18N
updated  = 14-10-2008
#NOI18N
category = chart

name    = Age pyramid graph

info    = <h1><center>Age pyramid</center></h1> \
 <p>Shows demographic charts for all the individuals in a Gedcom file. \
 Each chart displays data for a different type of event. \
 </p> \
 <p> \
 <center><img src="ReportDemographySample.gif"></center> \
 </p> \
 <h2>Remarks for some of the charts</h2> \
 <ul> \
   <li><strong>Age</strong> \
   The age when individuals deceased. \
   Normally that should be an inverted pyramid (aside from a  \
   large base because of high infant mortality).</li> \
   <li><strong>Age when parent died</strong> \
   Usualy the pyramid is wider at the bottom for women because they died at birth \
   or when giving birth to a younger brother or sister.</li> \
 </ul> \
 <h2>The mathematical details</h2> \
 <p><a href="ReportDemography.java">ReportDemography.java</a> \
 is the most reliable source to find out exactly what is counted. \
 Per chart you will find something like:</p> \
 <pre>  new ...Analyzer (..., ..., translate(...)) &#123; \
  <br />    addFact (entity) &#123; \
  <br />     ... \
  <br />     addAge (individual, event); \
  <br />   } \
  <br /> }</pre><p> \
 <em>translate</em> gets the label for the tab and Y-axis from \
 <a href="ReportDemography.properties">ReportDemography.properties</a>.<br /> \
 <em>addFact</em> is executed per entity.<br /> \
 The <em>entity</em> is a family or individual.<br /> \
 <em>addAge</em> and its variants actually count something.<br /> \
 The <em>individual</em> is either a member of the family, \
 or the entity if it is an individual, or a close relative of the entity. \
 </p><p> \
 Note that when a child's age is computed, its eventual death is currently ignored.</p> \
 <h2>Add another chart</h2><p> \
 Just duplicate and adjust an analyzer that comes close to your wishes. \
 Use the appropriate utility report to compile and reload the report classes. \
 The new version will become active after restarting the whole application,  \
 or use the button to reload report classes. \
 </p><p>  \
 Note that <em>try...catch</em> skips entities or events  \
 in case required properties or dates are not available, otherwise the report would crash. \
 Sometimes one big catch is enough. To avoid unnecessary skips, \
 you might need more catches: nested and/or one after the other.    \
 </p><p>Example to get another type of date:</p> \
 <pre>  PropertyDate date = (PropertyDate)indi.getProperty(new TagPath("INDI:NATU:DATE"));</pre> \
 <p>Examine the edit view in GedCom mode to assemble a TagPath.  \
 </p><p>Methods to follow relations</p> \
 <pre>  Indi[] x = indi.getOlderSiblings();</pre> \
 <pre>  Indi[] x = indi.getYoungerSiblings();</pre> \
 <pre>  Indi[] x = indi.getBialogicalFather();</pre> \
 <pre>  Indi[] x = indi.getBialogicalMother();</pre> \
 <pre>  Indi[] x = indi.getSiblings(true); // include me or not</pre> \
 <pre>  Indi[] x = fam.getChildren();</pre> \
 <pre>  Indi[] x = fam.getChildren(true); // sorted or not</pre> \
 <pre>  Indi[] x = fam.getPartners();</pre> \
 <pre>  Indi   x = fam.getHusband();</pre> \
 <pre>  Indi   x = fam.getWife();</pre> \
 <pre>  Indi   x = fam.getOtherSpouse(indi); \
 <pre>  Fam[]  x = indi.getFamiliesWhereChild();</pre>  \
 <pre>  Fam[]  x = indi.getFamiliesWhereSpouse();</pre> \
 <pre>  Fam    x = indi.getFamilyWhereBiologicalChild();</pre> 


title    = Demographic Pyramid for {0}
ageGroupSize    = Size of Age Groups :
men         = Men
women       = Women
fathers     = Fathers
mothers     = Mothers
ageAtChildsBirth     = age when a child was born
ageAtFirstMariage    = age when married for the first time
ageAtParentsDeath    = age when a parent died
ageOfYoungestChildLeftBehind    = age of youngest child when a parent died
ageAtDivorce    = age at divorce
ageOfOldestWhenYoungestWasBorn    = age of the oldest when the youngest was born
ageOfYoungestOrphan    = age of youngest when second parent died
yearsSinceDeathOfSpouse    = years that a spouse is outlived
