package ancestris.modules.editors.genealogyeditor.panels;

import ancestris.modules.editors.genealogyeditor.AriesTopComponent;
import ancestris.modules.editors.genealogyeditor.editors.FamilyEditor;
import ancestris.modules.editors.genealogyeditor.models.FamiliesTableModel;
import ancestris.modules.editors.genealogyeditor.utilities.AriesFilterPanel;
import ancestris.util.swing.DialogManager;
import genj.gedcom.*;
import genj.util.Registry;
import java.util.ArrayList;
import java.util.List;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.RowFilter;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import org.openide.DialogDescriptor;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle;

/**
 *
 * @author dominique
 */
public class FamiliesTablePanel extends javax.swing.JPanel implements AriesFilterPanel {

    public static int LIST_FAM = 0;
    public static int EDIT_FAMC = 1; 
    public static int EDIT_FAMS = 2; 
    private FamiliesTableModel mFamiliesTableModel;
    private Property mRoot;
    private int mFamilyEditingType;
    private Fam mCreateFamily = null;
    private final TableRowSorter<TableModel> familyTableSorter;
    private Registry registry = null;
    

    /**
     * Creates new form FamiliesTablePanel
     */
    public FamiliesTablePanel() {
        this(LIST_FAM);
    }

    public FamiliesTablePanel(int familyEditingType) {
        mFamilyEditingType = familyEditingType;
        if (mFamilyEditingType == EDIT_FAMC) {
            mFamiliesTableModel = new FamiliesTableModel(FamiliesTableModel.FAMILY_CHILD);
        } else if (mFamilyEditingType == EDIT_FAMS) {
            mFamiliesTableModel = new FamiliesTableModel(FamiliesTableModel.FAMILY_SPOUSE);
        } else if (mFamilyEditingType == LIST_FAM) {
            mFamiliesTableModel = new FamiliesTableModel(FamiliesTableModel.FAMILY_LIST);
        }
        initComponents();
        familyNamesTable.setID(FamiliesTablePanel.class.getName());
        familyTableSorter = new TableRowSorter<>(familyNamesTable.getModel());
        familyNamesTable.setRowSorter(familyTableSorter);
        if (mFamilyEditingType == LIST_FAM) {
            familyNamesToolBar.setVisible(false);
        }
    }
    
    public void set(Property root, List<Fam> familiesList) {
        this.mRoot = root;
        mFamiliesTableModel.clear();
        mFamiliesTableModel.addAll(familiesList);
        if (mFamiliesTableModel.getRowCount() > 0) {
            editFamilyNameButton.setEnabled(true);
            deleteFamilyNameButton.setEnabled(true);
        } else {
            editFamilyNameButton.setEnabled(false);
            deleteFamilyNameButton.setEnabled(false);
        }
        loadSettings();
    }
    
    @Override
    public void saveFilterSettings() {
        StringBuilder sb = new StringBuilder();
        List<? extends RowSorter.SortKey> sortKeys = familyTableSorter.getSortKeys();
        for (int i = 0; i < sortKeys.size(); i++) {
            RowSorter.SortKey sk = sortKeys.get(i);
            sb.append(sk.getColumn());
            sb.append(',');
            sb.append(sk.getSortOrder().toString());
            sb.append(';');
        }
        registry.put("Aries.FamSortOrder_"+mFamilyEditingType, sb.toString());
    }

    private void loadSettings() {
        if (registry == null) {
            registry = mRoot.getGedcom().getRegistry();
        }
        String sortOrder = registry.get("Aries.FamSortOrder_"+mFamilyEditingType, "");
        if ("".equals(sortOrder)) {
            return;
        }
        List<RowSorter.SortKey> sorts = new ArrayList<>();
        for (String columnInfo : sortOrder.split(";")) {
            String[] column = columnInfo.split(",");
            RowSorter.SortKey sk = new RowSorter.SortKey(Integer.valueOf(column[0]), SortOrder.valueOf(column[1]));
            sorts.add(sk);
        }
        if (sorts.size() > 0) {
            familyTableSorter.setSortKeys(sorts);
        }
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        familyNamesToolBar = new javax.swing.JToolBar();
        addFamilyNameButton = new javax.swing.JButton();
        linkToFamilyButton = new javax.swing.JButton();
        editFamilyNameButton = new javax.swing.JButton();
        deleteFamilyNameButton = new javax.swing.JButton();
        filterToolBar = new ancestris.modules.editors.genealogyeditor.utilities.FilterToolBar(this);
        familyNamesScrollPane = new javax.swing.JScrollPane();
        familyNamesTable = new ancestris.modules.editors.genealogyeditor.table.EditorTable();

        jToolBar1.setBorder(null);
        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        familyNamesToolBar.setFloatable(false);
        familyNamesToolBar.setRollover(true);

        addFamilyNameButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/edit_add.png"))); // NOI18N
        addFamilyNameButton.setFocusable(false);
        addFamilyNameButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addFamilyNameButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        addFamilyNameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFamilyNameButtonActionPerformed(evt);
            }
        });
        familyNamesToolBar.add(addFamilyNameButton);

        linkToFamilyButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/link_add.png"))); // NOI18N
        linkToFamilyButton.setFocusable(false);
        linkToFamilyButton.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        linkToFamilyButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        linkToFamilyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linkToFamilyButtonActionPerformed(evt);
            }
        });
        familyNamesToolBar.add(linkToFamilyButton);

        editFamilyNameButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/edit.png"))); // NOI18N
        editFamilyNameButton.setFocusable(false);
        editFamilyNameButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        editFamilyNameButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        editFamilyNameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editFamilyNameButtonActionPerformed(evt);
            }
        });
        familyNamesToolBar.add(editFamilyNameButton);

        deleteFamilyNameButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/edit_delete.png"))); // NOI18N
        deleteFamilyNameButton.setFocusable(false);
        deleteFamilyNameButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        deleteFamilyNameButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        deleteFamilyNameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteFamilyNameButtonActionPerformed(evt);
            }
        });
        familyNamesToolBar.add(deleteFamilyNameButton);

        jToolBar1.add(familyNamesToolBar);
        jToolBar1.add(filterToolBar);

        familyNamesTable.setModel(mFamiliesTableModel);
        familyNamesTable.setSelectionBackground(new java.awt.Color(89, 142, 195));
        familyNamesTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                familyNamesTableMouseClicked(evt);
            }
        });
        familyNamesScrollPane.setViewportView(familyNamesTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(familyNamesScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 539, Short.MAX_VALUE)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(familyNamesScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addFamilyNameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFamilyNameButtonActionPerformed
        Gedcom gedcom = mRoot.getGedcom();
        int undoNb = gedcom.getUndoNb();

        try {
            gedcom.doUnitOfWork(new UnitOfWork() {

                @Override
                public void perform(Gedcom gedcom) throws GedcomException {
                    mCreateFamily = (Fam) gedcom.createEntity(Gedcom.FAM);
                }
            }); // end of doUnitOfWork

            FamilyEditor familyEditor = new FamilyEditor();
            familyEditor.setContext(new Context(mCreateFamily));
            final AriesTopComponent atc = AriesTopComponent.findEditorWindow(gedcom);
            atc.getOpenEditors().add(familyEditor);
            if (familyEditor.showPanel()) {
                gedcom.doUnitOfWork(new UnitOfWork() {

                    @Override
                    public void perform(Gedcom gedcom) throws GedcomException {
                        if (mFamilyEditingType == EDIT_FAMC) {
                            mCreateFamily.addChild((Indi) mRoot);
                        } else if (mFamilyEditingType == EDIT_FAMS) {
                            if (((Indi) mRoot).getSex() == PropertySex.MALE) {
                                mCreateFamily.setHusband((Indi) mRoot);
                            } else {
                                mCreateFamily.setWife((Indi) mRoot);
                            }
                        }
                    }
                }); // end of doUnitOfWork
                mFamiliesTableModel.add(mCreateFamily);
                editFamilyNameButton.setEnabled(true);
                deleteFamilyNameButton.setEnabled(true);

            } else {
                while (gedcom.getUndoNb() > undoNb && gedcom.canUndo()) {
                    gedcom.undoUnitOfWork(false);
                }
            }
            atc.getOpenEditors().remove(familyEditor);
        } catch (GedcomException ex) {
            Exceptions.printStackTrace(ex);
        }
    }//GEN-LAST:event_addFamilyNameButtonActionPerformed

    private void editFamilyNameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editFamilyNameButtonActionPerformed
        int rowIndex = familyNamesTable.convertRowIndexToModel(familyNamesTable.getSelectedRow());
        Gedcom gedcom = mRoot.getGedcom();

        if (rowIndex != -1) {
            Fam family = mFamiliesTableModel.getValueAt(rowIndex);
            FamilyEditor familyEditor = new FamilyEditor();
            familyEditor.setContext(new Context(family));
            final AriesTopComponent atc = AriesTopComponent.findEditorWindow(gedcom);
            atc.getOpenEditors().add(familyEditor);
            familyEditor.showPanel();
            atc.getOpenEditors().remove(familyEditor);
        }
    }//GEN-LAST:event_editFamilyNameButtonActionPerformed

    private void deleteFamilyNameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteFamilyNameButtonActionPerformed
        final int selectedRow = familyNamesTable.getSelectedRow();
        Gedcom gedcom = mRoot.getGedcom();

        if (selectedRow != -1) {
            int rowIndex = familyNamesTable.convertRowIndexToModel(selectedRow);
            Fam family = mFamiliesTableModel.getValueAt(rowIndex);

            DialogManager createYesNo = DialogManager.createYesNo(
                    NbBundle.getMessage(
                            FamiliesTablePanel.class, "FamiliesTableDialog.deleteFamilyConfirmation.title",
                            family),
                    NbBundle.getMessage(
                            FamiliesTablePanel.class, "FamiliesTableDialog.deleteFamilyConfirmation.text",
                            family,
                            mRoot));
            if (createYesNo.show() == DialogManager.YES_OPTION) {
                try {
                    gedcom.doUnitOfWork(new UnitOfWork() {

                        @Override
                        public void perform(Gedcom gedcom) throws GedcomException {
                            mRoot.delProperty(mFamiliesTableModel.remove(familyNamesTable.convertRowIndexToModel(selectedRow)));
                        }
                    }); // end of doUnitOfWork
                    if (mFamiliesTableModel.getRowCount() <= 0) {
                        editFamilyNameButton.setEnabled(false);
                        deleteFamilyNameButton.setEnabled(false);
                    }

                } catch (GedcomException ex) {
                    Exceptions.printStackTrace(ex);
                }
            }
        }
    }//GEN-LAST:event_deleteFamilyNameButtonActionPerformed

    private void linkToFamilyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linkToFamilyButtonActionPerformed
        FamiliesTablePanel familiesTablePanel = new FamiliesTablePanel(LIST_FAM);
        familiesTablePanel.set(mRoot, new ArrayList<>(mRoot.getGedcom().getFamilies()));
        DialogManager.ADialog familiesTableDialog = new DialogManager.ADialog(
                NbBundle.getMessage(FamiliesTablePanel.class, "familiesTableDialog.linkto.title"),
                familiesTablePanel);
        familiesTableDialog.setDialogId(FamiliesTablePanel.class.getName());

        if (familiesTableDialog.show() == DialogDescriptor.OK_OPTION) {
            final Fam selectedFamily = familiesTablePanel.getSelectedFamily();
            if (selectedFamily != null) {
                try {
                    mRoot.getGedcom().doUnitOfWork(new UnitOfWork() {

                        @Override
                        public void perform(Gedcom gedcom) throws GedcomException {
                            if (mFamilyEditingType == EDIT_FAMC) {
                                selectedFamily.addChild((Indi) mRoot);
                            } else if (mFamilyEditingType == EDIT_FAMS) {
                                if (((Indi) mRoot).getSex() == PropertySex.MALE) {
                                    selectedFamily.setHusband((Indi) mRoot);
                                } else {
                                    selectedFamily.setWife((Indi) mRoot);
                                }
                            }
                        }
                    }); // end of doUnitOfWork
                    mFamiliesTableModel.add(selectedFamily);
                    editFamilyNameButton.setEnabled(true);
                    deleteFamilyNameButton.setEnabled(true);
                } catch (GedcomException ex) {
                    Exceptions.printStackTrace(ex);
                }
            }
        }
        familiesTablePanel.saveFilterSettings();
    }//GEN-LAST:event_linkToFamilyButtonActionPerformed

    private void familyNamesTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_familyNamesTableMouseClicked
        if (evt.getClickCount() >= 2) {
            int rowIndex = familyNamesTable.convertRowIndexToModel(familyNamesTable.getSelectedRow());
            Gedcom gedcom = mRoot.getGedcom();

            if (rowIndex != -1) {
                Fam family = mFamiliesTableModel.getValueAt(rowIndex);
                FamilyEditor familyEditor = new FamilyEditor();
                familyEditor.setContext(new Context(family));
                final AriesTopComponent atc = AriesTopComponent.findEditorWindow(gedcom);
                atc.getOpenEditors().add(familyEditor);
                familyEditor.showPanel();
                atc.getOpenEditors().remove(familyEditor);
            }
        }
    }//GEN-LAST:event_familyNamesTableMouseClicked
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addFamilyNameButton;
    private javax.swing.JButton deleteFamilyNameButton;
    private javax.swing.JButton editFamilyNameButton;
    private javax.swing.JScrollPane familyNamesScrollPane;
    private ancestris.modules.editors.genealogyeditor.table.EditorTable familyNamesTable;
    private javax.swing.JToolBar familyNamesToolBar;
    private ancestris.modules.editors.genealogyeditor.utilities.FilterToolBar filterToolBar;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton linkToFamilyButton;
    // End of variables declaration//GEN-END:variables

    public Fam getSelectedFamily() {
        int selectedRow = familyNamesTable.getSelectedRow();
        if (selectedRow != -1) {
            int rowIndex = familyNamesTable.convertRowIndexToModel(selectedRow);
            return mFamiliesTableModel.getValueAt(rowIndex);
        } else {
            return null;
        }
    }
    
    @Override
    public ComboBoxModel<String> getComboBoxModel() {
        return new DefaultComboBoxModel<>(mFamiliesTableModel.getColumnsName());
    }

    @Override
    public void filter(int index, String searchFilter) {
        RowFilter<TableModel, Integer> rf;
        //If current expression doesn't parse, don't update.
        try {
            rf = RowFilter.regexFilter("(?i)" + searchFilter, index);
        } catch (java.util.regex.PatternSyntaxException e) {
            return;
        }

        familyTableSorter.setRowFilter(rf);
    }

}
