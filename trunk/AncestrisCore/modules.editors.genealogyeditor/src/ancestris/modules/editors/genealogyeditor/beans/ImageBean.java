package ancestris.modules.editors.genealogyeditor.beans;

import static ancestris.util.swing.FileChooserBuilder.pdfExtensions;
import static ancestris.util.swing.FileChooserBuilder.sndExtensions;
import static ancestris.util.swing.FileChooserBuilder.vidExtensions;
import genj.io.InputSource;
import genj.io.input.URLInput;
import genj.renderer.MediaRenderer;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.Arrays;
import java.util.Optional;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;

/**
 *
 * @author dominique
 */
public class ImageBean extends javax.swing.JPanel {

    private final static Logger LOG = Logger.getLogger("ancestris.app");

    public static BufferedImage IMG_INVALID_PHOTO = null;
    public static BufferedImage IMG_VIDEO = null;
    public static BufferedImage IMG_SOUND = null;
    public static BufferedImage IMG_PDF = null;
    public static BufferedImage IMG_WEB_LINK = null;

    static {
        try {
            IMG_INVALID_PHOTO = ImageIO.read(ImageBean.class.getResourceAsStream("/ancestris/modules/editors/genealogyeditor/resources/invalid_photo.png"));
            IMG_VIDEO = ImageIO.read(ImageBean.class.getResourceAsStream("/ancestris/modules/editors/genealogyeditor/resources/video.png"));
            IMG_SOUND = ImageIO.read(ImageBean.class.getResourceAsStream("/ancestris/modules/editors/genealogyeditor/resources/sound.png"));
            IMG_PDF = ImageIO.read(ImageBean.class.getResourceAsStream("/ancestris/modules/editors/genealogyeditor/resources/pdf.png"));
            IMG_WEB_LINK = ImageIO.read(ImageBean.class.getResourceAsStream("/ancestris/modules/editors/genealogyeditor/resources/weblink.png"));
        } catch (IOException ex) {
            LOG.log(Level.INFO, "Unable to initialize default images", ex);
        }
    }

    private String[] genders = new String[]{"unknown", "male", "female"};
    private boolean isDefault = true;
    private Image loadImage = null;
    private Image scaledImage = null;

    /**
     * Creates new form ImageBean
     */
    public ImageBean() {
        super();
        try {
            loadImage = ImageIO.read(ImageBean.class.getResourceAsStream("/ancestris/modules/editors/genealogyeditor/resources/profile_" + genders[0] + ".png"));
            isDefault = true;
        } catch (IOException ex) {
            LOG.log(Level.INFO, "Unable to load default image.", ex);
        }
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBorder(null);
        setToolTipText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/beans/Bundle").getString("ImageBean.toolTipText"), new Object[] {})); // NOI18N
        setMinimumSize(new java.awt.Dimension(150, 200));
        setName(org.openide.util.NbBundle.getMessage(ImageBean.class, "ImageBean.name")); // NOI18N
        setPreferredSize(new java.awt.Dimension(150, 200));
        setRequestFocusEnabled(false);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 150, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 200, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        if (loadImage != null) {
            if (getWidth() < getHeight()) {
                scaledImage = loadImage.getScaledInstance(getWidth(), -1, Image.SCALE_DEFAULT);
            } else {
                scaledImage = loadImage.getScaledInstance(-1, getHeight(), Image.SCALE_DEFAULT);
            }

            repaint();
        }
    }//GEN-LAST:event_formComponentResized

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    public boolean setImage(InputSource is, int defaultGender) {
        boolean ret = true;

        Optional<BufferedImage> obi = MediaRenderer.getImage(is);

        if (obi.isPresent()) {
            loadImage = obi.get();
            try {
                if (loadImage == null) {
                    loadImage = ImageIO.read(ImageBean.class.getResourceAsStream("/ancestris/modules/editors/genealogyeditor/resources/invalid_photo.png"));
                    isDefault = true;
                    ret = false;
                } else {
                    if (getWidth() > 0 && getWidth() < getHeight()) {
                        scaledImage = loadImage.getScaledInstance(getWidth(), -1, Image.SCALE_DEFAULT);
                    } else if (getHeight() > 0) {
                        scaledImage = loadImage.getScaledInstance(-1, getHeight(), Image.SCALE_DEFAULT);
                    }
                    isDefault = false;
                }
            } catch (IOException ex) {
                LOG.log(Level.INFO, "Unable to load default image.", ex);
                ret = false;
            }
        } else {
            if (is == null){
                loadImage = getImageFromType(null, false, defaultGender);
            } else {
                loadImage = getImageFromType(is.getExtension(), is instanceof URLInput, defaultGender);
            }
            if (getWidth() > 0 && getWidth() < getHeight()) {
                scaledImage = loadImage.getScaledInstance(getWidth(), -1, Image.SCALE_DEFAULT);
            } else if (getHeight() > 0) {
                scaledImage = loadImage.getScaledInstance(-1, getHeight(), Image.SCALE_DEFAULT);
            }
            isDefault = true;
        }

        repaint();
        return ret;
    }

    private Image getImageFromType(String extension, boolean isUrl, int defautGender) {
        Image retour;
        if (Arrays.asList(vidExtensions).contains(extension)) {
            retour = IMG_VIDEO;
        } else if (Arrays.asList(sndExtensions).contains(extension)) {
            retour = IMG_SOUND;
        } else if (Arrays.asList(pdfExtensions).contains(extension)) {
            retour = IMG_PDF;
        } else if (isUrl) {
            retour = IMG_WEB_LINK;
        } else {
            try {
                retour = ImageIO.read(ImageBean.class.getResourceAsStream("/ancestris/modules/editors/genealogyeditor/resources/profile_" + genders[defautGender] + ".png"));
            } catch (IOException e) {
                retour = IMG_INVALID_PHOTO;
            }
        }

        return retour;
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        if (scaledImage != null) {
            ((Graphics2D) g).drawImage(scaledImage, 0 + ((getWidth() - scaledImage.getWidth(this)) / 2), ((getHeight() - scaledImage.getHeight(this)) / 2), null);
        }
    }

    public boolean isDefault() {
        return isDefault;
    }
}
