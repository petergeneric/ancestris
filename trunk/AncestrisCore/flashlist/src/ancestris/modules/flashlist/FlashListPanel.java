package ancestris.modules.flashlist;

import ancestris.core.pluginservice.AncestrisPlugin;
import ancestris.view.AncestrisTopComponent;
import genj.common.SelectEntityWidget;
import genj.gedcom.Context;
import genj.gedcom.Entity;
import genj.gedcom.Fam;
import genj.gedcom.Gedcom;
import genj.gedcom.Indi;
import genj.gedcom.PropertyPlace;
import genj.util.Registry;
import java.awt.Color;
import java.util.ArrayList;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import org.openide.util.NbBundle;

final class FlashListPanel extends javax.swing.JPanel {

    private Registry registry = null;

    private static Color UNSELECTED_COLOR = new Color(0, 0, 0);
    private static Color SELECTED_COLOR = new Color(255, 0, 0);
    
    private static ImageIcon GEO_ICON = new javax.swing.ImageIcon(FlashListPanel.class.getResource("/ancestris/modules/flashlist/place.png"));
    private static ImageIcon NAME_ICON = new javax.swing.ImageIcon(FlashListPanel.class.getResource("/ancestris/modules/flashlist/name.png"));
    
    private static String GEO_LABEL = NbBundle.getMessage(FlashListPanel.class, "FlashListPanel.location1Label.text"); // NOI18N
    private static String NAME_LABEL = NbBundle.getMessage(FlashListPanel.class, "FlashListPanel.location3Label.text"); // NOI18N

    private String[] placeBits = null;
    private String[] placeBitsFull = null;
    private boolean existPlaceTag = false;
    
    private int MAXROWS = 3;
    private int selectedRow = 0;
    private SortRow[] rows = null;
    
    public String legends[] = {
        "FlashListPanel.displayLegendComboBox.legendNone",
        "FlashListPanel.displayLegendComboBox.legendTop",
        "FlashListPanel.displayLegendComboBox.legendBot"
    };
    
    private SelectEntityWidget selectEntityWidget = null;


    public FlashListPanel(Gedcom gedcom) {

        // Init registry
        registry = gedcom.getRegistry();
        
        // Init data
        placeBits = PropertyPlace.getFormat(gedcom);        // for comboBoxes 1
        existPlaceTag = placeBits.length > 0 && !placeBits[0].isEmpty();
        if (existPlaceTag) {
            placeBitsFull = new String[placeBits.length + 1];   // for comboboxes 2
            System.arraycopy(placeBits, 0, placeBitsFull, 1, placeBits.length);
            placeBitsFull[0] = "";
        } else {
            placeBitsFull = placeBits;
        }
    
        // Init components
        initComponents();
        initContextIndi(gedcom);
        location3ComboBox1.setVisible(false);
        location3ComboBox2.setVisible(false);

        
        // Load saved parameters
        load();

        // Display rows and select first one
        setRows();
        selectRow(0);
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        sortingPanel = new javax.swing.JPanel();
        sortingLabel = new javax.swing.JLabel();
        sortingHeaderLabel = new javax.swing.JLabel();
        filterHeaderLabel = new javax.swing.JLabel();
        location1Label = new javax.swing.JLabel();
        location1ComboBox1 = new javax.swing.JComboBox();
        location1ComboBox2 = new javax.swing.JComboBox();
        filterKey1TextField = new javax.swing.JTextField();
        location2Label = new javax.swing.JLabel();
        location2ComboBox1 = new javax.swing.JComboBox();
        location2ComboBox2 = new javax.swing.JComboBox();
        filterKey2TextField = new javax.swing.JTextField();
        location3Label = new javax.swing.JLabel();
        location3ComboBox1 = new javax.swing.JComboBox();
        location3ComboBox2 = new javax.swing.JComboBox();
        filterKey3TextField = new javax.swing.JTextField();
        upButton = new javax.swing.JButton();
        downButton = new javax.swing.JButton();
        repeatKeysCheckBox = new javax.swing.JCheckBox();
        formattingPanel = new javax.swing.JPanel();
        structureLabel = new javax.swing.JLabel();
        addTOCCheckBox = new javax.swing.JCheckBox();
        repeatHeaderCheckBox = new javax.swing.JCheckBox();
        displayLegendLabel = new javax.swing.JLabel();
        displayLegendComboBox = new javax.swing.JComboBox<String>(initDisplayLegendComboBox());
        boldLabel = new javax.swing.JLabel();
        yearSpanLabel = new javax.swing.JLabel();
        yearSpanFormattedTextField = new javax.swing.JFormattedTextField();
        nbEventsLabel = new javax.swing.JLabel();
        nbEventsFormattedTextField = new javax.swing.JFormattedTextField();
        minSosaLabel = new javax.swing.JLabel();
        minSosaFormattedTextField = new javax.swing.JFormattedTextField();
        zerosLabel = new javax.swing.JLabel();
        displayZerosCheckBox = new javax.swing.JCheckBox();
        selectLabel = new javax.swing.JLabel();
        selectIndiPanel = new javax.swing.JPanel();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        jScrollPane1.setPreferredSize(new java.awt.Dimension(686, 280));

        jTabbedPane1.setPreferredSize(new java.awt.Dimension(580, 260));

        sortingPanel.setPreferredSize(new java.awt.Dimension(600, 250));
        sortingPanel.setRequestFocusEnabled(false);

        sortingLabel.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(sortingLabel, org.openide.util.NbBundle.getMessage(FlashListPanel.class, "FlashListPanel.sortingLabel.text")); // NOI18N

        sortingHeaderLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        org.openide.awt.Mnemonics.setLocalizedText(sortingHeaderLabel, org.openide.util.NbBundle.getMessage(FlashListPanel.class, "FlashListPanel.sortingHeaderLabel.text")); // NOI18N

        filterHeaderLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        org.openide.awt.Mnemonics.setLocalizedText(filterHeaderLabel, org.openide.util.NbBundle.getMessage(FlashListPanel.class, "FlashListPanel.filterHeaderLabel.text")); // NOI18N

        location1Label.setForeground(new java.awt.Color(255, 0, 0));
        location1Label.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/flashlist/place.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(location1Label, org.openide.util.NbBundle.getMessage(FlashListPanel.class, "FlashListPanel.location1Label.text")); // NOI18N

        location1ComboBox1.setModel(new javax.swing.DefaultComboBoxModel(placeBits));
        location1ComboBox1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                location1ComboBox1FocusGained(evt);
            }
        });

        location1ComboBox2.setModel(new javax.swing.DefaultComboBoxModel(placeBitsFull));
        location1ComboBox2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                location1ComboBox2FocusGained(evt);
            }
        });

        filterKey1TextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                filterKey1TextFieldFocusGained(evt);
            }
        });

        location2Label.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/flashlist/place.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(location2Label, org.openide.util.NbBundle.getMessage(FlashListPanel.class, "FlashListPanel.location2Label.text")); // NOI18N

        location2ComboBox1.setModel(new javax.swing.DefaultComboBoxModel(placeBits));
        location2ComboBox1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                location2ComboBox1FocusGained(evt);
            }
        });

        location2ComboBox2.setModel(new javax.swing.DefaultComboBoxModel(placeBitsFull));
        location2ComboBox2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                location2ComboBox2FocusGained(evt);
            }
        });

        filterKey2TextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                filterKey2TextFieldFocusGained(evt);
            }
        });

        location3Label.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/flashlist/name.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(location3Label, org.openide.util.NbBundle.getMessage(FlashListPanel.class, "FlashListPanel.location3Label.text")); // NOI18N

        location3ComboBox1.setModel(new javax.swing.DefaultComboBoxModel(placeBits));
        location3ComboBox1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                location3ComboBox1FocusGained(evt);
            }
        });

        location3ComboBox2.setModel(new javax.swing.DefaultComboBoxModel(placeBitsFull));
        location3ComboBox2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                location3ComboBox2FocusGained(evt);
            }
        });

        filterKey3TextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                filterKey3TextFieldFocusGained(evt);
            }
        });

        upButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/flashlist/MoveUp.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(upButton, org.openide.util.NbBundle.getMessage(FlashListPanel.class, "FlashListPanel.upButton.text")); // NOI18N
        upButton.setToolTipText(org.openide.util.NbBundle.getMessage(FlashListPanel.class, "FlashListPanel.upButton.toolTipText")); // NOI18N
        upButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upButtonActionPerformed(evt);
            }
        });

        downButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/flashlist/MoveDown.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(downButton, org.openide.util.NbBundle.getMessage(FlashListPanel.class, "FlashListPanel.downButton.text")); // NOI18N
        downButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(repeatKeysCheckBox, org.openide.util.NbBundle.getMessage(FlashListPanel.class, "FlashListPanel.repeatKeysCheckBox.text")); // NOI18N

        javax.swing.GroupLayout sortingPanelLayout = new javax.swing.GroupLayout(sortingPanel);
        sortingPanel.setLayout(sortingPanelLayout);
        sortingPanelLayout.setHorizontalGroup(
            sortingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sortingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sortingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sortingLabel)
                    .addGroup(sortingPanelLayout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(sortingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(repeatKeysCheckBox)
                            .addGroup(sortingPanelLayout.createSequentialGroup()
                                .addGroup(sortingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(sortingPanelLayout.createSequentialGroup()
                                        .addGroup(sortingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(location2Label)
                                            .addComponent(location3Label)
                                            .addComponent(location1Label))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(sortingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(location1ComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(location2ComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(location3ComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(sortingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(location1ComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(location2ComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(location3ComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(sortingHeaderLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(sortingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(filterHeaderLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)
                                    .addComponent(filterKey1TextField)
                                    .addComponent(filterKey2TextField)
                                    .addComponent(filterKey3TextField))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(sortingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(downButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(upButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                .addGap(228, 228, 228))
        );
        sortingPanelLayout.setVerticalGroup(
            sortingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sortingPanelLayout.createSequentialGroup()
                .addGroup(sortingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(sortingPanelLayout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addComponent(upButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(downButton))
                    .addGroup(sortingPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(sortingLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(sortingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sortingHeaderLabel)
                            .addComponent(filterHeaderLabel))
                        .addGap(4, 4, 4)
                        .addGroup(sortingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(location1ComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(location1ComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(filterKey1TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(location1Label))
                        .addGap(4, 4, 4)
                        .addGroup(sortingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(location2ComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(location2ComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(filterKey2TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(location2Label))
                        .addGap(4, 4, 4)
                        .addGroup(sortingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(filterKey3TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(location3Label)
                            .addComponent(location3ComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(location3ComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addComponent(repeatKeysCheckBox)
                .addContainerGap())
        );

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(FlashListPanel.class, "FlashListPanel.sortingPanel.TabConstraints.tabTitle"), sortingPanel); // NOI18N

        formattingPanel.setPreferredSize(new java.awt.Dimension(600, 250));

        structureLabel.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(structureLabel, org.openide.util.NbBundle.getMessage(FlashListPanel.class, "FlashListPanel.structureLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(addTOCCheckBox, org.openide.util.NbBundle.getMessage(FlashListPanel.class, "FlashListPanel.addTOCCheckBox.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(repeatHeaderCheckBox, org.openide.util.NbBundle.getMessage(FlashListPanel.class, "FlashListPanel.repeatHeaderCheckBox.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(displayLegendLabel, org.openide.util.NbBundle.getMessage(FlashListPanel.class, "FlashListPanel.displayLegendLabel.text")); // NOI18N

        boldLabel.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(boldLabel, org.openide.util.NbBundle.getMessage(FlashListPanel.class, "FlashListPanel.boldLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(yearSpanLabel, org.openide.util.NbBundle.getMessage(FlashListPanel.class, "FlashListPanel.yearSpanLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(nbEventsLabel, org.openide.util.NbBundle.getMessage(FlashListPanel.class, "FlashListPanel.nbEventsLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(minSosaLabel, org.openide.util.NbBundle.getMessage(FlashListPanel.class, "FlashListPanel.minSosaLabel.text")); // NOI18N

        zerosLabel.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(zerosLabel, org.openide.util.NbBundle.getMessage(FlashListPanel.class, "FlashListPanel.zerosLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(displayZerosCheckBox, org.openide.util.NbBundle.getMessage(FlashListPanel.class, "FlashListPanel.displayZerosCheckBox.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(selectLabel, org.openide.util.NbBundle.getMessage(FlashListPanel.class, "FlashListPanel.selectLabel.text")); // NOI18N

        selectIndiPanel.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout formattingPanelLayout = new javax.swing.GroupLayout(formattingPanel);
        formattingPanel.setLayout(formattingPanelLayout);
        formattingPanelLayout.setHorizontalGroup(
            formattingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(formattingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(formattingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(structureLabel)
                    .addGroup(formattingPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(formattingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(repeatHeaderCheckBox)
                            .addComponent(addTOCCheckBox)
                            .addGroup(formattingPanelLayout.createSequentialGroup()
                                .addComponent(displayLegendLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(displayLegendComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(zerosLabel)
                    .addComponent(displayZerosCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, 323, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(formattingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(selectIndiPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(formattingPanelLayout.createSequentialGroup()
                        .addGroup(formattingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(boldLabel)
                            .addGroup(formattingPanelLayout.createSequentialGroup()
                                .addGroup(formattingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(nbEventsLabel)
                                    .addComponent(minSosaLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(yearSpanLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(formattingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(nbEventsFormattedTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(yearSpanFormattedTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(minSosaFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(selectLabel))
                        .addGap(0, 76, Short.MAX_VALUE)))
                .addGap(16, 16, 16))
        );
        formattingPanelLayout.setVerticalGroup(
            formattingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(formattingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(formattingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(boldLabel)
                    .addComponent(structureLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(formattingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(yearSpanLabel)
                    .addComponent(yearSpanFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addTOCCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(formattingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(repeatHeaderCheckBox)
                    .addComponent(nbEventsLabel)
                    .addComponent(nbEventsFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(formattingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(displayLegendLabel)
                    .addComponent(displayLegendComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minSosaLabel)
                    .addComponent(minSosaFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(formattingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(formattingPanelLayout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(zerosLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(displayZerosCheckBox)
                        .addGap(46, 69, Short.MAX_VALUE))
                    .addGroup(formattingPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectIndiPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(FlashListPanel.class, "FlashListPanel.formattingPanel.TabConstraints.tabTitle"), formattingPanel); // NOI18N

        jScrollPane1.setViewportView(jTabbedPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 721, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void upButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upButtonActionPerformed
        swapRows(selectedRow, selectedRow - 1);
        selectedRow--;
        setRows();
        selectRow(selectedRow);
    }//GEN-LAST:event_upButtonActionPerformed

    private void downButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downButtonActionPerformed
        swapRows(selectedRow, selectedRow + 1);
        selectedRow++;
        setRows();
        selectRow(selectedRow);
    }//GEN-LAST:event_downButtonActionPerformed

    private void filterKey1TextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_filterKey1TextFieldFocusGained
        selectRow(0); 
    }//GEN-LAST:event_filterKey1TextFieldFocusGained

    private void filterKey2TextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_filterKey2TextFieldFocusGained
        selectRow(1);
    }//GEN-LAST:event_filterKey2TextFieldFocusGained

    private void filterKey3TextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_filterKey3TextFieldFocusGained
        selectRow(2);
    }//GEN-LAST:event_filterKey3TextFieldFocusGained

    private void location1ComboBox1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_location1ComboBox1FocusGained
        selectRow(0); 
    }//GEN-LAST:event_location1ComboBox1FocusGained

    private void location1ComboBox2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_location1ComboBox2FocusGained
        selectRow(0); 
    }//GEN-LAST:event_location1ComboBox2FocusGained

    private void location2ComboBox1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_location2ComboBox1FocusGained
        selectRow(1);
    }//GEN-LAST:event_location2ComboBox1FocusGained

    private void location2ComboBox2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_location2ComboBox2FocusGained
        selectRow(1);
    }//GEN-LAST:event_location2ComboBox2FocusGained

    private void location3ComboBox1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_location3ComboBox1FocusGained
        selectRow(2);
    }//GEN-LAST:event_location3ComboBox1FocusGained

    private void location3ComboBox2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_location3ComboBox2FocusGained
        selectRow(2);
    }//GEN-LAST:event_location3ComboBox2FocusGained

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
    }//GEN-LAST:event_formComponentResized

    private void load() {
        // Panel 1
        repeatKeysCheckBox.setSelected(getRepeatKeys());
        initRows();
        for (int r = 0; r < MAXROWS; r++) {
            rows[r].isLocVisible = registry.get("row-isLocVisible" + r, rows[r].isLocVisible);
            rows[r].loc1 = registry.get("row-loc1" + r, rows[r].loc1);
            rows[r].loc2 = registry.get("row-loc2" + r, rows[r].loc2);
            rows[r].filter = registry.get("row-filter" + r, rows[r].filter);
        }
        
        // Panel 2
        addTOCCheckBox.setSelected(getTOC());
        displayLegendComboBox.setSelectedIndex(getDisplayLegend());
        repeatHeaderCheckBox.setSelected(getRepeatHeader());
        displayZerosCheckBox.setSelected(getDisplayZeros());
        filterKey1TextField.setText(getFilter1());
        filterKey2TextField.setText(getFilter2());
        filterKey3TextField.setText(getFilter3());
        nbEventsFormattedTextField.setValue(""+getNbEvents());
        yearSpanFormattedTextField.setValue(""+getYearSpan());
        minSosaFormattedTextField.setValue(""+getMinSosa()); 
    }

    public boolean getTOC() {
        return registry.get("addTOCCheckBox", false);
    }

    public boolean getRepeatKeys() {
        return registry.get("repeatKeysCheckBox", false);
    }

    public int getDisplayLegend() {
        return registry.get("displayLegendComboBox", 0);
    }

    public boolean getRepeatHeader() {
        return registry.get("repeatHeaderCheckBox", true);
    }

    public boolean getDisplayZeros() {
        return registry.get("displayZerosCheckBox", false);
    }

    public int getNbEvents() {
        return registry.get("nbEventsFormattedTextField", 3);
    }

    public int getYearSpan() {
        return registry.get("yearSpanFormattedTextField", 50);
    }

    public int getMinSosa() {
        return registry.get("minSosaFormattedTextField", 1);
    }

    public String getFilter1() {
        return registry.get("filterKey1TextField", "");
    }

    public String getFilter2() {
        return registry.get("filterKey2TextField", "");
    }

    public String getFilter3() {
        return registry.get("filterKey3TextField", "");
    }

    public boolean existPlaceTag() {
        return existPlaceTag;
    }

    public Indi getRootIndi() {
        return (Indi) selectEntityWidget.getSelection();
    }

    /**
     * LOC12_SURN_LOC34 = 0;
     * LOC12_LOC34_SURN = 1;
     * SURN_LOC12_LOC34 = 2;
     * @return 
     */
    public int getRecordKey() {
        int surn = 0;
        for (int r = 0; r < MAXROWS; r++) {
            if (!rows[r].isLocVisible) {
                surn = r;
                break;
            }
        }
        if (surn == 0) {
            return 2;
        }
        if (surn == 1) {
            return 0;
        }
        if (surn == 2) {
            return 1;
        }
        return 0;
    }

    /**
     * LOC12_SURN_LOC34 = 0;
     * LOC12_LOC34_SURN = 1;
     * SURN_LOC12_LOC34 = 2;
     * @return 
     */
    public int getPosLoc(int i) {
        int ret = -1;
        int rk = getRecordKey();
        switch (i) {
            case 1:
                if (rk != 2) {
                    ret = location1ComboBox1.getSelectedIndex();
                } else {
                    ret = location2ComboBox1.getSelectedIndex();
                }
                break;
            case 2:
                if (rk != 2) {
                    ret = location1ComboBox2.getSelectedIndex() - 1;
                } else {
                    ret = location2ComboBox2.getSelectedIndex() - 1;
                }
                break;
            case 3:
                if (rk != 1) {
                    ret = location3ComboBox1.getSelectedIndex();
                } else {
                    ret = location2ComboBox1.getSelectedIndex();
                }
                break;
            case 4:
                if (rk != 1) {
                    ret = location3ComboBox2.getSelectedIndex() - 1;
                } else {
                    ret = location2ComboBox2.getSelectedIndex() - 1;
                }
                break;
        }
        return ret;
    }

    
    
    public void store() {
        // Panel 1
        registry.put("repeatKeysCheckBox", repeatKeysCheckBox.isSelected());
        getRows();
        for (int r = 0; r < MAXROWS; r++) {
            registry.put("row-isLocVisible"+r, rows[r].isLocVisible);
            registry.put("row-loc1"+r, rows[r].loc1);
            registry.put("row-loc2"+r, rows[r].loc2);
            registry.put("row-filter"+r, rows[r].filter);
        }
        
        // Panel 2
        registry.put("displayLegendComboBox", displayLegendComboBox.getSelectedIndex());
        registry.put("filterKey1TextField", filterKey1TextField.getText());
        registry.put("filterKey2TextField", filterKey2TextField.getText());
        registry.put("filterKey3TextField", filterKey3TextField.getText());
        registry.put("yearSpanFormattedTextField", yearSpanFormattedTextField.getText());
        registry.put("nbEventsFormattedTextField", nbEventsFormattedTextField.getText());
        registry.put("minSosaFormattedTextField", minSosaFormattedTextField.getText());
        registry.put("repeatHeaderCheckBox", repeatHeaderCheckBox.isSelected());
        registry.put("displayZerosCheckBox", displayZerosCheckBox.isSelected());
        registry.put("addTOCCheckBox", addTOCCheckBox.isSelected());
    }

    
    private String[] initDisplayLegendComboBox() {
        ArrayList<String> comboBoxText = new ArrayList<String>(legends.length);
        for (String value : legends) {
            comboBoxText.add(NbBundle.getMessage(ReportFlashList.class, value));
        }
        return comboBoxText.toArray(new String[0]);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox addTOCCheckBox;
    private javax.swing.JLabel boldLabel;
    private javax.swing.JComboBox<String> displayLegendComboBox;
    private javax.swing.JLabel displayLegendLabel;
    private javax.swing.JCheckBox displayZerosCheckBox;
    private javax.swing.JButton downButton;
    private javax.swing.JLabel filterHeaderLabel;
    private javax.swing.JTextField filterKey1TextField;
    private javax.swing.JTextField filterKey2TextField;
    private javax.swing.JTextField filterKey3TextField;
    private javax.swing.JPanel formattingPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JComboBox location1ComboBox1;
    private javax.swing.JComboBox location1ComboBox2;
    private javax.swing.JLabel location1Label;
    private javax.swing.JComboBox location2ComboBox1;
    private javax.swing.JComboBox location2ComboBox2;
    private javax.swing.JLabel location2Label;
    private javax.swing.JComboBox location3ComboBox1;
    private javax.swing.JComboBox location3ComboBox2;
    private javax.swing.JLabel location3Label;
    private javax.swing.JFormattedTextField minSosaFormattedTextField;
    private javax.swing.JLabel minSosaLabel;
    private javax.swing.JFormattedTextField nbEventsFormattedTextField;
    private javax.swing.JLabel nbEventsLabel;
    private javax.swing.JCheckBox repeatHeaderCheckBox;
    private javax.swing.JCheckBox repeatKeysCheckBox;
    private javax.swing.JPanel selectIndiPanel;
    private javax.swing.JLabel selectLabel;
    private javax.swing.JLabel sortingHeaderLabel;
    private javax.swing.JLabel sortingLabel;
    private javax.swing.JPanel sortingPanel;
    private javax.swing.JLabel structureLabel;
    private javax.swing.JButton upButton;
    private javax.swing.JFormattedTextField yearSpanFormattedTextField;
    private javax.swing.JLabel yearSpanLabel;
    private javax.swing.JLabel zerosLabel;
    // End of variables declaration//GEN-END:variables

    
    
    
    private void initRows() {
        selectedRow = 0;
        rows = new SortRow[MAXROWS];
        rows[0] = new SortRow();
        rows[0].isLocVisible = location1ComboBox1.isVisible();
        
        rows[1] = new SortRow();
        rows[1].isLocVisible = location2ComboBox1.isVisible();

        rows[2] = new SortRow();
        rows[2].isLocVisible = location3ComboBox1.isVisible();

        getRows();
    }

    private void selectRow(int i) {
        selectedRow = i;
        location1Label.setForeground(UNSELECTED_COLOR);
        location2Label.setForeground(UNSELECTED_COLOR);
        location3Label.setForeground(UNSELECTED_COLOR);
        if (i == 0) {
            location1Label.setForeground(SELECTED_COLOR);
            upButton.setEnabled(false);
            downButton.setEnabled(true);
        } else if (i == 1) {
            location2Label.setForeground(SELECTED_COLOR);
            upButton.setEnabled(true);
            downButton.setEnabled(true);
        } else  {
            location3Label.setForeground(SELECTED_COLOR);
            upButton.setEnabled(true);
            downButton.setEnabled(false);
        } 
    }

    private void swapRows(int fromRow, int toRow) {
        getRows();
        SortRow tmpRow = new SortRow();
        tmpRow.set(rows[toRow]);
        rows[toRow].set(rows[fromRow]);
        rows[fromRow].set(tmpRow);
    }

    private void setRows() {
        location1Label.setIcon(getIcon(rows[0].isLocVisible));
        location1Label.setText(getLabel(rows[0].isLocVisible));
        location1ComboBox1.setVisible(rows[0].isLocVisible && existPlaceTag);
        location1ComboBox1.setSelectedItem(rows[0].loc1);
        location1ComboBox2.setVisible(rows[0].isLocVisible && existPlaceTag);
        location1ComboBox2.setSelectedItem(rows[0].loc2);
        filterKey1TextField.setText(rows[0].filter);

        location2Label.setIcon(getIcon(rows[1].isLocVisible));
        location2Label.setText(getLabel(rows[1].isLocVisible));
        location2ComboBox1.setVisible(rows[1].isLocVisible && existPlaceTag);
        location2ComboBox1.setSelectedItem(rows[1].loc1);
        location2ComboBox2.setVisible(rows[1].isLocVisible && existPlaceTag);
        location2ComboBox2.setSelectedItem(rows[1].loc2);
        filterKey2TextField.setText(rows[1].filter);

        location3Label.setIcon(getIcon(rows[2].isLocVisible));
        location3Label.setText(getLabel(rows[2].isLocVisible));
        location3ComboBox1.setVisible(rows[2].isLocVisible && existPlaceTag);
        location3ComboBox1.setSelectedItem(rows[2].loc1);
        location3ComboBox2.setVisible(rows[2].isLocVisible && existPlaceTag);
        location3ComboBox2.setSelectedItem(rows[2].loc2);
        filterKey3TextField.setText(rows[2].filter);
    }

    private void getRows() {
        rows[0].loc1 = location1ComboBox1.getSelectedItem().toString();
        rows[0].loc2 = location1ComboBox2.getSelectedItem().toString();
        rows[0].filter = filterKey1TextField.getText();
        rows[1].loc1 = location2ComboBox1.getSelectedItem().toString();
        rows[1].loc2 = location2ComboBox2.getSelectedItem().toString();
        rows[1].filter = filterKey2TextField.getText();
        rows[2].loc1 = location3ComboBox1.getSelectedItem().toString();
        rows[2].loc2 = location3ComboBox2.getSelectedItem().toString();
        rows[2].filter = filterKey3TextField.getText();
    }

    private Icon getIcon(boolean flag) {
        return flag ? GEO_ICON : NAME_ICON;
    }

    private String getLabel(boolean flag) {
        return flag ? GEO_LABEL : NAME_LABEL;
    }

    private void initContextIndi(Gedcom gedcom) {
        selectEntityWidget = new SelectEntityWidget(gedcom, Gedcom.INDI, null);
        selectIndiPanel.add(selectEntityWidget);
        // Check context
        Indi selectedIndividual = null;
        Context context = null;
        // TODO ? : use instead : Utilities.actionsGlobalContext().lookup(Context.class);
        for (AncestrisTopComponent aTC : AncestrisPlugin.lookupAll(AncestrisTopComponent.class)) {
            if (aTC.getGedcom() == gedcom) {
                context = aTC.getContext();
                break;
            }
        }
        Entity entity = context != null ? context.getEntity() : null;
        if (entity != null) {
            if (entity instanceof Indi) {
                selectedIndividual = (Indi) entity;
            } else if (entity instanceof Fam) {
                Fam fam = (Fam) entity;
                Indi husb = fam.getHusband();
                Indi wife = fam.getWife();
                if (husb != null) {
                    selectedIndividual = husb;
                } else if (wife != null) {
                    selectedIndividual = wife;
                }
            }
        } else {
            selectedIndividual = gedcom.getIndis().iterator().next();
        }
        selectEntityWidget.setSelection(selectedIndividual);
    }

    
    
    
    private class SortRow {
        public boolean isLocVisible = true;
        public String loc1 = "";
        public String loc2 = "";
        public String filter = "";

        private void set(SortRow setRow) {
            isLocVisible = setRow.isLocVisible;
            loc1 = setRow.loc1;
            loc2 = setRow.loc2;
            filter = setRow.filter;
        }
        
    }
}
