/*
 * Ancestris - http://www.ancestris.org
 * 
 * Copyright 2016 Ancestris
 * 
 * Author: Frédéric Lapeyre (frederic@ancestris.org).
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 */
package ancestris.modules.geo;

import genj.gedcom.PropertyPlace;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author frederic
 */
public class PlaceDisplayFormatPanel extends javax.swing.JPanel {

    String displayFormat = "";
    PropertyPlace place = null;
    
    /**
     * Creates new form PlaceDisplayFormatPanel
     */
    public PlaceDisplayFormatPanel(PropertyPlace place) {
        this.place = place;
        this.displayFormat = place.getGedcom().getPlaceDisplayFormat();
        if (displayFormat == null) {
            displayFormat = place.getGedcom().getPlaceDisplayFormatStartingWithCity();
        } else if (place.format(null).equals(place.getFirstAvailableJurisdiction())) {
            displayFormat = "0";
        }
        initComponents();
        placeFormatLabel.setText(getPlaceFormatText());
        displayText.setText(displayFormat);
        updateResult();
        
        displayText.getDocument().addDocumentListener(new DocumentListener() {

            public void insertUpdate(DocumentEvent e) {
                updateResult();
            }

            public void removeUpdate(DocumentEvent e) {
                updateResult();
            }

            public void changedUpdate(DocumentEvent e) {
                updateResult();
            }

        });
    }

    private void updateResult() {
        displayFormat = displayText.getText();

        String str = place.format(displayFormat);
        str = str.replaceAll("\\(\\)", "");
        str = str.replaceAll("\\[\\]", "");
        str = str.replaceAll("\\{\\}", "");
        resultLabel.setText(str);
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        explanationLabel = new javax.swing.JLabel();
        placeFormatLabel = new javax.swing.JLabel();
        displayLabel = new javax.swing.JLabel();
        displayText = new javax.swing.JTextField();
        resultDescLabel = new javax.swing.JLabel();
        resultLabel = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(650, 200));

        org.openide.awt.Mnemonics.setLocalizedText(explanationLabel, org.openide.util.NbBundle.getMessage(PlaceDisplayFormatPanel.class, "PlaceDisplayFormatPanel.explanationLabel.text")); // NOI18N
        explanationLabel.setPreferredSize(new java.awt.Dimension(550, 30));

        org.openide.awt.Mnemonics.setLocalizedText(placeFormatLabel, org.openide.util.NbBundle.getMessage(PlaceDisplayFormatPanel.class, "PlaceDisplayFormatPanel.placeFormatLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(displayLabel, org.openide.util.NbBundle.getMessage(PlaceDisplayFormatPanel.class, "PlaceDisplayFormatPanel.displayLabel.text")); // NOI18N

        displayText.setText(org.openide.util.NbBundle.getMessage(PlaceDisplayFormatPanel.class, "PlaceDisplayFormatPanel.displayText.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(resultDescLabel, org.openide.util.NbBundle.getMessage(PlaceDisplayFormatPanel.class, "PlaceDisplayFormatPanel.resultDescLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(resultLabel, org.openide.util.NbBundle.getMessage(PlaceDisplayFormatPanel.class, "PlaceDisplayFormatPanel.resultLabel.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(explanationLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(displayLabel)
                            .addComponent(resultDescLabel))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(resultLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 525, Short.MAX_VALUE)
                            .addComponent(displayText)))
                    .addComponent(placeFormatLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(explanationLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(placeFormatLabel)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(displayLabel)
                    .addComponent(displayText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resultLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
                    .addComponent(resultDescLabel))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel displayLabel;
    private javax.swing.JTextField displayText;
    private javax.swing.JLabel explanationLabel;
    private javax.swing.JLabel placeFormatLabel;
    private javax.swing.JLabel resultDescLabel;
    private javax.swing.JLabel resultLabel;
    // End of variables declaration//GEN-END:variables

    public String getDisplayFormat() {
        return displayFormat;
    }

    private String getPlaceFormatText() {
        String[] jurisdictions = PropertyPlace.getFormat(place.getGedcom().getPlaceFormat());
        String ret = "";
        for (int i = 0 ; i < jurisdictions.length ; i++) {
            ret += i + " (" + jurisdictions[i] + ")";
            if (i < (jurisdictions.length - 1)) {
                ret += PropertyPlace.JURISDICTION_SEPARATOR + " ";
            }
        }
        return ret;
    }
    
    
}
