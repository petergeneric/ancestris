/*
 * Ancestris - http://www.ancestris.org
 * 
 * Copyright 2020 Ancestris
 * 
 * Author: Frédéric Lapeyre (frederic@ancestris.org).
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 */
package ancestris.modules.gedcom.agecalc;

import ancestris.app.App;
import ancestris.core.TextOptions;
import genj.gedcom.Context;
import genj.util.Registry;
import org.openide.util.NbBundle;

/**
 *
 * @author frederic
 */
public class AgeCalcPanel extends javax.swing.JPanel {

    private Registry registry = null;
    
    /**
     * Creates new form MarkingPanel
     */
    public AgeCalcPanel(Context context) {

        registry = context.getGedcom().getRegistry();
        
        initComponents();
        useCHRCheckBox.setText(NbBundle.getMessage(App.class, "OptionFormatPanel.jCheckBoxCHR.text"));
        
        loadPreferences();
        
    }


    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        useCHRCheckBox = new javax.swing.JCheckBox();
        overwriteCheckBox = new javax.swing.JCheckBox();
        afterDeathCheckBox = new javax.swing.JCheckBox();
        storeCheckBox = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        org.openide.awt.Mnemonics.setLocalizedText(useCHRCheckBox, org.openide.util.NbBundle.getMessage(AgeCalcPanel.class, "AgeCalcPanel.useCHRCheckBox.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(overwriteCheckBox, org.openide.util.NbBundle.getMessage(AgeCalcPanel.class, "AgeCalcPanel.overwriteCheckBox.text")); // NOI18N

        afterDeathCheckBox.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(afterDeathCheckBox, org.openide.util.NbBundle.getMessage(AgeCalcPanel.class, "AgeCalcPanel.afterDeathCheckBox.text")); // NOI18N
        afterDeathCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                afterDeathCheckBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(storeCheckBox, org.openide.util.NbBundle.getMessage(AgeCalcPanel.class, "AgeCalcPanel.storeCheckBox.text")); // NOI18N

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/gedcom/agecalc/agecalc16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(AgeCalcPanel.class, "AgeCalcPanel.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(AgeCalcPanel.class, "AgeCalcPanel.jLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(AgeCalcPanel.class, "AgeCalcPanel.jLabel3.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(AgeCalcPanel.class, "AgeCalcPanel.jLabel4.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(AgeCalcPanel.class, "AgeCalcPanel.jLabel5.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(storeCheckBox)
                    .addComponent(overwriteCheckBox)
                    .addComponent(afterDeathCheckBox)
                    .addComponent(useCHRCheckBox)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel2)
                            .addComponent(jLabel5)))
                    .addComponent(jLabel1))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addComponent(useCHRCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(overwriteCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(afterDeathCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(storeCheckBox)
                .addContainerGap(30, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void afterDeathCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_afterDeathCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_afterDeathCheckBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox afterDeathCheckBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JCheckBox overwriteCheckBox;
    private javax.swing.JCheckBox storeCheckBox;
    private javax.swing.JCheckBox useCHRCheckBox;
    // End of variables declaration//GEN-END:variables


    private void loadPreferences() {
        useCHRCheckBox.setSelected(TextOptions.getInstance().isUseChr());
        afterDeathCheckBox.setSelected(registry.get("AgeCalc.afterDeath", true));
        overwriteCheckBox.setSelected(registry.get("AgeCalc.overwrite", false));
        storeCheckBox.setSelected(registry.get("AgeCalc.store", false));

    }

    public void savePreferences() {
        TextOptions.getInstance().setUseChr(useCHRCheckBox.isSelected());
        registry.put("AgeCalc.afterDeath", afterDeathCheckBox.isSelected());
        registry.put("AgeCalc.overwrite", overwriteCheckBox.isSelected());
        registry.put("AgeCalc.store", storeCheckBox.isSelected());
    }

    public boolean isOverwrite() {
        return overwriteCheckBox.isSelected();
    }

    public boolean isAfterDeath() {
        return afterDeathCheckBox.isSelected();
    }

    public boolean isGuessed() {
        return storeCheckBox.isSelected();
    }

}
