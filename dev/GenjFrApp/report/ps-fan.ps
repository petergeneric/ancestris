%mothers
/lr 1 def /lg 0 def /lb 0 def
/tr 1 def /tg 0 def /tb 0 def
%fathers
/Lr 0 def /Lg 0 def /Lb 1 def
/Tr 0 def /Tg 0 def /Tb 1 def
% green

/fontname /Helvetica def
/encvec [
	16#90 /dotlessi   16#91 /grave        16#92 /acute      16#93 /circumflex
	16#94 /tilde      16#95 /macron       16#96 /breve      16#97 /dotaccent
	16#98 /dieresis   16#99 /.notdef      16#9a /ring       16#9b /cedilla
	16#9c /.notdef    16#9d /hungarumlaut 16#9e /ogonek     16#9f /caron
	16#a0 /space      16#a1 /exclamdown   16#a2 /cent       16#a3 /sterling
	16#a4 /currency   16#a5 /yen         16#a6 /brokenbar   16#a7 /section
	16#a8 /dieresis   16#a9 /copyright   16#aa /ordfeminine 16#ab /guillemotleft
	16#ac /logicalnot 16#ad /hyphen      16#ae /registered  16#af /macron
	16#b0 /degree     16#b1 /plusminus   16#b2 /twosuperior 16#b3 /threesuperior
	16#b4 /acute      16#b5 /mu          16#b6 /paragraph    16#b7 /periodcentered
	16#b8 /cedilla    16#b9 /onesuperior 16#ba /ordmasculine 16#bb /guillemotright
	16#bc /onequarter 16#bd /onehalf    16#be /threequarters 16#bf /questiondown
	16#c0 /Agrave      16#c1 /Aacute    16#c2 /Acircumflex 16#c3 /Atilde
	16#c4 /Adieresis   16#c5 /Aring     16#c6 /AE          16#c7 /Ccedilla
	16#c8 /Egrave      16#c9 /Eacute    16#ca /Ecircumflex 16#cb /Edieresis
	16#cc /Igrave      16#cd /Iacute    16#ce /Icircumflex 16#cf /Idieresis
	16#d0 /Eth         16#d1 /Ntilde    16#d2 /Ograve      16#d3 /Oacute
	16#d4 /Ocircumflex 16#d5 /Otilde    16#d6 /Odieresis   16#d7 /multiply
	16#d8 /Oslash      16#d9 /Ugrave    16#da /Uacute      16#db /Ucircumflex
	16#dc /Udieresis   16#dd /Yacute    16#de /Thorn       16#df /germandbls
	16#e0 /agrave      16#e1 /aacute    16#e2 /acircumflex 16#e3 /atilde
	16#e4 /adieresis   16#e5 /aring     16#e6 /ae          16#e7 /ccedilla
	16#e8 /egrave      16#e9 /eacute    16#ea /ecircumflex 16#eb /edieresis
	16#ec /igrave      16#ed /iacute    16#ee /icircumflex 16#ef /idieresis
	16#f0 /eth         16#f1 /ntilde    16#f2 /ograve      16#f3 /oacute
	16#f4 /ocircumflex 16#f5 /otilde    16#f6 /odieresis   16#f7 /divide
	16#f8 /oslash      16#f9 /ugrave    16#fa /uacute      16#fb /ucircumflex
	16#fc /udieresis   16#fd /yacute    16#fe /thorn       16#ff /ydieresis
] def

% Copyright (c) 1991-1993 Thomas P. Blumer.  All Rights Reserved.
/border true def

color {
        /setcmykcolor where { pop
                Tr Tg Tb add add 0 eq {
                        /Tk 1 def
                } {
                        /Tk 0 def
                        /Tr 1 Tr sub def /Tg 1 Tg sub def /Tb 1 Tb sub def
                } ifelse

                Lr Lg Lb add add 0 eq {
                        /Lk 1 def
                } {
                        /Lk 0 def
                        /Lr 1 Lr sub def /Lg 1 Lg sub def /Lb 1 Lb sub def
                } ifelse

                /textcolr0 {Tr Tg Tb Tk setcmykcolor} bind def % direct ancestor name
                /lincolr0 {Lr Lg Lb Lk setcmykcolor} bind def  % direct ancestor lines
        } {
                /textcolr0 {Tr Tg Tb setrgbcolor} bind def % direct ancestor name
                /lincolr0 {Lr Lg Lb setrgbcolor} bind def  % direct ancestor lines
        } ifelse
} {
        /textcolr0 {} bind def
        /lincolr0 {} bind def
} ifelse

color {
        /setcmykcolor where { pop
                tr tg tb add add 0 eq {
                        /tk 1 def
                } {
                        /tk 0 def
                        /tr 1 tr sub def /tg 1 tg sub def /tb 1 tb sub def
                } ifelse

                lr lg lb add add 0 eq {
                        /lk 1 def
                } {
                        /lk 0 def
                        /lr 1 lr sub def /lg 1 lg sub def /lb 1 lb sub def
                } ifelse

                /textcolr1 {tr tg tb tk setcmykcolor} bind def % direct ancestor name
                /lincolr1 {lr lg lb lk setcmykcolor} bind def  % direct ancestor lines
        } {
                /textcolr1 {tr tg tb setrgbcolor} bind def % direct ancestor name
                /lincolr1 {lr lg lb setrgbcolor} bind def  % direct ancestor lines
        } ifelse
} {
        /textcolr1 {} bind def
        /lincolr1 {} bind def
} ifelse
        /lincolr0 {} bind def
        /lincolr1 {} bind def
color {
/blk {0 0 0 setrgbcolor } bind def
/green { 0 1 0 setrgbcolor } bind def
} {
/blk { } bind def
/green { } bind def
} ifelse

% get printable area
clippath pathbbox newpath
/ury exch def /urx exch def
/lly exch def /llx exch def
/lly lly 5 add def
/ury ury 10 sub def

% set landscape mode, get width and height
/w ury lly sub def
/h urx llx sub def
w h lt {
        % stay in portrait mode
        llx lly translate
        /tmp h def
        /h w def
        /w tmp def
} {
        % set landscape mode
        urx lly translate 90 rotate
} ifelse

% decorative border
border {
        /bwid1 2.5 def
        /gapwid 1.5 def
        /bwid2 0.7 def
        /rect {
                /rh exch def
                /rw exch def
                moveto
                rw 0 rlineto
                0 rh rlineto
                rw neg 0 rlineto
                closepath stroke
        } def

        bwid1 setlinewidth
        lincolr0
        bwid1 2 div  dup  w bwid1 sub  h bwid1 sub  rect

        bwid2 setlinewidth
        bwid1 gapwid bwid2 2 div add add  dup
        w bwid1 2 mul sub gapwid 2 mul sub bwid2 sub
        h bwid1 2 mul sub gapwid 2 mul sub bwid2 sub rect

        % cut the border out of the imageable area
        /tmp bwid1 gapwid bwid2 gapwid add add add def
        tmp tmp translate
        /w w tmp 2 mul sub def
        /h h tmp 2 mul sub def
} if

% Reencode the font so that we can use the IBMPC set of international chars
/encdict 12 dict def
/reenc {
        encdict begin
        /newenc exch def
        /nfont exch def
        /ofont exch def
        /ofontdict ofont findfont def
        /newfont ofontdict maxlength 1 add dict def
        ofontdict {
                exch dup /FID ne {
                        dup /Encoding eq
                         {exch dup length array copy newfont 3 1 roll put}
                         {exch newfont 3 1 roll put} ifelse
                }
                {pop pop}
                ifelse
        } forall
        newfont /Fontname nfont put
        newenc aload pop
        newenc length 2 idiv
        { newfont /Encoding get 3 1 roll put}
        repeat
        nfont newfont definefont pop
        end
} def

fontname /gedfont encvec reenc
/fontname /gedfont def
% end font reencoding

% clear path
newpath

% get radius of circular chart
/r w 2 div def
/dy h r sub def
/dx r r mul dy dy mul sub sqrt def
/a dy dx atan def

% get center of circle, make it origin
/cx r def
/cy dy def
cx cy translate

% ang1 = end angle for chart
% ang2 = begin angle for chart
/ang1 a 180 add def
/ang2 a neg def
/ang ang1 ang2 sub def

% draw outline of chart
%0 0 moveto 0 0 r ang2 ang1 arc closepath stroke

% 1-icf = fraction of radius segment for inner circle
/icf .67 def

% length of one radius segment
/rl r maxlevel icf sub div def

% calculate base font size from segment length
/fntsize rl 9.0 div def
fontname findfont fntsize scalefont setfont
/space ( ) stringwidth pop def

% calc line width from segment length - .24 pts = 1 pixel
/linwid fntsize .1 mul def
linwid setlinewidth
/namey linwid 2 mul def

2 setlinecap

% name string length for 0 generation
/len0 rl def

% name string length for other generations
/len1 rl space 2 mul sub def

% show string given as argument
% select font size so that string fits in available length
/wshow0 {
        /s exch def
        /len exch def
        fontname findfont fntsize scalefont setfont
        s stringwidth pop dup len lt {
                pop
        } {
                % compute new font size for exact fit
                len exch div fntsize mul /fsize exch def
                fontname findfont fsize scalefont setfont
        } ifelse
        textcolr0
        s show
} bind def
% show string given as argument
% select font size so that string fits in available length
/wshow1 {
        /s exch def
        /len exch def
        fontname findfont fntsize scalefont setfont
        s stringwidth pop dup len lt {
                pop
        } {
                % compute new font size for exact fit
                len exch div fntsize mul /fsize exch def
                fontname findfont fsize scalefont setfont
        } ifelse
        textcolr1
        s show
} bind def
% show string given as argument
% select font size so that string fits in available length
/wshowb {
        /s exch def
        /len exch def
        fontname findfont fntsize scalefont setfont
        s stringwidth pop dup len lt {
                pop
        } {
                % compute new font size for exact fit
                len exch div fntsize mul /fsize exch def
                fontname findfont fsize scalefont setfont
        } ifelse
        blk
        s show
} bind def
% show string given as argument
% select font size so that string fits in available length
/wshowg {
        /s exch def
        /len exch def
        fontname findfont fntsize scalefont setfont
        s stringwidth pop dup len lt {
                pop
        } {
                % compute new font size for exact fit
                len exch div fntsize mul /fsize exch def
                fontname findfont fsize scalefont setfont
        } ifelse
        green
        s show
} bind def

% starting y for root children
/siby fntsize -2 mul def
/siby0 fntsize -2 mul def

% called once for each individual on chart
/j {
  /link exch def
        /leaf exch def
        /level exch def
        /death exch def
        /birth exch def
        /name exch def

/wshow { 
link 0 ne { wshowg} {
  level 0 eq { wshowb
  } { leaf  1 and 0 eq { wshow1 } { wshow0 } ifelse 
  } ifelse
} ifelse
} def
        level maxlevel lt {
            level 0 eq {
                % print name, birth date, death date
                gsave
                len0 -2 div siby0 translate
                /x 0 def
                x namey moveto
                len0 name wshow
                /siby siby fntsize 2 mul sub def

                fontname findfont fntsize scalefont setfont
                birth length 0 gt {
                        x fntsize neg moveto
                        len0 birth wshow
                        /siby siby fntsize sub def
                } if
                death length 0 gt {
                        x fntsize neg 2 mul moveto
                        len0 death wshow
                        /siby siby fntsize sub def
                } if
                grestore
            } {
                % x1 = inner radius, x2 = outer radius
                /x1 level icf sub rl mul def
                /x2 x1 rl add def

                % aw = angle of wedge for one individual in this generation
                /aw ang 2 level bitshift div def

                % a = angular position of this individual
                /a aw leaf 2 mul 1 add mul def
                /a ang1 a sub def

                % rotate coord system so this individual is on x axis
                % display name and other info
                gsave
                a 90 lt {
                        a rotate
                        lincolr0
                        x1 0 moveto x2 0 lineto stroke
                        /x x1 space add def
		  /xlink x2 def
/dy a cos a sin sub fntsize mul def
/dx a cos a sin add fntsize mul def
                } {
                        a 180 sub rotate
                        lincolr1
                        x2 neg 0 moveto x1 neg 0 lineto stroke
                        /x x2 neg space add def
		  /xlink x2 neg def
/dy a cos a sin sub fntsize mul def
/dx a cos a sin add fntsize mul def
                } ifelse

                % print name, birth date, death date
                x namey moveto
                len1 name wshow

                fontname findfont fntsize scalefont setfont
                birth length 0 gt {
                        x fntsize neg moveto
                        len1 birth wshow
                } if
                death length 0 gt {
                        x fntsize neg 2 mul moveto
                        len1 death wshow
                } if
                link  0 gt {
                blk xlink 0  moveto xlink 0  fntsize 3 div 0 360 arc stroke
[/Rect [xlink dx sub dy neg xlink dx add  dy ]
 /Page link /Subtype /Link /Border [0 0 0] /ANN pdfmark
                } if
                grestore

                % draw arc connecting this individual to his/her child
                level 0 gt {
                        leaf 1 and 0 eq {
                                % father
                                lincolr0
                                0 0 x1 a aw sub a arc stroke
                        } {
                                % mother
                                lincolr1
                                0 0 x1 a a aw add arc stroke
                        } ifelse
                } if
            } ifelse
        } if
} bind def
/i{ 0 j } def
