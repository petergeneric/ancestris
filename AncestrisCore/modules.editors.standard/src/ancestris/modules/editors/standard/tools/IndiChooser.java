/*
 * Ancestris - http://www.ancestris.org
 * 
 * Copyright 2016 Ancestris
 * 
 * Author: Frédéric Lapeyre (frederic@ancestris.org).
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 */
package ancestris.modules.editors.standard.tools;

import genj.gedcom.Gedcom;
import genj.gedcom.Indi;
import genj.gedcom.PropertyPlace;
import genj.gedcom.PropertySex;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import javax.swing.JButton;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.openide.util.NbBundle;
import org.openide.windows.WindowManager;

/**
 *
 * @author frederic
 */
public class IndiChooser extends javax.swing.JPanel implements DocumentListener {

    private List<Indi> indis = null;
    private Indi[] filteredList = null;
    
    private Indi sourceIndi = null;
    private int relation = 0;
    private JButton okButton = null;
    private String okButtonStdLabel = "";
    
    private Indi selectedIndi = null;

    /**
     * Creates new form IndiChooser
     */
    public IndiChooser(Indi sourceIndi, final String filter, int relation, JButton okButton) {
        
        // Build full list once for all
        indis = new ArrayList(sourceIndi.getGedcom().getEntities(Gedcom.INDI));
        filteredList = new Indi[0];
        
        // Init components
        this.sourceIndi = sourceIndi;
        this.relation = relation;
        this.okButton = okButton;
        okButtonStdLabel = okButton.getText();
        initComponents();

        // Set default filter
        maleCheckBox.setSelected(relation == IndiCreator.REL_FATHER || relation == IndiCreator.REL_BROTHER || (relation == IndiCreator.REL_PARTNER && sourceIndi.getSex() == PropertySex.FEMALE) || relation == IndiCreator.REL_CHILD) ;
        femaleCheckBox.setSelected(relation == IndiCreator.REL_MOTHER || relation == IndiCreator.REL_SISTER || (relation == IndiCreator.REL_PARTNER && sourceIndi.getSex() == PropertySex.MALE) || relation == IndiCreator.REL_CHILD) ;
        okButton.setEnabled(false);

        // Set listener
        textFilter.getDocument().addDocumentListener(this);
        resetLabels();
        
        // Initiate list
        updateFilter(filter);
        if (filter.isEmpty()) {
            updateList();
        }
    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        filterLabel = new javax.swing.JLabel();
        maleCheckBox = new javax.swing.JCheckBox();
        femaleCheckBox = new javax.swing.JCheckBox();
        unknownCheckBox = new javax.swing.JCheckBox();
        likelyCheckBox = new javax.swing.JCheckBox();
        textFilter = new javax.swing.JTextField();
        ListLabel = new javax.swing.JLabel();
        listScrollPane = new javax.swing.JScrollPane();
        indisList = new javax.swing.JList(filteredList);
        selectionLabel = new javax.swing.JLabel();
        selectionBirth = new javax.swing.JLabel();
        selectionDeath = new javax.swing.JLabel();
        selectedName = new javax.swing.JLabel();
        selectedBirth = new javax.swing.JLabel();
        selectedDeath = new javax.swing.JLabel();
        controlMessage = new javax.swing.JLabel();

        org.openide.awt.Mnemonics.setLocalizedText(filterLabel, org.openide.util.NbBundle.getMessage(IndiChooser.class, "IndiChooser.filterLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(maleCheckBox, org.openide.util.NbBundle.getMessage(IndiChooser.class, "IndiChooser.maleCheckBox.text")); // NOI18N
        maleCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maleCheckBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(femaleCheckBox, org.openide.util.NbBundle.getMessage(IndiChooser.class, "IndiChooser.femaleCheckBox.text")); // NOI18N
        femaleCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                femaleCheckBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(unknownCheckBox, org.openide.util.NbBundle.getMessage(IndiChooser.class, "IndiChooser.unknownCheckBox.text")); // NOI18N
        unknownCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unknownCheckBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(likelyCheckBox, org.openide.util.NbBundle.getMessage(IndiChooser.class, "IndiChooser.likelyCheckBox.text")); // NOI18N
        likelyCheckBox.setToolTipText(org.openide.util.NbBundle.getMessage(IndiChooser.class, "IndiChooser.likelyCheckBox.toolTipText")); // NOI18N
        likelyCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                likelyCheckBoxActionPerformed(evt);
            }
        });

        textFilter.setForeground(new java.awt.Color(102, 102, 102));
        textFilter.setText(org.openide.util.NbBundle.getMessage(IndiChooser.class, "IndiChooser.textFilter.text")); // NOI18N
        textFilter.setToolTipText(org.openide.util.NbBundle.getMessage(IndiChooser.class, "IndiChooser.textFilter.tooltipText")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(ListLabel, org.openide.util.NbBundle.getMessage(IndiChooser.class, "IndiChooser.ListLabel.text")); // NOI18N

        indisList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        indisList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                indisListValueChanged(evt);
            }
        });
        listScrollPane.setViewportView(indisList);

        org.openide.awt.Mnemonics.setLocalizedText(selectionLabel, org.openide.util.NbBundle.getMessage(IndiChooser.class, "IndiChooser.selectionLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(selectionBirth, org.openide.util.NbBundle.getMessage(IndiChooser.class, "IndiChooser.selectionBirth.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(selectionDeath, org.openide.util.NbBundle.getMessage(IndiChooser.class, "IndiChooser.selectionDeath.text")); // NOI18N

        selectedName.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(selectedName, org.openide.util.NbBundle.getMessage(IndiChooser.class, "IndiChooser.selectedName.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(selectedBirth, org.openide.util.NbBundle.getMessage(IndiChooser.class, "IndiChooser.selectedBirth.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(selectedDeath, org.openide.util.NbBundle.getMessage(IndiChooser.class, "IndiChooser.selectedDeath.text")); // NOI18N

        controlMessage.setForeground(new java.awt.Color(255, 0, 0));
        org.openide.awt.Mnemonics.setLocalizedText(controlMessage, org.openide.util.NbBundle.getMessage(IndiChooser.class, "IndiChooser.controlMessage.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(controlMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(selectionLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(selectionDeath)
                                    .addComponent(selectionBirth))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(selectedBirth, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(selectedName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(selectedDeath, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(ListLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(textFilter)
                    .addComponent(listScrollPane)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(49, 49, 49)
                                .addComponent(maleCheckBox)
                                .addGap(18, 18, 18)
                                .addComponent(femaleCheckBox)
                                .addGap(18, 18, 18)
                                .addComponent(unknownCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(likelyCheckBox))
                            .addComponent(filterLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 582, Short.MAX_VALUE))
                        .addGap(1, 1, 1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(filterLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maleCheckBox)
                    .addComponent(femaleCheckBox)
                    .addComponent(unknownCheckBox)
                    .addComponent(likelyCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(ListLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(listScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 315, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectionLabel)
                    .addComponent(selectedName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectionBirth)
                    .addComponent(selectedBirth))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectionDeath)
                    .addComponent(selectedDeath))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(controlMessage)
                .addGap(8, 8, 8))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void maleCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maleCheckBoxActionPerformed
        updateList();
    }//GEN-LAST:event_maleCheckBoxActionPerformed

    private void femaleCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_femaleCheckBoxActionPerformed
        updateList();
    }//GEN-LAST:event_femaleCheckBoxActionPerformed

    private void unknownCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unknownCheckBoxActionPerformed
        updateList();
    }//GEN-LAST:event_unknownCheckBoxActionPerformed

    private void indisListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_indisListValueChanged
        selectedIndi = (Indi) indisList.getSelectedValue();
        boolean isSelected = selectedIndi != null;
        okButton.setEnabled(isSelected);
        
        if (isSelected) {
            selectedName.setText(selectedIndi.toString());
            
            // set birth info
            String str = selectedIndi.getBirthAsString();
            if (str.isEmpty()) {
                str = "- ";
            }
            str += ", ";
            PropertyPlace pp = selectedIndi.getBirthPlace();
            str += pp != null ? pp.getCity() : " - ";
            selectedBirth.setText(str);
            
            // set death info
            str = selectedIndi.getDeathAsString();
            if (str.isEmpty()) {
                str = "- ";
            }
            str += ", ";
            pp = selectedIndi.getDeathPlace();
            str += pp != null ? pp.getCity() : " - ";
            selectedDeath.setText(str);
            
            // Get control message
            int ret = Utils.likelyResult(selectedIndi, relation, sourceIndi, 0); 
            String msg = "";
            okButton.setText(okButtonStdLabel);
            if (ret > 0) {
                msg = NbBundle.getMessage(getClass(), "ERR_MSG_"+ret);
                okButton.setText(NbBundle.getMessage(getClass(), "ConfirmOK"));
            }
            controlMessage.setText(msg);
            
        } else {
            resetLabels();
        }
        
        


    }//GEN-LAST:event_indisListValueChanged

    private void likelyCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_likelyCheckBoxActionPerformed
        updateList();
    }//GEN-LAST:event_likelyCheckBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ListLabel;
    private javax.swing.JLabel controlMessage;
    private javax.swing.JCheckBox femaleCheckBox;
    private javax.swing.JLabel filterLabel;
    private javax.swing.JList indisList;
    private javax.swing.JCheckBox likelyCheckBox;
    private javax.swing.JScrollPane listScrollPane;
    private javax.swing.JCheckBox maleCheckBox;
    private javax.swing.JLabel selectedBirth;
    private javax.swing.JLabel selectedDeath;
    private javax.swing.JLabel selectedName;
    private javax.swing.JLabel selectionBirth;
    private javax.swing.JLabel selectionDeath;
    private javax.swing.JLabel selectionLabel;
    private javax.swing.JTextField textFilter;
    private javax.swing.JCheckBox unknownCheckBox;
    // End of variables declaration//GEN-END:variables

    public Indi getIndi() {
        return selectedIndi;
    }

    public void insertUpdate(DocumentEvent e) {
        updateList();
    }

    public void removeUpdate(DocumentEvent e) {
        updateList();
    }

    public void changedUpdate(DocumentEvent e) {
        updateList();
    }

    private void updateList() {
        boolean likely = true;
        List<Indi> tmpList = new ArrayList<Indi>();
        for (Indi i : indis) {
            if (i.toString().toLowerCase().contains(textFilter.getText().toLowerCase())) {
                boolean isSexOK =  i.getSex() == PropertySex.MALE && maleCheckBox.isSelected()
                                || i.getSex() == PropertySex.FEMALE && femaleCheckBox.isSelected()
                                || i.getSex() == PropertySex.UNKNOWN && unknownCheckBox.isSelected();
                if (isSexOK) {
                    if (likelyCheckBox.isSelected()) {
                        likely = Utils.isLikely(i, relation, sourceIndi, 0);
                    }
                    if (likely) {
                        tmpList.add(i);
                    }
                }
            }
        }
        Collections.sort(tmpList, new Comparator<Indi>() {
            public int compare(Indi i1, Indi i2) {
                return i1.toString().toLowerCase().compareTo(i2.toString().toLowerCase());
            }
        });
        filteredList = tmpList.toArray(new Indi[tmpList.size()]);
        indisList.setListData(filteredList);
        if (filteredList.length == 0 && !textFilter.getText().isEmpty()) {
            updateFilter("");
        }
    }

    private void resetLabels() {
        selectedName.setText("-");
        selectedBirth.setText("-, -");
        selectedDeath.setText("-, -");
        controlMessage.setText("");
        okButton.setText(okButtonStdLabel);
    }

    private void updateFilter(final String str) {
        WindowManager.getDefault().invokeWhenUIReady(new Runnable() {
            @Override
            public void run() {
                textFilter.setText(str);
                textFilter.setCaretPosition(str.length());
                textFilter.requestFocus();
            }
        });
    }
}
