/*
 * Ancestris - http://www.ancestris.org
 * 
 * Copyright 2012 Ancestris
 * 
 * Author: Dominique Baron (lemovice-at-ancestris-dot-org).
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 */

 /*
 * RemoveTagPanel.java
 *
 * Created on 14 janv. 2012, 11:37:31
 */
package ancestris.modules.gedcom.removetag;

import ancestris.view.SelectionDispatcher;
import genj.gedcom.Context;
import genj.gedcom.Entity;
import genj.gedcom.Gedcom;
import genj.gedcom.Property;
import genj.util.Registry;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.swing.DefaultListModel;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import org.openide.util.NbBundle;

/**
 *
 * @author dominique
 */
public class RemoveTagPanel extends javax.swing.JPanel {

    private Gedcom gedcom = null;
    private Registry registry = null;
    private Settings settings = new Settings();
    private JComponent[] cats = null;
    private String[] entTags = null;
    private Map<String, Integer> propertiesMap;
    
    /**
     * Creates new form RemoveTagPanel
     */
    public RemoveTagPanel(Gedcom gedcom) {

        this.gedcom = gedcom;
        registry = gedcom.getRegistry();

        initComponents();

        cats = new JComponent[]{jCheckBoxIndi, jCheckBoxFam, jCheckBoxNote, jCheckBoxObje, jCheckBoxSour, jCheckBoxRepo, jCheckBoxSubm, jCheckBoxAllCat};
        entTags = new String[]{Gedcom.INDI, Gedcom.FAM, Gedcom.NOTE, Gedcom.OBJE, Gedcom.SOUR, Gedcom.REPO, Gedcom.SUBM, ""};
        initNames();

        loadPreferences();

        if (tagsList.getModel().getSize() > 0) {
            tagsList.setSelectedIndex(0);
        }
    }

    private void initNames() {
        for (int i = 0; i < 7; i++) {
            ((JCheckBox) cats[i]).setText(Gedcom.getName(entTags[i]));
        }
        ((JCheckBox) cats[7]).setText(NbBundle.getMessage(getClass(), "RemoveTagPanel.jCheckBoxAllCat.text"));
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tagLabel = new javax.swing.JLabel();
        tagTextField = new javax.swing.JTextField();
        selectedEntityLabel = new javax.swing.JLabel();
        jCheckBoxIndi = new javax.swing.JCheckBox();
        jCheckBoxFam = new javax.swing.JCheckBox();
        jCheckBoxObje = new javax.swing.JCheckBox();
        jCheckBoxNote = new javax.swing.JCheckBox();
        jCheckBoxSour = new javax.swing.JCheckBox();
        jCheckBoxRepo = new javax.swing.JCheckBox();
        jCheckBoxSubm = new javax.swing.JCheckBox();
        jCheckBoxAllCat = new javax.swing.JCheckBox();
        jCheckBoxEmpty = new javax.swing.JCheckBox();
        jSeparator1 = new javax.swing.JSeparator();
        tagListLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tagsList = new javax.swing.JList<>(getTagsList());
        tagValuesLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tagValuesList = new javax.swing.JList<>();

        setMinimumSize(new java.awt.Dimension(481, 368));
        setName(""); // NOI18N

        tagLabel.setText(org.openide.util.NbBundle.getMessage(RemoveTagPanel.class, "RemoveTagPanel.tagLabel.text")); // NOI18N

        tagTextField.setToolTipText(org.openide.util.NbBundle.getMessage(RemoveTagPanel.class, "RemoveTagPanel.tagTextField.toolTipText")); // NOI18N

        selectedEntityLabel.setText(org.openide.util.NbBundle.getMessage(RemoveTagPanel.class, "RemoveTagPanel.selectedEntityLabel.text")); // NOI18N

        jCheckBoxIndi.setText(org.openide.util.NbBundle.getMessage(RemoveTagPanel.class, "RemoveTagPanel.jCheckBoxIndi.text")); // NOI18N
        jCheckBoxIndi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxIndiActionPerformed(evt);
            }
        });

        jCheckBoxFam.setText(org.openide.util.NbBundle.getMessage(RemoveTagPanel.class, "RemoveTagPanel.jCheckBoxFam.text")); // NOI18N
        jCheckBoxFam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxFamActionPerformed(evt);
            }
        });

        jCheckBoxObje.setText(org.openide.util.NbBundle.getMessage(RemoveTagPanel.class, "RemoveTagPanel.jCheckBoxObje.text")); // NOI18N
        jCheckBoxObje.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxObjeActionPerformed(evt);
            }
        });

        jCheckBoxNote.setText(org.openide.util.NbBundle.getMessage(RemoveTagPanel.class, "RemoveTagPanel.jCheckBoxNote.text")); // NOI18N
        jCheckBoxNote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxNoteActionPerformed(evt);
            }
        });

        jCheckBoxSour.setText(org.openide.util.NbBundle.getMessage(RemoveTagPanel.class, "RemoveTagPanel.jCheckBoxSour.text")); // NOI18N
        jCheckBoxSour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxSourActionPerformed(evt);
            }
        });

        jCheckBoxRepo.setText(org.openide.util.NbBundle.getMessage(RemoveTagPanel.class, "RemoveTagPanel.jCheckBoxRepo.text")); // NOI18N
        jCheckBoxRepo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxRepoActionPerformed(evt);
            }
        });

        jCheckBoxSubm.setText(org.openide.util.NbBundle.getMessage(RemoveTagPanel.class, "RemoveTagPanel.jCheckBoxSubm.text")); // NOI18N
        jCheckBoxSubm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxSubmActionPerformed(evt);
            }
        });

        jCheckBoxAllCat.setText(org.openide.util.NbBundle.getMessage(RemoveTagPanel.class, "RemoveTagPanel.jCheckBoxAllCat.text")); // NOI18N
        jCheckBoxAllCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxAllCatActionPerformed(evt);
            }
        });

        jCheckBoxEmpty.setText(org.openide.util.NbBundle.getMessage(RemoveTagPanel.class, "RemoveTagPanel.jCheckBoxEmpty.text")); // NOI18N
        jCheckBoxEmpty.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jCheckBoxEmpty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxEmptyActionPerformed(evt);
            }
        });

        tagListLabel.setText(org.openide.util.NbBundle.getMessage(RemoveTagPanel.class, "RemoveTagPanel.tagListLabel.text")); // NOI18N

        tagsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tagsList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tagsListMouseClicked(evt);
            }
        });
        tagsList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                tagsListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(tagsList);

        tagValuesLabel.setText(org.openide.util.NbBundle.getMessage(RemoveTagPanel.class, "RemoveTagPanel.tagValuesLabel.text")); // NOI18N

        tagValuesList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tagValuesList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tagValuesListMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tagValuesList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(tagTextField))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(tagListLabel)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(tagValuesLabel)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSeparator1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tagLabel)
                            .addComponent(jCheckBoxEmpty)
                            .addComponent(selectedEntityLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCheckBoxIndi)
                                    .addComponent(jCheckBoxFam))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCheckBoxObje)
                                    .addComponent(jCheckBoxNote))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCheckBoxSour)
                                    .addComponent(jCheckBoxRepo))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCheckBoxAllCat)
                                    .addComponent(jCheckBoxSubm))))
                        .addGap(0, 92, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tagLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tagTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(selectedEntityLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jCheckBoxIndi)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBoxFam))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jCheckBoxObje)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBoxNote))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jCheckBoxSubm)
                            .addComponent(jCheckBoxSour))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jCheckBoxRepo)
                            .addComponent(jCheckBoxAllCat))))
                .addGap(18, 18, 18)
                .addComponent(jCheckBoxEmpty)
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tagListLabel)
                    .addComponent(tagValuesLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBoxAllCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxAllCatActionPerformed
        for (int i = 0; i < 7; i++) {
            ((JCheckBox) cats[i]).setSelected(jCheckBoxAllCat.isSelected());
        }
        updateValuesList();
    }//GEN-LAST:event_jCheckBoxAllCatActionPerformed

    private void jCheckBoxIndiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxIndiActionPerformed
        checkAllCat();
    }//GEN-LAST:event_jCheckBoxIndiActionPerformed

    private void jCheckBoxFamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxFamActionPerformed
        checkAllCat();
    }//GEN-LAST:event_jCheckBoxFamActionPerformed

    private void jCheckBoxObjeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxObjeActionPerformed
        checkAllCat();
    }//GEN-LAST:event_jCheckBoxObjeActionPerformed

    private void jCheckBoxNoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxNoteActionPerformed
        checkAllCat();
    }//GEN-LAST:event_jCheckBoxNoteActionPerformed

    private void jCheckBoxSourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxSourActionPerformed
        checkAllCat();
    }//GEN-LAST:event_jCheckBoxSourActionPerformed

    private void jCheckBoxRepoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxRepoActionPerformed
        checkAllCat();
    }//GEN-LAST:event_jCheckBoxRepoActionPerformed

    private void jCheckBoxSubmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxSubmActionPerformed
        checkAllCat();
    }//GEN-LAST:event_jCheckBoxSubmActionPerformed

    private void tagsListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_tagsListValueChanged
        updateValuesList();
    }//GEN-LAST:event_tagsListValueChanged

    private void tagValuesListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tagValuesListMouseClicked
        if (evt.getClickCount() == 2) {
            selectProperty();
        }
    }//GEN-LAST:event_tagValuesListMouseClicked

    private void jCheckBoxEmptyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxEmptyActionPerformed
        updateValuesList();
    }//GEN-LAST:event_jCheckBoxEmptyActionPerformed

    private void tagsListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tagsListMouseClicked
        if (evt.getClickCount() == 2) {
            String selectedTag = tagsList.getSelectedValue();
            if (selectedTag != null && !selectedTag.isEmpty()) {
                selectedTag = selectedTag.split(" ")[0]; // take first word
                tagTextField.setText(selectedTag);
            }

        }
    }//GEN-LAST:event_tagsListMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox jCheckBoxAllCat;
    private javax.swing.JCheckBox jCheckBoxEmpty;
    private javax.swing.JCheckBox jCheckBoxFam;
    private javax.swing.JCheckBox jCheckBoxIndi;
    private javax.swing.JCheckBox jCheckBoxNote;
    private javax.swing.JCheckBox jCheckBoxObje;
    private javax.swing.JCheckBox jCheckBoxRepo;
    private javax.swing.JCheckBox jCheckBoxSour;
    private javax.swing.JCheckBox jCheckBoxSubm;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel selectedEntityLabel;
    private javax.swing.JLabel tagLabel;
    private javax.swing.JLabel tagListLabel;
    private javax.swing.JTextField tagTextField;
    private javax.swing.JLabel tagValuesLabel;
    private javax.swing.JList<Property> tagValuesList;
    private javax.swing.JList<String> tagsList;
    // End of variables declaration//GEN-END:variables

    private void checkAllCat() {
        boolean all = true;
        for (int i = 0; i < 7; i++) {
            all &= ((JCheckBox) cats[i]).isSelected();
        }
        jCheckBoxAllCat.setSelected(all);

        updateValuesList();
    }

    private void loadPreferences() {
        tagTextField.setText(registry.get("DeleteTagName", "_XXXX"));
        for (int i = 0; i < 8; i++) {
            ((JCheckBox) cats[i]).setSelected(registry.get("DeleteTagCategory" + i, i == 0));
        }
        jCheckBoxEmpty.setSelected(registry.get("DeleteTagEmptyOnly", false));
    }

    public void savePreferences() {
        settings.tag = tagTextField.getText().trim().toUpperCase();
        registry.put("DeleteTagName", settings.tag);
        for (int i = 0; i < 8; i++) {
            registry.put("DeleteTagCategory" + i, ((JCheckBox) cats[i]).isSelected());
            if (i < 7) {
                settings.entsTags[i] = ((JCheckBox) cats[i]).isSelected() ? Gedcom.ENTITIES[i] : "";  // requires check boxes to be in the same order as gedcom.Entities.
            }
        }
        settings.emptyOnly = jCheckBoxEmpty.isSelected();
        registry.put("DeleteTagEmptyOnly", settings.emptyOnly);
    }

    private String[] getTagsList() {
        List<String> ret = new ArrayList<>();
        
        // We cannot use gedcom.getPropertiesCount() which does not include XREF properties and therefore is misleading, because they can be deleted as well.
        // => so recalculate counts
        propertiesMap = new HashMap<>();

        List<Property> properties = new ArrayList<>();
        for (Entity entity : gedcom.getEntities()) {
            properties.addAll(entity.getAllProperties(null));
        }
        
        for (Property prop : properties) {
            String tag = prop.getTag();
            Integer nb = propertiesMap.get(tag);
            if (nb == null) {
                nb = 0;
            }
            nb++;
            propertiesMap.put(tag, nb);
        }
        
        propertiesMap.keySet().forEach((key) -> {
            ret.add(key + " (" + propertiesMap.get(key) + ")");
        });

        Collections.sort(ret);
        return ret.toArray(new String[ret.size()]);
    }

    private Property[] getTagValues() {
        List<Property> ret = new ArrayList<>();

        initNames();
        String selectedTag = tagsList.getSelectedValue();
        if (selectedTag != null && !selectedTag.isEmpty()) {
            selectedTag = selectedTag.split(" ")[0]; // take first word
            int total = propertiesMap.get(selectedTag);
            for (int i = 0; i < 7; i++) {
                int subTotal = 0;
                for (Entity ent : gedcom.getEntities(entTags[i])) {
                    Collection c = ent.getAllProperties(selectedTag);
                    subTotal += c.size();
                    if (((JCheckBox) cats[i]).isSelected()) {
                        ret.addAll(c);
                    }
                }
                ((JCheckBox) cats[i]).setText(Gedcom.getName(entTags[i]) + " (" + subTotal + ")");
                total -= subTotal;
            }

            // Check if tag exists in other entities
            ((JCheckBox) cats[7]).setText(NbBundle.getMessage(getClass(), "RemoveTagPanel.jCheckBoxAllCat.text") + " (" + total + ")");
            if (total > 0 && jCheckBoxAllCat.isSelected()) {
                Set<String> hSet = new HashSet<>(Arrays.asList(entTags));
                for (Entity ent : gedcom.getEntities()) {
                    if (!hSet.contains(ent.getTag())) {
                        ret.addAll((Collection) ent.getAllProperties(selectedTag));
                    }
                }
            }
        }

        // Keep only empty values if necessry
        if (jCheckBoxEmpty.isSelected()) {
            Iterator<Property> i = ret.iterator();
            while (i.hasNext()) {
                Property p = i.next();
                if (!p.getValue().isEmpty() || p.getNoOfProperties() > 0) {
                    i.remove();
                }
            }
        }

        Collections.sort(ret, new Comparator(){
            @Override
            public int compare(Object o1, Object o2) {
                return o1.toString().compareTo(o2.toString());
            }
        });
        return ret.toArray(new Property[ret.size()]);
    }

    private void updateValuesList() {
        DefaultListModel lm = new DefaultListModel();
        for (Property value : getTagValues()) {
            lm.addElement(value);
        }
        tagValuesList.setModel(lm);

        tagValuesLabel.setText(NbBundle.getMessage(getClass(), "RemoveTagPanel.tagValuesLabel.text", lm.size()));
    }

    private void selectProperty() {
        int index = tagValuesList.getSelectedIndex();
        Property selectedProperty = (Property) tagValuesList.getModel().getElementAt(index);
        if (selectedProperty != null) {
            SelectionDispatcher.fireSelection(null, new Context(selectedProperty));
        }
    }

    public Settings getSettings() {
        return settings;
    }

    public static class Settings {

        public String tag = "";
        public String[] entsTags = new String[7];
        public boolean emptyOnly = false;

    }

}
