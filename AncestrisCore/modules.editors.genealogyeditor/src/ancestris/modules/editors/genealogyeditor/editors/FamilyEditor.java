package ancestris.modules.editors.genealogyeditor.editors;

import ancestris.modules.editors.genealogyeditor.utilities.PropertyTag2Name;
import ancestris.modules.editors.genealogyeditor.models.EventsListModel;
import ancestris.modules.editors.genealogyeditor.panels.IndividualsListPanel;
import ancestris.util.swing.DialogManager;
import genj.gedcom.*;
import genj.view.ViewContext;
import java.awt.Component;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.openide.DialogDescriptor;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle;

/**
 *
 * @author dominique
 */

/*
 * n @<XREF:FAM>@ FAM
 * +1 RESN <RESTRICTION_NOTICE>
 * +1 <<FAMILY_EVENT_STRUCTURE>>
 * +1 HUSB @<XREF:INDI>@
 * +1 WIFE @<XREF:INDI>@
 * +1 CHIL @<XREF:INDI>@
 * +1 NCHI <COUNT_OF_CHILDREN>
 * +1 SUBM @<XREF:SUBM>@
 * +1 <<LDS_SPOUSE_SEALING>>
 * +1 REFN <USER_REFERENCE_NUMBER>
 * +2 TYPE <USER_REFERENCE_TYPE>
 * +1 RIN <AUTOMATED_RECORD_ID>
 * +1 <<CHANGE_DATE>>
 * +1 <<NOTE_STRUCTURE>>
 * +1 <<SOURCE_CITATION>>
 * +1 <<MULTIMEDIA_LINK>>
 *
 */
public class FamilyEditor extends EntityEditor {

    private class EventsListSelectionHandler implements ListSelectionListener {

        @Override
        public void valueChanged(ListSelectionEvent lse) {
            ListSelectionModel lsm = (ListSelectionModel) lse.getSource();
            if (lse.getValueIsAdjusting() == false && lsm.isSelectionEmpty() == false) {
                if (familyEventPanel.hasChanged()) {
                    try {
                        mFamily.getGedcom().doUnitOfWork(new UnitOfWork() {

                            @Override
                            public void perform(Gedcom gedcom) throws GedcomException {
                                familyEventPanel.commit();
                            }
                        });
                    } catch (GedcomException ex) {
                        Exceptions.printStackTrace(ex);
                    }
                }
                if (lsm.getMinSelectionIndex() < mEventsListModel.getSize()) {
                    familyEventPanel.set(mFamily, mEventsListModel.getValueAt(lsm.getMinSelectionIndex()));
                    familyEventPanel.setVisible(true);
                }
            }
        }

    }
    final private ArrayList<String> mFamilyEventsTags = new ArrayList<String>() {
        {
            add("ANUL");
            add("CENS");
            add("DIV");
            add("DIVF");
            add("MARR");
            add("ENGA");
            add("MARB");
            add("MARC");
            add("MARL");
            add("MARS");
            add("RESI");
            add("EVEN");
        }
    };
    private Context context;
    private Fam mFamily;
    private Indi mHusband;
    private Indi mWife;
    private Property mEvent = null;
    private boolean updateOnGoing = false;
    private EventsListModel mEventsListModel = new EventsListModel();
    private DefaultComboBoxModel<String> mEventsModel = new DefaultComboBoxModel<String>(new String[]{});

    /**
     * Creates new form FamilyEditor
     */
    public FamilyEditor() {
        this(false);
    }

    public FamilyEditor(boolean isNew) {
        super(isNew);
        initComponents();
        eventsList.getSelectionModel().addListSelectionListener(new EventsListSelectionHandler());
        familyEventPanel.setVisible(false);
        familyEventPanel.addChangeListener(changes);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        familyIDTextField = new javax.swing.JTextField();
        familyIDLabel = new javax.swing.JLabel();
        privateRecordToggleButton = new javax.swing.JToggleButton();
        fatherPanel = new javax.swing.JPanel();
        fatherToolBar = new javax.swing.JToolBar();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        addHusbandButton = new javax.swing.JButton();
        linkToHusbandButton = new javax.swing.JButton();
        removeHusbandButton = new javax.swing.JButton();
        editHusbandButton = new javax.swing.JButton();
        husbandNameTextField = new javax.swing.JTextField();
        husbandBirthDateLabel = new javax.swing.JLabel();
        husbandDeathDateLabel = new javax.swing.JLabel();
        husbandImageBean = new ancestris.modules.editors.genealogyeditor.beans.ImageBean();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        husbandBirthDateLabelDate = new javax.swing.JLabel();
        husbandDeathDateLabelDate = new javax.swing.JLabel();
        motherPanel = new javax.swing.JPanel();
        motherToolBar = new javax.swing.JToolBar();
        filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        addWifeButton = new javax.swing.JButton();
        linkToWifeButton = new javax.swing.JButton();
        removeWifeButton = new javax.swing.JButton();
        editWifeButton = new javax.swing.JButton();
        wifeNameTextField = new javax.swing.JTextField();
        wifeBirthDateLabel = new javax.swing.JLabel();
        wifeDeathDateLabel = new javax.swing.JLabel();
        wifeImageBean = new ancestris.modules.editors.genealogyeditor.beans.ImageBean();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        wifeBirthDateLabelDate = new javax.swing.JLabel();
        wifeDeathDateLabelDate = new javax.swing.JLabel();
        familyTabbedPane = new javax.swing.JTabbedPane();
        childrenPanel = new javax.swing.JPanel();
        childrenTreeTablePanel = new ancestris.modules.editors.genealogyeditor.panels.ChildrenTreeTablePanel();
        eventsPanel = new javax.swing.JPanel();
        eventsSplitPane = new javax.swing.JSplitPane();
        eventsListPanel = new javax.swing.JPanel();
        eventsListToolBar = new javax.swing.JToolBar();
        eventTypeLabel = new javax.swing.JLabel();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(12, 12), new java.awt.Dimension(12, 12), new java.awt.Dimension(12, 12));
        eventTypeComboBox = new javax.swing.JComboBox<String>();
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(12, 12), new java.awt.Dimension(12, 12), new java.awt.Dimension(12, 12));
        deleteEventButton = new javax.swing.JButton();
        eventsListScrollPane = new javax.swing.JScrollPane();
        eventsList = new javax.swing.JList();
        jPanel2 = new javax.swing.JPanel();
        familyEventPanel = new ancestris.modules.editors.genealogyeditor.panels.FamilyEventPanel();
        sourcesPanel = new javax.swing.JPanel();
        sourceCitationsListPanel = new ancestris.modules.editors.genealogyeditor.panels.SourceCitationsListPanel();
        notesPanel = new javax.swing.JPanel();
        noteCitationsListPanel = new ancestris.modules.editors.genealogyeditor.panels.NoteCitationsListPanel();
        galleryPanel = new javax.swing.JPanel();
        multimediaObjectCitationsListPanel = new ancestris.modules.editors.genealogyeditor.panels.MultimediaObjectCitationsListPanel();
        changeDateLabel = new javax.swing.JLabel();
        changeDateLabeldate = new javax.swing.JLabel();

        setMinimumSize(new java.awt.Dimension(1011, 439));

        familyIDTextField.setEditable(false);
        familyIDTextField.setColumns(8);

        familyIDLabel.setText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/editors/Bundle").getString("FamilyEditor.familyIDLabel.text"), new Object[] {})); // NOI18N

        privateRecordToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/lock_open.png"))); // NOI18N
        privateRecordToggleButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/lock_open.png"))); // NOI18N
        privateRecordToggleButton.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/lock.png"))); // NOI18N
        privateRecordToggleButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/lock.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(842, Short.MAX_VALUE)
                .addComponent(familyIDLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(familyIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(privateRecordToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                .addComponent(familyIDLabel)
                .addComponent(familyIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(privateRecordToggleButton))
        );

        fatherPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/editors/Bundle").getString("FamilyEditor.fatherPanel.border.title"), new Object[] {}))); // NOI18N
        fatherPanel.setPreferredSize(new java.awt.Dimension(410, 135));

        fatherToolBar.setBorder(null);
        fatherToolBar.setFloatable(false);
        fatherToolBar.setRollover(true);
        fatherToolBar.setOpaque(false);
        fatherToolBar.add(filler1);

        addHusbandButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/edit_add.png"))); // NOI18N
        addHusbandButton.setToolTipText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/editors/Bundle").getString("FamilyEditor.addHusbandButton.toolTipText"), new Object[] {})); // NOI18N
        addHusbandButton.setFocusable(false);
        addHusbandButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addHusbandButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        addHusbandButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addHusbandButtonActionPerformed(evt);
            }
        });
        fatherToolBar.add(addHusbandButton);

        linkToHusbandButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/link_add.png"))); // NOI18N
        linkToHusbandButton.setText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/editors/Bundle").getString("FamilyEditor.linkToHusbandButton.text"), new Object[] {})); // NOI18N
        linkToHusbandButton.setFocusable(false);
        linkToHusbandButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        linkToHusbandButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        linkToHusbandButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linkToHusbandButtonActionPerformed(evt);
            }
        });
        fatherToolBar.add(linkToHusbandButton);

        removeHusbandButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/edit_delete.png"))); // NOI18N
        removeHusbandButton.setFocusable(false);
        removeHusbandButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        removeHusbandButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        removeHusbandButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeHusbandButtonActionPerformed(evt);
            }
        });
        fatherToolBar.add(removeHusbandButton);

        editHusbandButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/edit.png"))); // NOI18N
        editHusbandButton.setFocusable(false);
        editHusbandButton.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        editHusbandButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        editHusbandButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editHusbandButtonActionPerformed(evt);
            }
        });
        fatherToolBar.add(editHusbandButton);

        husbandNameTextField.setEditable(false);
        husbandNameTextField.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        husbandNameTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        husbandNameTextField.setText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/editors/Bundle").getString("FamilyEditor.husbandNameTextField.text"), new Object[] {})); // NOI18N
        husbandNameTextField.setBorder(null);

        husbandBirthDateLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        husbandBirthDateLabel.setText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/editors/Bundle").getString("FamilyEditor.husbandBirthDateLabel.text"), new Object[] {})); // NOI18N

        husbandDeathDateLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        husbandDeathDateLabel.setText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/editors/Bundle").getString("FamilyEditor.husbandDeathDateLabel.text"), new Object[] {})); // NOI18N

        husbandImageBean.setMinimumSize(new java.awt.Dimension(77, 112));
        husbandImageBean.setPreferredSize(new java.awt.Dimension(77, 112));

        javax.swing.GroupLayout husbandImageBeanLayout = new javax.swing.GroupLayout(husbandImageBean);
        husbandImageBean.setLayout(husbandImageBeanLayout);
        husbandImageBeanLayout.setHorizontalGroup(
            husbandImageBeanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 77, Short.MAX_VALUE)
        );
        husbandImageBeanLayout.setVerticalGroup(
            husbandImageBeanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jLabel2.setText(":"); // NOI18N

        jLabel3.setText(":"); // NOI18N

        javax.swing.GroupLayout fatherPanelLayout = new javax.swing.GroupLayout(fatherPanel);
        fatherPanel.setLayout(fatherPanelLayout);
        fatherPanelLayout.setHorizontalGroup(
            fatherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fatherPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(husbandImageBean, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(fatherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(fatherPanelLayout.createSequentialGroup()
                        .addGroup(fatherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(husbandDeathDateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(husbandBirthDateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(fatherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(fatherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(husbandBirthDateLabelDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(husbandDeathDateLabelDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .addComponent(husbandNameTextField)
                    .addComponent(fatherToolBar, javax.swing.GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE)))
        );
        fatherPanelLayout.setVerticalGroup(
            fatherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fatherPanelLayout.createSequentialGroup()
                .addGroup(fatherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(husbandImageBean, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                    .addGroup(fatherPanelLayout.createSequentialGroup()
                        .addComponent(husbandNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(fatherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(husbandBirthDateLabel)
                            .addComponent(jLabel2)
                            .addComponent(husbandBirthDateLabelDate))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(fatherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(husbandDeathDateLabel)
                            .addComponent(jLabel3)
                            .addComponent(husbandDeathDateLabelDate))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(fatherToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        motherPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/editors/Bundle").getString("FamilyEditor.motherPanel.border.title"), new Object[] {}))); // NOI18N
        motherPanel.setPreferredSize(new java.awt.Dimension(410, 135));

        motherToolBar.setBorder(null);
        motherToolBar.setFloatable(false);
        motherToolBar.setRollover(true);
        motherToolBar.setOpaque(false);
        motherToolBar.add(filler4);

        addWifeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/edit_add.png"))); // NOI18N
        addWifeButton.setFocusable(false);
        addWifeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addWifeButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        addWifeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addWifeButtonActionPerformed(evt);
            }
        });
        motherToolBar.add(addWifeButton);

        linkToWifeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/link_add.png"))); // NOI18N
        linkToWifeButton.setText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/editors/Bundle").getString("FamilyEditor.linkToWifeButton.text"), new Object[] {})); // NOI18N
        linkToWifeButton.setFocusable(false);
        linkToWifeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        linkToWifeButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        linkToWifeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linkToWifeButtonActionPerformed(evt);
            }
        });
        motherToolBar.add(linkToWifeButton);

        removeWifeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/edit_delete.png"))); // NOI18N
        removeWifeButton.setFocusable(false);
        removeWifeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        removeWifeButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        removeWifeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeWifeButtonActionPerformed(evt);
            }
        });
        motherToolBar.add(removeWifeButton);

        editWifeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/edit.png"))); // NOI18N
        editWifeButton.setFocusable(false);
        editWifeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        editWifeButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        editWifeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editWifeButtonActionPerformed(evt);
            }
        });
        motherToolBar.add(editWifeButton);

        wifeNameTextField.setEditable(false);
        wifeNameTextField.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        wifeNameTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        wifeNameTextField.setText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/editors/Bundle").getString("FamilyEditor.wifeNameTextField.text"), new Object[] {})); // NOI18N
        wifeNameTextField.setBorder(null);

        wifeBirthDateLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        wifeBirthDateLabel.setText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/editors/Bundle").getString("FamilyEditor.wifeBirthDateLabel.text"), new Object[] {})); // NOI18N

        wifeDeathDateLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        wifeDeathDateLabel.setText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/editors/Bundle").getString("FamilyEditor.wifeDeathDateLabel.text"), new Object[] {})); // NOI18N

        wifeImageBean.setMinimumSize(new java.awt.Dimension(77, 112));
        wifeImageBean.setPreferredSize(new java.awt.Dimension(77, 112));

        javax.swing.GroupLayout wifeImageBeanLayout = new javax.swing.GroupLayout(wifeImageBean);
        wifeImageBean.setLayout(wifeImageBeanLayout);
        wifeImageBeanLayout.setHorizontalGroup(
            wifeImageBeanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 77, Short.MAX_VALUE)
        );
        wifeImageBeanLayout.setVerticalGroup(
            wifeImageBeanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jLabel4.setText(":"); // NOI18N

        jLabel5.setText(":"); // NOI18N

        javax.swing.GroupLayout motherPanelLayout = new javax.swing.GroupLayout(motherPanel);
        motherPanel.setLayout(motherPanelLayout);
        motherPanelLayout.setHorizontalGroup(
            motherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(motherPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(wifeImageBean, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(motherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(motherToolBar, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addGroup(motherPanelLayout.createSequentialGroup()
                        .addGroup(motherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(motherPanelLayout.createSequentialGroup()
                                .addGroup(motherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(wifeDeathDateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(wifeBirthDateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(motherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(motherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(wifeBirthDateLabelDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(wifeDeathDateLabelDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(wifeNameTextField))
                        .addContainerGap())))
        );
        motherPanelLayout.setVerticalGroup(
            motherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(motherPanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(motherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(motherPanelLayout.createSequentialGroup()
                        .addComponent(wifeNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(motherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(wifeBirthDateLabel)
                            .addComponent(jLabel4)
                            .addComponent(wifeBirthDateLabelDate))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(motherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(wifeDeathDateLabel)
                            .addComponent(jLabel5)
                            .addComponent(wifeDeathDateLabelDate))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(motherToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(wifeImageBean, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE))
                .addContainerGap())
        );

        familyTabbedPane.setPreferredSize(new java.awt.Dimension(0, 0));

        javax.swing.GroupLayout childrenPanelLayout = new javax.swing.GroupLayout(childrenPanel);
        childrenPanel.setLayout(childrenPanelLayout);
        childrenPanelLayout.setHorizontalGroup(
            childrenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(childrenTreeTablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 1023, Short.MAX_VALUE)
        );
        childrenPanelLayout.setVerticalGroup(
            childrenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(childrenTreeTablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)
        );

        familyTabbedPane.addTab(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/editors/Bundle").getString("FamilyEditor.childrenPanel.TabConstraints.tabTitle"), new Object[] {}), new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/child.png")), childrenPanel); // NOI18N

        eventsSplitPane.setBorder(null);
        eventsSplitPane.setDividerSize(1);

        eventsListToolBar.setFloatable(false);
        eventsListToolBar.setRollover(true);

        eventTypeLabel.setText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/editors/Bundle").getString("FamilyEditor.eventTypeLabel.text"), new Object[] {})); // NOI18N
        eventsListToolBar.add(eventTypeLabel);
        eventsListToolBar.add(filler2);

        eventTypeComboBox.setModel(mEventsModel);
        eventTypeComboBox.setToolTipText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/editors/Bundle").getString("FamilyEditor.eventTypeComboBox.toolTipText"), new Object[] {})); // NOI18N
        eventTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eventTypeComboBoxActionPerformed(evt);
            }
        });
        eventsListToolBar.add(eventTypeComboBox);
        eventsListToolBar.add(filler3);

        deleteEventButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/edit_delete.png"))); // NOI18N
        deleteEventButton.setToolTipText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/editors/Bundle").getString("FamilyEditor.deleteEventButton.toolTipText"), new Object[] {})); // NOI18N
        deleteEventButton.setFocusable(false);
        deleteEventButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        deleteEventButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        deleteEventButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteEventButtonActionPerformed(evt);
            }
        });
        eventsListToolBar.add(deleteEventButton);

        eventsList.setModel(mEventsListModel);
        eventsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        eventsListScrollPane.setViewportView(eventsList);

        javax.swing.GroupLayout eventsListPanelLayout = new javax.swing.GroupLayout(eventsListPanel);
        eventsListPanel.setLayout(eventsListPanelLayout);
        eventsListPanelLayout.setHorizontalGroup(
            eventsListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(eventsListPanelLayout.createSequentialGroup()
                .addGroup(eventsListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(eventsListToolBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(eventsListScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );
        eventsListPanelLayout.setVerticalGroup(
            eventsListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, eventsListPanelLayout.createSequentialGroup()
                .addComponent(eventsListToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(eventsListScrollPane)
                .addGap(0, 0, 0))
        );

        eventsSplitPane.setLeftComponent(eventsListPanel);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 864, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(0, 0, 0)
                    .addComponent(familyEventPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 864, Short.MAX_VALUE)
                    .addGap(0, 0, 0)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 194, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(0, 0, 0)
                    .addComponent(familyEventPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)
                    .addGap(0, 0, 0)))
        );

        eventsSplitPane.setRightComponent(jPanel2);

        javax.swing.GroupLayout eventsPanelLayout = new javax.swing.GroupLayout(eventsPanel);
        eventsPanel.setLayout(eventsPanelLayout);
        eventsPanelLayout.setHorizontalGroup(
            eventsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(eventsSplitPane)
        );
        eventsPanelLayout.setVerticalGroup(
            eventsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(eventsSplitPane)
        );

        familyTabbedPane.addTab(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/editors/Bundle").getString("FamilyEditor.eventsPanel.TabConstraints.tabTitle"), new Object[] {}), new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/event.png")), eventsPanel); // NOI18N

        sourceCitationsListPanel.setPreferredSize(null);

        javax.swing.GroupLayout sourcesPanelLayout = new javax.swing.GroupLayout(sourcesPanel);
        sourcesPanel.setLayout(sourcesPanelLayout);
        sourcesPanelLayout.setHorizontalGroup(
            sourcesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sourceCitationsListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 1023, Short.MAX_VALUE)
        );
        sourcesPanelLayout.setVerticalGroup(
            sourcesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sourceCitationsListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)
        );

        familyTabbedPane.addTab("Sources", new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/source.png")), sourcesPanel); // NOI18N

        javax.swing.GroupLayout notesPanelLayout = new javax.swing.GroupLayout(notesPanel);
        notesPanel.setLayout(notesPanelLayout);
        notesPanelLayout.setHorizontalGroup(
            notesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(noteCitationsListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 1023, Short.MAX_VALUE)
        );
        notesPanelLayout.setVerticalGroup(
            notesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(noteCitationsListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)
        );

        familyTabbedPane.addTab(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/editors/Bundle").getString("FamilyEditor.notesPanel.TabConstraints.tabTitle"), new Object[] {}), new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/Note.png")), notesPanel); // NOI18N

        javax.swing.GroupLayout galleryPanelLayout = new javax.swing.GroupLayout(galleryPanel);
        galleryPanel.setLayout(galleryPanelLayout);
        galleryPanelLayout.setHorizontalGroup(
            galleryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(multimediaObjectCitationsListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 1023, Short.MAX_VALUE)
        );
        galleryPanelLayout.setVerticalGroup(
            galleryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(multimediaObjectCitationsListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)
        );

        familyTabbedPane.addTab(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/editors/Bundle").getString("FamilyEditor.galleryPanel.TabConstraints.tabTitle"), new Object[] {}), new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/Media.png")), galleryPanel); // NOI18N

        changeDateLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        changeDateLabel.setText(org.openide.util.NbBundle.getMessage(FamilyEditor.class, "FamilyEditor.changeDateLabel.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(familyTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(fatherPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 531, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(motherPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 491, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(changeDateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(changeDateLabeldate, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fatherPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(motherPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(familyTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(changeDateLabel)
                    .addComponent(changeDateLabeldate))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addHusbandButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addHusbandButtonActionPerformed
        try {
            mFamily.getGedcom().doUnitOfWork(new UnitOfWork() {

                @Override
                public void perform(Gedcom gedcom) throws GedcomException {
                    mHusband = (Indi) gedcom.createEntity(Gedcom.INDI);
                    mHusband.setSex(PropertySex.MALE);
                }
            }); // end of doUnitOfWork
            final IndividualEditor individualEditor = new IndividualEditor();
            individualEditor.setContext(new Context(mHusband));

            DialogManager.ADialog individualEditorDialog = new DialogManager.ADialog(
                    NbBundle.getMessage(IndividualEditor.class, "IndividualEditor.create.husband.title"),
                    individualEditor);
            individualEditorDialog.setDialogId(IndividualEditor.class.getName());

            if (individualEditorDialog.show() == DialogDescriptor.OK_OPTION) {
                try {
                    mFamily.getGedcom().doUnitOfWork(new UnitOfWork() {

                        @Override
                        public void perform(Gedcom gedcom) throws GedcomException {
                            individualEditor.commit();
                        }
                    });
                } catch (GedcomException ex) {
                    Exceptions.printStackTrace(ex);
                }
                mFamily.getGedcom().doUnitOfWork(new UnitOfWork() {

                    @Override
                    public void perform(Gedcom gedcom) throws GedcomException {
                        mFamily.setHusband(mHusband);
                    }
                }); // end of doUnitOfWork
                husbandNameTextField.setText(mHusband.getName());
                husbandBirthDateLabelDate.setText(mHusband.getBirthAsString());
                husbandDeathDateLabelDate.setText(mHusband.getDeathAsString());
                for (Property multiMediaObject : mHusband.getProperties("OBJE")) {
                    String objetFormat = null;
                    if (mFamily.getGedcom().getGrammar().getVersion().equals("5.5.1")) {
                        if (multiMediaObject instanceof PropertyMedia) {
                            Property propertyFormat = ((Media) ((PropertyMedia) multiMediaObject).getTargetEntity()).getPropertyByPath(".:FILE:FORM");
                            if (propertyFormat != null) {
                                objetFormat = propertyFormat.getValue();
                            }
                        } else {
                            Property propertyFormat = multiMediaObject.getPropertyByPath(".:FILE:FORM");
                            if (propertyFormat != null) {
                                objetFormat = propertyFormat.getValue();
                            }
                        }
                    } else {
                        if (multiMediaObject instanceof PropertyMedia) {
                            Property propertyFormat = ((Media) ((PropertyMedia) multiMediaObject).getTargetEntity()).getProperty("FORM");
                            if (propertyFormat != null) {
                                objetFormat = propertyFormat.getValue();
                            }
                        } else {
                            Property propertyFormat = multiMediaObject.getProperty("FORM");
                            if (propertyFormat != null) {
                                objetFormat = propertyFormat.getValue();
                            }
                        }
                    }

                    // bmp | gif | jpeg
                    if (objetFormat != null && (objetFormat.equals("bmp") || objetFormat.equals("gif") || objetFormat.equals("jpeg") || objetFormat.equals("jpg") || objetFormat.equals("png"))) {
                        husbandImageBean.setImage(multiMediaObject);
                        break;
                    }
                }
                addHusbandButton.setVisible(false);
                linkToHusbandButton.setVisible(false);
                removeHusbandButton.setVisible(true);
                editHusbandButton.setVisible(true);
            } else {
                mFamily.getGedcom().undoUnitOfWork(false);
            }
        } catch (GedcomException ex) {
            Exceptions.printStackTrace(ex);
        }
    }//GEN-LAST:event_addHusbandButtonActionPerformed

    private void addWifeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addWifeButtonActionPerformed
        try {
            mFamily.getGedcom().doUnitOfWork(new UnitOfWork() {

                @Override
                public void perform(Gedcom gedcom) throws GedcomException {
                    mWife = (Indi) gedcom.createEntity(Gedcom.INDI);
                    mWife.setSex(PropertySex.FEMALE);
                }
            }); // end of doUnitOfWork
            final IndividualEditor individualEditor = new IndividualEditor();
            individualEditor.setContext(new Context(mWife));

            DialogManager.ADialog individualEditorDialog = new DialogManager.ADialog(
                    NbBundle.getMessage(IndividualEditor.class, "IndividualEditor.create.wife.title"),
                    individualEditor);
            individualEditorDialog.setDialogId(IndividualEditor.class.getName());

            if (individualEditorDialog.show() == DialogDescriptor.OK_OPTION) {
                try {
                    mFamily.getGedcom().doUnitOfWork(new UnitOfWork() {

                        @Override
                        public void perform(Gedcom gedcom) throws GedcomException {
                            individualEditor.commit();
                        }
                    });
                } catch (GedcomException ex) {
                    Exceptions.printStackTrace(ex);
                }
                mFamily.getGedcom().doUnitOfWork(new UnitOfWork() {

                    @Override
                    public void perform(Gedcom gedcom) throws GedcomException {
                        mFamily.setWife(mWife);
                    }
                }); // end of doUnitOfWork
                wifeNameTextField.setText(mWife.getName());
                wifeBirthDateLabelDate.setText(mWife.getBirthAsString());
                wifeDeathDateLabelDate.setText(mWife.getDeathAsString());
                for (Property multiMediaObject : mWife.getProperties("OBJE")) {
                    String objetFormat = null;
                    if (mFamily.getGedcom().getGrammar().getVersion().equals("5.5.1")) {
                        if (multiMediaObject instanceof PropertyMedia) {
                            Property propertyFormat = ((Media) ((PropertyMedia) multiMediaObject).getTargetEntity()).getPropertyByPath(".:FILE:FORM");
                            if (propertyFormat != null) {
                                objetFormat = propertyFormat.getValue();
                            }
                        } else {
                            Property propertyFormat = multiMediaObject.getPropertyByPath(".:FILE:FORM");
                            if (propertyFormat != null) {
                                objetFormat = propertyFormat.getValue();
                            }
                        }
                    } else {
                        if (multiMediaObject instanceof PropertyMedia) {
                            Property propertyFormat = ((Media) ((PropertyMedia) multiMediaObject).getTargetEntity()).getProperty("FORM");
                            if (propertyFormat != null) {
                                objetFormat = propertyFormat.getValue();
                            }
                        } else {
                            Property propertyFormat = multiMediaObject.getProperty("FORM");
                            if (propertyFormat != null) {
                                objetFormat = propertyFormat.getValue();
                            }
                        }
                    }

                    // bmp | gif | jpeg
                    if (objetFormat != null && (objetFormat.equals("bmp") || objetFormat.equals("gif") || objetFormat.equals("jpeg") || objetFormat.equals("jpg") || objetFormat.equals("png"))) {
                        wifeImageBean.setImage(multiMediaObject);
                        break;
                    }
                }
                addWifeButton.setVisible(false);
                linkToWifeButton.setVisible(false);
                removeWifeButton.setVisible(true);
                editWifeButton.setVisible(true);
            } else {
                mFamily.getGedcom().undoUnitOfWork(false);
            }
        } catch (GedcomException ex) {
            Exceptions.printStackTrace(ex);
        }
    }//GEN-LAST:event_addWifeButtonActionPerformed

    private void linkToHusbandButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linkToHusbandButtonActionPerformed
        IndividualsListPanel individualsListPanel = new IndividualsListPanel();
        List<Indi> individualsList = new ArrayList<Indi>();
        for (Indi individual : mFamily.getGedcom().getIndis()) {
            if (individual.getSex() == PropertySex.MALE || individual.getSex() == PropertySex.UNKNOWN) {
                individualsList.add(individual);
            }
        }

        individualsListPanel.set(mFamily, individualsList);
        individualsListPanel.setToolBarVisible(false);
        DialogManager.ADialog individualsListDialog = new DialogManager.ADialog(
                NbBundle.getMessage(IndividualsListPanel.class, "IndividualsListPanel.title.select.husband"),
                individualsListPanel);
        individualsListDialog.setDialogId(IndividualsListPanel.class.getName());

        if (individualsListDialog.show() == DialogDescriptor.OK_OPTION) {
            mHusband = individualsListPanel.getSelectedIndividual();
            try {
                mFamily.getGedcom().doUnitOfWork(new UnitOfWork() {

                    @Override
                    public void perform(Gedcom gedcom) throws GedcomException {
                        mFamily.setHusband(mHusband);
                    }
                }); // end of doUnitOfWork
                husbandNameTextField.setText(mHusband.getName());
                husbandBirthDateLabelDate.setText(mHusband.getBirthAsString());
                husbandDeathDateLabelDate.setText(mHusband.getDeathAsString());
                for (Property multiMediaObject : mHusband.getProperties("OBJE")) {
                    String objetFormat = null;
                    if (mFamily.getGedcom().getGrammar().getVersion().equals("5.5.1")) {
                        if (multiMediaObject instanceof PropertyMedia) {
                            Property propertyFormat = ((Media) ((PropertyMedia) multiMediaObject).getTargetEntity()).getPropertyByPath(".:FILE:FORM");
                            if (propertyFormat != null) {
                                objetFormat = propertyFormat.getValue();
                            }
                        } else {
                            Property propertyFormat = multiMediaObject.getPropertyByPath(".:FILE:FORM");
                            if (propertyFormat != null) {
                                objetFormat = propertyFormat.getValue();
                            }
                        }
                    } else {
                        if (multiMediaObject instanceof PropertyMedia) {
                            Property propertyFormat = ((Media) ((PropertyMedia) multiMediaObject).getTargetEntity()).getProperty("FORM");
                            if (propertyFormat != null) {
                                objetFormat = propertyFormat.getValue();
                            }
                        } else {
                            Property propertyFormat = multiMediaObject.getProperty("FORM");
                            if (propertyFormat != null) {
                                objetFormat = propertyFormat.getValue();
                            }
                        }
                    }

                    // bmp | gif | jpeg
                    if (objetFormat != null && (objetFormat.equals("bmp") || objetFormat.equals("gif") || objetFormat.equals("jpeg") || objetFormat.equals("jpg") || objetFormat.equals("png"))) {
                        husbandImageBean.setImage(multiMediaObject);
                        break;
                    }
                }
                addHusbandButton.setVisible(false);
                linkToHusbandButton.setVisible(false);
                removeHusbandButton.setVisible(true);
                editHusbandButton.setVisible(true);
            } catch (GedcomException ex) {
                Exceptions.printStackTrace(ex);
            }
        }
    }//GEN-LAST:event_linkToHusbandButtonActionPerformed

    private void linkToWifeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linkToWifeButtonActionPerformed
        IndividualsListPanel individualsListPanel = new IndividualsListPanel();
        List<Indi> individualsList = new ArrayList<Indi>();

        for (Indi individual : mFamily.getGedcom().getIndis()) {
            if (individual.getSex() == PropertySex.FEMALE || individual.getSex() == PropertySex.UNKNOWN) {
                individualsList.add(individual);
            }
        }
        individualsListPanel.set(mFamily, individualsList);
        individualsListPanel.setToolBarVisible(false);

        DialogManager.ADialog individualsListDialog = new DialogManager.ADialog(
                NbBundle.getMessage(IndividualsListPanel.class, "IndividualsListPanel.title.select.wife"),
                individualsListPanel);
        individualsListDialog.setDialogId(IndividualsListPanel.class.getName());

        if (individualsListDialog.show() == DialogDescriptor.OK_OPTION) {
            mWife = individualsListPanel.getSelectedIndividual();
            try {
                mFamily.getGedcom().doUnitOfWork(new UnitOfWork() {

                    @Override
                    public void perform(Gedcom gedcom) throws GedcomException {
                        mFamily.setWife(mWife);
                    }
                }); // end of doUnitOfWork
                wifeNameTextField.setText(mWife.getName());
                wifeBirthDateLabelDate.setText(mWife.getBirthAsString());
                wifeDeathDateLabelDate.setText(mWife.getDeathAsString());

                for (Property multiMediaObject : mWife.getProperties("OBJE")) {
                    String objetFormat = null;
                    if (mFamily.getGedcom().getGrammar().getVersion().equals("5.5.1")) {
                        if (multiMediaObject instanceof PropertyMedia) {
                            Property propertyFormat = ((Media) ((PropertyMedia) multiMediaObject).getTargetEntity()).getPropertyByPath(".:FILE:FORM");
                            if (propertyFormat != null) {
                                objetFormat = propertyFormat.getValue();
                            }
                        } else {
                            Property propertyFormat = multiMediaObject.getPropertyByPath(".:FILE:FORM");
                            if (propertyFormat != null) {
                                objetFormat = propertyFormat.getValue();
                            }
                        }
                    } else {
                        if (multiMediaObject instanceof PropertyMedia) {
                            Property propertyFormat = ((Media) ((PropertyMedia) multiMediaObject).getTargetEntity()).getProperty("FORM");
                            if (propertyFormat != null) {
                                objetFormat = propertyFormat.getValue();
                            }
                        } else {
                            Property propertyFormat = multiMediaObject.getProperty("FORM");
                            if (propertyFormat != null) {
                                objetFormat = propertyFormat.getValue();
                            }
                        }
                    }

                    // bmp | gif | jpeg
                    if (objetFormat != null && (objetFormat.equals("bmp") || objetFormat.equals("gif") || objetFormat.equals("jpeg") || objetFormat.equals("jpg") || objetFormat.equals("png"))) {
                        wifeImageBean.setImage(multiMediaObject);
                        break;
                    }
                }
                addWifeButton.setVisible(false);
                linkToWifeButton.setVisible(false);
                removeWifeButton.setVisible(true);
                editWifeButton.setVisible(true);
            } catch (GedcomException ex) {
                Exceptions.printStackTrace(ex);
            }
        }
    }//GEN-LAST:event_linkToWifeButtonActionPerformed

    private void editHusbandButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editHusbandButtonActionPerformed
        Indi individual = mFamily.getHusband();
        Gedcom gedcom = mFamily.getGedcom();
        IndividualEditor individualEditor = new IndividualEditor();
        individualEditor.setContext(new Context(individual));

        if (individualEditor.showPanel()) {
            husbandNameTextField.setText(mHusband.getName());
            husbandBirthDateLabelDate.setText(mHusband.getBirthAsString());
            husbandDeathDateLabelDate.setText(mHusband.getDeathAsString());
            for (Property multiMediaObject : mHusband.getProperties("OBJE")) {
                String objetFormat = null;
                if (mFamily.getGedcom().getGrammar().getVersion().equals("5.5.1")) {
                    if (multiMediaObject instanceof PropertyMedia) {
                        Property propertyFormat = ((Media) ((PropertyMedia) multiMediaObject).getTargetEntity()).getPropertyByPath(".:FILE:FORM");
                        if (propertyFormat != null) {
                            objetFormat = propertyFormat.getValue();
                        }
                    } else {
                        Property propertyFormat = multiMediaObject.getPropertyByPath(".:FILE:FORM");
                        if (propertyFormat != null) {
                            objetFormat = propertyFormat.getValue();
                        }
                    }
                } else {
                    if (multiMediaObject instanceof PropertyMedia) {
                        Property propertyFormat = ((Media) ((PropertyMedia) multiMediaObject).getTargetEntity()).getProperty("FORM");
                        if (propertyFormat != null) {
                            objetFormat = propertyFormat.getValue();
                        }
                    } else {
                        Property propertyFormat = multiMediaObject.getProperty("FORM");
                        if (propertyFormat != null) {
                            objetFormat = propertyFormat.getValue();
                        }
                    }
                }

                // bmp | gif | jpeg
                if (objetFormat != null && (objetFormat.equals("bmp") || objetFormat.equals("gif") || objetFormat.equals("jpeg") || objetFormat.equals("jpg") || objetFormat.equals("png"))) {
                    husbandImageBean.setImage(multiMediaObject);
                    break;
                }
            }
        }
    }//GEN-LAST:event_editHusbandButtonActionPerformed

    private void editWifeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editWifeButtonActionPerformed
        Indi individual = mFamily.getWife();
        Gedcom gedcom = mFamily.getGedcom();
        IndividualEditor individualEditor = new IndividualEditor();
        individualEditor.setContext(new Context(individual));
        if (individualEditor.showPanel()) {
            wifeNameTextField.setText(mWife.getName());
            wifeBirthDateLabelDate.setText(mWife.getBirthAsString());
            wifeDeathDateLabelDate.setText(mWife.getDeathAsString());

            for (Property multiMediaObject : mWife.getProperties("OBJE")) {
                String objetFormat = null;
                if (mFamily.getGedcom().getGrammar().getVersion().equals("5.5.1")) {
                    if (multiMediaObject instanceof PropertyMedia) {
                        Property propertyFormat = ((Media) ((PropertyMedia) multiMediaObject).getTargetEntity()).getPropertyByPath(".:FILE:FORM");
                        if (propertyFormat != null) {
                            objetFormat = propertyFormat.getValue();
                        }
                    } else {
                        Property propertyFormat = multiMediaObject.getPropertyByPath(".:FILE:FORM");
                        if (propertyFormat != null) {
                            objetFormat = propertyFormat.getValue();
                        }
                    }
                } else {
                    if (multiMediaObject instanceof PropertyMedia) {
                        Property propertyFormat = ((Media) ((PropertyMedia) multiMediaObject).getTargetEntity()).getProperty("FORM");
                        if (propertyFormat != null) {
                            objetFormat = propertyFormat.getValue();
                        }
                    } else {
                        Property propertyFormat = multiMediaObject.getProperty("FORM");
                        if (propertyFormat != null) {
                            objetFormat = propertyFormat.getValue();
                        }
                    }
                }

                // bmp | gif | jpeg
                if (objetFormat != null && (objetFormat.equals("bmp") || objetFormat.equals("gif") || objetFormat.equals("jpeg") || objetFormat.equals("jpg") || objetFormat.equals("png"))) {
                    wifeImageBean.setImage(multiMediaObject);
                    break;
                }
            }
        }
    }//GEN-LAST:event_editWifeButtonActionPerformed

    private void removeHusbandButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeHusbandButtonActionPerformed
        DialogManager createYesNo = DialogManager.createYesNo(
                NbBundle.getMessage(
                        FamilyEditor.class, "FamilyEditor.deleteHusbandConfirmation.title"),
                NbBundle.getMessage(
                        FamilyEditor.class, "FamilyEditor.deleteHusbandConfirmation.text",
                        mFamily.getHusband(),
                        mFamily));
        if (createYesNo.show() == DialogManager.YES_OPTION) {
            try {
                mFamily.getGedcom().doUnitOfWork(new UnitOfWork() {

                    @Override
                    public void perform(Gedcom gedcom) throws GedcomException {
                        mFamily.setHusband(null);
                    }
                }); // end of doUnitOfWork

                husbandNameTextField.setText("");
                husbandBirthDateLabelDate.setText("");
                husbandDeathDateLabelDate.setText("");
                husbandImageBean.setImage(null);

                addHusbandButton.setVisible(true);
                linkToHusbandButton.setVisible(true);
                removeHusbandButton.setVisible(false);
                editHusbandButton.setVisible(false);
            } catch (GedcomException ex) {
                Exceptions.printStackTrace(ex);
            }
        }
    }//GEN-LAST:event_removeHusbandButtonActionPerformed

    private void removeWifeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeWifeButtonActionPerformed
        DialogManager createYesNo = DialogManager.createYesNo(
                NbBundle.getMessage(
                        FamilyEditor.class, "FamilyEditor.deleteWifeConfirmation.title"),
                NbBundle.getMessage(
                        FamilyEditor.class, "FamilyEditor.deleteWifeConfirmation.text",
                        mFamily.getWife(),
                        mFamily));
        if (createYesNo.show() == DialogManager.YES_OPTION) {
            try {
                mFamily.getGedcom().doUnitOfWork(new UnitOfWork() {

                    @Override
                    public void perform(Gedcom gedcom) throws GedcomException {
                        mFamily.setWife(null);
                    }
                }); // end of doUnitOfWork

                wifeNameTextField.setText("");
                wifeBirthDateLabelDate.setText("");
                wifeDeathDateLabelDate.setText("");
                wifeImageBean.setImage(null);

                addWifeButton.setVisible(true);
                linkToWifeButton.setVisible(true);
                removeWifeButton.setVisible(false);
                editWifeButton.setVisible(false);
            } catch (GedcomException ex) {
                Exceptions.printStackTrace(ex);
            }
        }
    }//GEN-LAST:event_removeWifeButtonActionPerformed

    private void eventTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eventTypeComboBoxActionPerformed
        if (!updateOnGoing) {
            Gedcom gedcom = mFamily.getGedcom();
            mEvent = null;
            if (eventTypeComboBox.getSelectedIndex() > 0) {
                final String eventType = eventTypeComboBox.getSelectedItem().toString();
                try {
                    gedcom.doUnitOfWork(new UnitOfWork() {

                        @Override
                        public void perform(Gedcom gedcom) throws GedcomException {
                            mEvent = mFamily.addProperty(PropertyTag2Name.getPropertyTag(eventType), "");
                        }
                    }); // end of doUnitOfWork

                    if (mEvent != null) {
                        ArrayList<Property> eventsProperties = new ArrayList<Property>();
                        for (Property property : mFamily.getProperties()) {
                            if (mFamilyEventsTags.contains(property.getTag())) {
                                eventsProperties.add(property);
                            }
                        }
                        seteventTypeComboBox(eventsProperties);
                        mEventsListModel.add(mEvent);
                        eventsList.setSelectedIndex(mEventsListModel.getSize() - 1);
                    }
                } catch (GedcomException ex) {
                    Exceptions.printStackTrace(ex);
                }
            }
        }
    }//GEN-LAST:event_eventTypeComboBoxActionPerformed

    private void deleteEventButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteEventButtonActionPerformed
        final int index = eventsList.getSelectedIndex();
        Gedcom gedcom = mFamily.getGedcom();

        if (index != -1) {
            Property event = mEventsListModel.getValueAt(index);

            DialogManager createYesNo = DialogManager.createYesNo(
                    NbBundle.getMessage(
                            FamilyEditor.class, "FamilyEditor.eventsList.deleteEventConfirmation.title",
                            PropertyTag2Name.getTagName(event.getTag())),
                    NbBundle.getMessage(
                            FamilyEditor.class, "FamilyEditor.eventsList.deleteEventConfirmation.text",
                            PropertyTag2Name.getTagName(event.getTag()),
                            mFamily));
            if (createYesNo.show() == DialogManager.YES_OPTION) {
                try {
                    gedcom.doUnitOfWork(new UnitOfWork() {

                        @Override
                        public void perform(Gedcom gedcom) throws GedcomException {
                            mFamily.delProperty(mEventsListModel.remove(index));
                        }
                    }); // end of doUnitOfWork
                    ArrayList<Property> eventsProperties = new ArrayList<Property>();
                    for (Property property : mFamily.getProperties()) {
                        if (mFamilyEventsTags.contains(property.getTag())) {
                            eventsProperties.add(property);
                        }
                    }
                    seteventTypeComboBox(eventsProperties);
                    eventsList.setSelectedIndex(0);
                } catch (GedcomException ex) {
                    Exceptions.printStackTrace(ex);
                }
            }
        }
    }//GEN-LAST:event_deleteEventButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addHusbandButton;
    private javax.swing.JButton addWifeButton;
    private javax.swing.JLabel changeDateLabel;
    private javax.swing.JLabel changeDateLabeldate;
    private javax.swing.JPanel childrenPanel;
    private ancestris.modules.editors.genealogyeditor.panels.ChildrenTreeTablePanel childrenTreeTablePanel;
    private javax.swing.JButton deleteEventButton;
    private javax.swing.JButton editHusbandButton;
    private javax.swing.JButton editWifeButton;
    private javax.swing.JComboBox<String> eventTypeComboBox;
    private javax.swing.JLabel eventTypeLabel;
    private javax.swing.JList eventsList;
    private javax.swing.JPanel eventsListPanel;
    private javax.swing.JScrollPane eventsListScrollPane;
    private javax.swing.JToolBar eventsListToolBar;
    private javax.swing.JPanel eventsPanel;
    private javax.swing.JSplitPane eventsSplitPane;
    private ancestris.modules.editors.genealogyeditor.panels.FamilyEventPanel familyEventPanel;
    private javax.swing.JLabel familyIDLabel;
    private javax.swing.JTextField familyIDTextField;
    private javax.swing.JTabbedPane familyTabbedPane;
    private javax.swing.JPanel fatherPanel;
    private javax.swing.JToolBar fatherToolBar;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler3;
    private javax.swing.Box.Filler filler4;
    private javax.swing.JPanel galleryPanel;
    private javax.swing.JLabel husbandBirthDateLabel;
    private javax.swing.JLabel husbandBirthDateLabelDate;
    private javax.swing.JLabel husbandDeathDateLabel;
    private javax.swing.JLabel husbandDeathDateLabelDate;
    private ancestris.modules.editors.genealogyeditor.beans.ImageBean husbandImageBean;
    private javax.swing.JTextField husbandNameTextField;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton linkToHusbandButton;
    private javax.swing.JButton linkToWifeButton;
    private javax.swing.JPanel motherPanel;
    private javax.swing.JToolBar motherToolBar;
    private ancestris.modules.editors.genealogyeditor.panels.MultimediaObjectCitationsListPanel multimediaObjectCitationsListPanel;
    private ancestris.modules.editors.genealogyeditor.panels.NoteCitationsListPanel noteCitationsListPanel;
    private javax.swing.JPanel notesPanel;
    private javax.swing.JToggleButton privateRecordToggleButton;
    private javax.swing.JButton removeHusbandButton;
    private javax.swing.JButton removeWifeButton;
    private ancestris.modules.editors.genealogyeditor.panels.SourceCitationsListPanel sourceCitationsListPanel;
    private javax.swing.JPanel sourcesPanel;
    private javax.swing.JLabel wifeBirthDateLabel;
    private javax.swing.JLabel wifeBirthDateLabelDate;
    private javax.swing.JLabel wifeDeathDateLabel;
    private javax.swing.JLabel wifeDeathDateLabelDate;
    private ancestris.modules.editors.genealogyeditor.beans.ImageBean wifeImageBean;
    private javax.swing.JTextField wifeNameTextField;
    // End of variables declaration//GEN-END:variables

    @Override
    public Component getEditorComponent() {
        return this;
    }

    @Override
    protected String getTitleImpl() {
        if (context == null || context.getEntity() == null) {
            return "";
        }
        return (new ViewContext(context.getEntity())).getText();
    }

    @Override
    public ViewContext getContext() {
        return new ViewContext(context);
    }

    @Override
    protected void setContextImpl(Context context) {
        this.context = context;

        Entity entity = context.getEntity();
        if (entity != null && entity instanceof Fam) {

            mFamily = (Fam) entity;

            setTitle(NbBundle.getMessage(FamilyEditor.class, isNew() ? "FamilyEditor.create.title" : "FamilyEditor.edit.title", mFamily));
            if (!mFamily.getGedcom().getGrammar().getVersion().equals("5.5.1")) {
                privateRecordToggleButton.setVisible(false);
            }

            /*
             * n @<XREF:FAM>@ FAM
             */
            familyIDTextField.setText(mFamily.getId());

            /*
             * +1 RESN <RESTRICTION_NOTICE>
             */
            Property restrictionNotice = mFamily.getProperty("RESN", true);
            if (restrictionNotice != null) {
                privateRecordToggleButton.setSelected(true);
            }

            /*
             * +1 <<FAMILY_EVENT_STRUCTURE>>
             */
            ArrayList<Property> familyEvents = new ArrayList<Property>();
            for (Property property : mFamily.getProperties()) {
                if (mFamilyEventsTags.contains(property.getTag())) {
                    familyEvents.add(property);
                }
            }
            mEventsListModel.clear();
            mEventsListModel.addAll(familyEvents);
            seteventTypeComboBox(familyEvents);
            eventsList.setSelectedIndex(0);

            /*
             * +1 HUSB @<XREF:INDI>@
             */
            mHusband = mFamily.getHusband();
            if (mHusband != null) {
                husbandNameTextField.setText(mHusband.getName());
                husbandBirthDateLabelDate.setText(mHusband.getBirthAsString());
                husbandDeathDateLabelDate.setText(mHusband.getDeathAsString());

                for (Property multiMediaObject : mHusband.getProperties("OBJE")) {
                    String objetFormat = null;
                    if (mFamily.getGedcom().getGrammar().getVersion().equals("5.5.1")) {
                        if (multiMediaObject instanceof PropertyMedia) {
                            Property propertyFormat = ((Media) ((PropertyMedia) multiMediaObject).getTargetEntity()).getPropertyByPath(".:FILE:FORM");
                            if (propertyFormat != null) {
                                objetFormat = propertyFormat.getValue();
                            }
                        } else {
                            Property propertyFormat = multiMediaObject.getPropertyByPath(".:FILE:FORM");
                            if (propertyFormat != null) {
                                objetFormat = propertyFormat.getValue();
                            }
                        }
                    } else {
                        if (multiMediaObject instanceof PropertyMedia) {
                            Property propertyFormat = ((Media) ((PropertyMedia) multiMediaObject).getTargetEntity()).getProperty("FORM");
                            if (propertyFormat != null) {
                                objetFormat = propertyFormat.getValue();
                            }
                        } else {
                            Property propertyFormat = multiMediaObject.getProperty("FORM");
                            if (propertyFormat != null) {
                                objetFormat = propertyFormat.getValue();
                            }
                        }
                    }

                    // bmp | gif | jpeg
                    if (objetFormat != null && (objetFormat.equals("bmp") || objetFormat.equals("gif") || objetFormat.equals("jpeg") || objetFormat.equals("jpg") || objetFormat.equals("png"))) {
                        husbandImageBean.setImage(multiMediaObject);
                        break;
                    }
                }
                addHusbandButton.setVisible(false);
                linkToHusbandButton.setVisible(false);
                removeHusbandButton.setVisible(true);
                editHusbandButton.setVisible(true);
            } else {
                addHusbandButton.setVisible(true);
                linkToHusbandButton.setVisible(true);
                removeHusbandButton.setVisible(false);
                editHusbandButton.setVisible(false);
            }

            /*
             * +1 WIFE @<XREF:INDI>@
             */
            mWife = mFamily.getWife();
            if (mWife != null) {
                wifeNameTextField.setText(mWife.getName());
                wifeBirthDateLabelDate.setText(mWife.getBirthAsString());
                wifeDeathDateLabelDate.setText(mWife.getDeathAsString());

                for (Property multiMediaObject : mWife.getProperties("OBJE")) {
                    String objetFormat = null;
                    if (mFamily.getGedcom().getGrammar().getVersion().equals("5.5.1")) {
                        if (multiMediaObject instanceof PropertyMedia) {
                            Property propertyFormat = ((Media) ((PropertyMedia) multiMediaObject).getTargetEntity()).getPropertyByPath(".:FILE:FORM");
                            if (propertyFormat != null) {
                                objetFormat = propertyFormat.getValue();
                            }
                        } else {
                            Property propertyFormat = multiMediaObject.getPropertyByPath(".:FILE:FORM");
                            if (propertyFormat != null) {
                                objetFormat = propertyFormat.getValue();
                            }
                        }
                    } else {
                        if (multiMediaObject instanceof PropertyMedia) {
                            Property propertyFormat = ((Media) ((PropertyMedia) multiMediaObject).getTargetEntity()).getProperty("FORM");
                            if (propertyFormat != null) {
                                objetFormat = propertyFormat.getValue();
                            }
                        } else {
                            Property propertyFormat = multiMediaObject.getProperty("FORM");
                            if (propertyFormat != null) {
                                objetFormat = propertyFormat.getValue();
                            }
                        }
                    }

                    // bmp | gif | jpeg
                    if (objetFormat != null && (objetFormat.equals("bmp") || objetFormat.equals("gif") || objetFormat.equals("jpeg") || objetFormat.equals("jpg") || objetFormat.equals("png"))) {
                        wifeImageBean.setImage(multiMediaObject);
                        break;
                    }
                }
                addWifeButton.setVisible(false);
                linkToWifeButton.setVisible(false);
                removeWifeButton.setVisible(true);
                editWifeButton.setVisible(true);
            } else {
                addWifeButton.setVisible(true);
                linkToWifeButton.setVisible(true);
                removeWifeButton.setVisible(false);
                editWifeButton.setVisible(false);
            }

            /*
             * +1 CHIL @<XREF:INDI>@
             */
            childrenTreeTablePanel.set(mFamily, mFamily.getProperties(PropertyChild.class));

            /*
             * +1 NCHI <COUNT_OF_CHILDREN>
             * not used
             *
             * +1 SUBM @<XREF:SUBM>@
             * not used
             *
             * +1 <<LDS_SPOUSE_SEALING>>
             * not used
             *
             * +1 REFN <USER_REFERENCE_NUMBER>
             * not used
             *
             * +2 TYPE <USER_REFERENCE_TYPE>
             * not used
             *
             * +1 RIN <AUTOMATED_RECORD_ID>
             * not used
             */
            /*
             * +1 <<CHANGE_DATE>>
             * Handle by gedcom doUnitOfWork
             */
            Property changeDate = mFamily.getProperty("CHAN");
            if (changeDate != null) {
                changeDateLabeldate.setText(((PropertyChange) changeDate).getDisplayValue());
            }

            /*
             * +1 <<SOURCE_CITATION>>
             */
            sourceCitationsListPanel.set(mFamily, Arrays.asList(mFamily.getProperties("SOUR")));

            /*
             * +1 <<NOTE_STRUCTURE>>
             */
            noteCitationsListPanel.set(mFamily, Arrays.asList(mFamily.getProperties("NOTE")));

            /*
             * +1 <<MULTIMEDIA_LINK>>
             */
            multimediaObjectCitationsListPanel.set(mFamily, Arrays.asList(mFamily.getProperties("OBJE")));
        }
    }

    @Override
    public void commit() throws GedcomException {
        Property restrictionNotice = mFamily.getProperty("RESN", true);
        if (privateRecordToggleButton.isSelected()) {
            if (restrictionNotice == null) {
                mFamily.addProperty("RESN", "confidential");
            }
        } else {
            if (restrictionNotice != null) {
                mFamily.delProperty(restrictionNotice);
            }
        }
        familyEventPanel.commit();
    }

    private void seteventTypeComboBox(List<Property> eventsList) {
        ArrayList<String> localizedEventsList = new ArrayList<String>();

        for (String tag : mFamilyEventsTags) {
            localizedEventsList.add(PropertyTag2Name.getTagName(tag));
        }

        for (Property event : eventsList) {

            /*
             * Filter by gedcom version
             */
            if (event.getTag().equals("RESI") && !mFamily.getGedcom().getGrammar().getVersion().equals("5.5.1")) {
                localizedEventsList.remove(PropertyTag2Name.getTagName(event.getTag()));
            }

            /*
             * Filter by events already present and unique
             */
            if (!event.getTag().equals("EVEN")) {
                localizedEventsList.remove(PropertyTag2Name.getTagName(event.getTag()));
            }
        }

        java.util.Collections.sort(localizedEventsList);

        updateOnGoing = true;
        mEventsModel.removeAllElements();

        mEventsModel.addElement(NbBundle.getMessage(
                IndividualEditor.class, "FamilyEditor.eventTypeComboBox.firstElement.title"));

        for (String tag : localizedEventsList) {
            mEventsModel.addElement(tag);
        }

        updateOnGoing = false;
    }
}
