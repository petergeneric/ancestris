package ancestris.modules.editors.genealogyeditor.panels;

import genj.gedcom.Property;
import javax.swing.InputMap;
import javax.swing.KeyStroke;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.DefaultEditorKit;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;
import org.openide.util.ChangeSupport;

/**
 *
 * @author dominique
 */

/*
 * ADDRESS_STRUCTURE
 * n ADDR <ADDRESS_LINE>
 * +1 CONT <ADDRESS_LINE>
 * +1 ADR1 <ADDRESS_LINE1>
 * +1 ADR2 <ADDRESS_LINE2>
 * +1 ADR3 <ADDRESS_LINE3>
 * +1 CITY <ADDRESS_CITY>
 * +1 STAE <ADDRESS_STATE>
 * +1 POST <ADDRESS_POSTAL_CODE>
 * +1 CTRY <ADDRESS_COUNTRY>
 * n PHON <PHONE_NUMBER>
 * n EMAIL <ADDRESS_EMAIL>
 * n FAX <ADDRESS_FAX>
 * n WWW <ADDRESS_WEB_PAGE>
 */
public class AddressEditorPanel extends javax.swing.JPanel {

    private Property mRoot = null;
    private Property mAddress = null;
    private boolean mAddressModified = false;
    private boolean mAddrLineModified = false;
    private boolean mAddrLine1Modified = false;
    private boolean mAddrLine2Modified = false;
    private boolean mAddrLine3Modified = false;
    private boolean mCityModified = false;
    private boolean mStateModified = false;
    private boolean mPostalCodeModified = false;
    private boolean mCountryModified = false;
    private boolean mPhoneModified = false;
    private boolean mFaxModified = false;
    private boolean meMailAddrModified = false;
    private boolean mHttpAddrModified = false;
    private final ChangeListner changeListner = new ChangeListner();
    private final ChangeSupport changeSupport = new ChangeSupport(AddressEditorPanel.class);

    /**
     * Creates new form AddressEditorPanel
     */
    public AddressEditorPanel() {
        initComponents();
        addressTextArea.getDocument().addDocumentListener(changeListner);
        addressTextArea.getDocument().putProperty("name", "addressTextArea");

        addrLine1TextField.getDocument().addDocumentListener(changeListner);
        addrLine1TextField.getDocument().putProperty("name", "addrLine1TextField");

        addrLine2TextField.getDocument().addDocumentListener(changeListner);
        addrLine2TextField.getDocument().putProperty("name", "addrLine2TextField");

        addrLine3TextField.getDocument().addDocumentListener(changeListner);
        addrLine3TextField.getDocument().putProperty("name", "addrLine3TextField");

        cityTextField.getDocument().addDocumentListener(changeListner);
        cityTextField.getDocument().putProperty("name", "cityTextField");

        postalCodeTextField.getDocument().addDocumentListener(changeListner);
        postalCodeTextField.getDocument().putProperty("name", "postalCodeTextField");

        stateTextField.getDocument().addDocumentListener(changeListner);
        stateTextField.getDocument().putProperty("name", "stateTextField");

        countryTextField.getDocument().addDocumentListener(changeListner);
        countryTextField.getDocument().putProperty("name", "countryTextField");

        phoneTextField.getDocument().addDocumentListener(changeListner);
        phoneTextField.getDocument().putProperty("name", "phoneTextField");

        faxTextField.getDocument().addDocumentListener(changeListner);
        faxTextField.getDocument().putProperty("name", "faxTextField");

        httpAddrTextField.getDocument().addDocumentListener(changeListner);
        httpAddrTextField.getDocument().putProperty("name", "httpAddrTextField");

        eMailAddrTextField.getDocument().addDocumentListener(changeListner);
        eMailAddrTextField.getDocument().putProperty("name", "eMailAddrTextField");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addressPanel = new javax.swing.JPanel();
        AddressPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        addressTextArea = new javax.swing.JTextArea();
        AddressStructurePanel = new javax.swing.JPanel();
        addrLine1TextField = new javax.swing.JTextField();
        addrLine2TextField = new javax.swing.JTextField();
        addrLine3TextField = new javax.swing.JTextField();
        cityLabel = new javax.swing.JLabel();
        cityTextField = new javax.swing.JTextField();
        postalCodeLabel = new javax.swing.JLabel();
        postalCodeTextField = new javax.swing.JTextField();
        countryLabel = new javax.swing.JLabel();
        countryTextField = new javax.swing.JTextField();
        stateLabel = new javax.swing.JLabel();
        stateTextField = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        phoneLabel = new javax.swing.JLabel();
        phoneTextField = new javax.swing.JTextField();
        faxLabel = new javax.swing.JLabel();
        faxTextField = new javax.swing.JTextField();
        httpAddrLabel = new javax.swing.JLabel();
        httpAddrTextField = new javax.swing.JTextField();
        eMailAddrLabel = new javax.swing.JLabel();
        eMailAddrTextField = new javax.swing.JTextField();

        addressPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(AddressEditorPanel.class, "AddressEditorPanel.addressPanel.border.title"))); // NOI18N

        addressTextArea.setColumns(20);
        addressTextArea.setRows(5);
        jScrollPane1.setViewportView(addressTextArea);

        javax.swing.GroupLayout AddressPanelLayout = new javax.swing.GroupLayout(AddressPanel);
        AddressPanel.setLayout(AddressPanelLayout);
        AddressPanelLayout.setHorizontalGroup(
            AddressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        AddressPanelLayout.setVerticalGroup(
            AddressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
        );

        cityLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        cityLabel.setText(org.openide.util.NbBundle.getMessage(AddressEditorPanel.class, "AddressEditorPanel.cityLabel.text")); // NOI18N

        postalCodeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        postalCodeLabel.setText(org.openide.util.NbBundle.getMessage(AddressEditorPanel.class, "AddressEditorPanel.postalCodeLabel.text")); // NOI18N

        countryLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        countryLabel.setText(org.openide.util.NbBundle.getMessage(AddressEditorPanel.class, "AddressEditorPanel.countryLabel.text")); // NOI18N

        stateLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        stateLabel.setText(org.openide.util.NbBundle.getMessage(AddressEditorPanel.class, "AddressEditorPanel.stateLabel.text")); // NOI18N

        javax.swing.GroupLayout AddressStructurePanelLayout = new javax.swing.GroupLayout(AddressStructurePanel);
        AddressStructurePanel.setLayout(AddressStructurePanelLayout);
        AddressStructurePanelLayout.setHorizontalGroup(
            AddressStructurePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AddressStructurePanelLayout.createSequentialGroup()
                .addGroup(AddressStructurePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(countryLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)
                    .addComponent(cityLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AddressStructurePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addrLine1TextField)
                    .addComponent(addrLine2TextField)
                    .addComponent(addrLine3TextField)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AddressStructurePanelLayout.createSequentialGroup()
                        .addGroup(AddressStructurePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(countryTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                            .addComponent(cityTextField))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(AddressStructurePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(postalCodeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE)
                            .addComponent(stateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(AddressStructurePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(postalCodeTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                            .addComponent(stateTextField)))))
        );
        AddressStructurePanelLayout.setVerticalGroup(
            AddressStructurePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AddressStructurePanelLayout.createSequentialGroup()
                .addComponent(addrLine1TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addrLine2TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addrLine3TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AddressStructurePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cityLabel)
                    .addGroup(AddressStructurePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(postalCodeLabel)
                        .addComponent(postalCodeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AddressStructurePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(stateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(AddressStructurePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(countryLabel)
                        .addComponent(countryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(stateLabel))))
        );

        javax.swing.GroupLayout addressPanelLayout = new javax.swing.GroupLayout(addressPanel);
        addressPanel.setLayout(addressPanelLayout);
        addressPanelLayout.setHorizontalGroup(
            addressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addressPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(AddressStructurePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(AddressPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        addressPanelLayout.setVerticalGroup(
            addressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addressPanelLayout.createSequentialGroup()
                .addComponent(AddressPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(AddressStructurePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        AddressPanel.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(AddressEditorPanel.class, "AddressEditorPanel.AddressPanel.AccessibleContext.accessibleName")); // NOI18N

        phoneLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        phoneLabel.setText(org.openide.util.NbBundle.getMessage(AddressEditorPanel.class, "AddressEditorPanel.phoneLabel.text")); // NOI18N

        faxLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        faxLabel.setText(org.openide.util.NbBundle.getMessage(AddressEditorPanel.class, "AddressEditorPanel.faxLabel.text")); // NOI18N

        httpAddrLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        httpAddrLabel.setText(org.openide.util.NbBundle.getMessage(AddressEditorPanel.class, "AddressEditorPanel.httpAddrLabel.text")); // NOI18N

        eMailAddrLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        eMailAddrLabel.setText(org.openide.util.NbBundle.getMessage(AddressEditorPanel.class, "AddressEditorPanel.eMailAddrLabel.text")); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(faxLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(phoneLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(phoneTextField)
                    .addComponent(faxTextField))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(httpAddrLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(eMailAddrLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(httpAddrTextField)
                    .addComponent(eMailAddrTextField)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(httpAddrLabel)
                        .addComponent(httpAddrTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(phoneLabel)
                        .addComponent(phoneTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eMailAddrLabel)
                    .addComponent(eMailAddrTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(faxLabel)
                    .addComponent(faxTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addressPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addressPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AddressPanel;
    private javax.swing.JPanel AddressStructurePanel;
    private javax.swing.JTextField addrLine1TextField;
    private javax.swing.JTextField addrLine2TextField;
    private javax.swing.JTextField addrLine3TextField;
    private javax.swing.JPanel addressPanel;
    private javax.swing.JTextArea addressTextArea;
    private javax.swing.JLabel cityLabel;
    private javax.swing.JTextField cityTextField;
    private javax.swing.JLabel countryLabel;
    private javax.swing.JTextField countryTextField;
    private javax.swing.JLabel eMailAddrLabel;
    private javax.swing.JTextField eMailAddrTextField;
    private javax.swing.JLabel faxLabel;
    private javax.swing.JTextField faxTextField;
    private javax.swing.JLabel httpAddrLabel;
    private javax.swing.JTextField httpAddrTextField;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel phoneLabel;
    private javax.swing.JTextField phoneTextField;
    private javax.swing.JLabel postalCodeLabel;
    private javax.swing.JTextField postalCodeTextField;
    private javax.swing.JLabel stateLabel;
    private javax.swing.JTextField stateTextField;
    // End of variables declaration//GEN-END:variables
    /**
     * Listener
     */
    public void addChangeListener(ChangeListener l) {
        changeSupport.addChangeListener(l);
    }

    /**
     * Listener
     */
    public void removeChangeListener(ChangeListener l) {
        changeSupport.removeChangeListener(l);
    }

    /**
     * @param root the parent property
     *
     * n ADDR <ADDRESS_LINE>
     * +1 CONT <ADDRESS_LINE>
     * +1 ADR1 <ADDRESS_LINE1>
     * +1 ADR2 <ADDRESS_LINE2>
     * +1 ADR3 <ADDRESS_LINE3>
     * +1 CITY <ADDRESS_CITY>
     * +1 STAE <ADDRESS_STATE>
     * +1 POST <ADDRESS_POSTAL_CODE>
     * +1 CTRY <ADDRESS_COUNTRY>
     * n PHON <PHONE_NUMBER>
     * n EMAIL <ADDRESS_EMAIL>
     * n FAX <ADDRESS_FAX>
     * n WWW <ADDRESS_WEB_PAGE>
     */
    public void set(Property root, Property address) {
        mAddress = address;
        mRoot = root;
        changeListner.mute();
/**
 * This part makes CPU explode !!!
 * FIXME later
 * 
        AutoCompleteDecorator.decorate((javax.swing.JTextField) cityTextField, mRoot.getGedcom().getReferenceSet("CITY").getKeys(), false);
        InputMap map = cityTextField.getInputMap();
        map.put(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_BACK_SPACE, 0), DefaultEditorKit.deletePrevCharAction);

        AutoCompleteDecorator.decorate((javax.swing.JTextField) stateTextField, mRoot.getGedcom().getReferenceSet("STAE").getKeys(), false);
        map = stateTextField.getInputMap();
        map.put(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_BACK_SPACE, 0), DefaultEditorKit.deletePrevCharAction);

        AutoCompleteDecorator.decorate((javax.swing.JTextField) postalCodeTextField, mRoot.getGedcom().getReferenceSet("POST").getKeys(), false);
        map = postalCodeTextField.getInputMap();
        map.put(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_BACK_SPACE, 0), DefaultEditorKit.deletePrevCharAction);

        AutoCompleteDecorator.decorate((javax.swing.JTextField) countryTextField, mRoot.getGedcom().getReferenceSet("CTRY").getKeys(), false);
        map = countryTextField.getInputMap();
        map.put(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_BACK_SPACE, 0), DefaultEditorKit.deletePrevCharAction);

***** End of the part that make the CPU explode
*/        
        

//        CardLayout cardLayout = (CardLayout) (addressPanel.getLayout());
        if (mAddress != null) {
//            if (!address.getValue().isEmpty()) {
//                cardLayout.show(addressPanel, "addressCard");
                addressTextArea.setText(address.getValue());
//            } else {
//                cardLayout.show(addressPanel, "AddressStructurecard");
                Property propertyAdr1 = mAddress.getProperty("ADR1");
                addrLine1TextField.setText(propertyAdr1 != null ? propertyAdr1.getValue() : "");

                Property propertyAdr2 = mAddress.getProperty("ADR2");
                addrLine2TextField.setText(propertyAdr2 != null ? propertyAdr2.getValue() : "");

                Property propertyAdr3 = mAddress.getProperty("ADR3");
                addrLine3TextField.setText(propertyAdr3 != null ? propertyAdr3.getValue() : "");

                Property propertyCity = mAddress.getProperty("CITY");
                cityTextField.setText(propertyCity != null ? propertyCity.getValue() : "");

                Property propertyState = mAddress.getProperty("STAE");
                stateTextField.setText(propertyState != null ? propertyState.getValue() : "");

                Property propertyPostalCode = mAddress.getProperty("POST");
                postalCodeTextField.setText(propertyPostalCode != null ? propertyPostalCode.getValue() : "");

                Property propertyCountry = mAddress.getProperty("CTRY");
                countryTextField.setText(propertyCountry != null ? propertyCountry.getValue() : "");
            }
//        } else {
//            cardLayout.show(addressPanel, "AddressStructurecard");
//        }

        Property propertyPhone;
        propertyPhone = mRoot.getProperty("PHON");
        phoneTextField.setText(propertyPhone != null ? propertyPhone.getValue() : "");

        Property propertyFax;
        if (mRoot.getGedcom().getGrammar().getVersion().equals("5.5.1")) {
            propertyFax = mRoot.getProperty("FAX");
        } else {
            propertyFax = mRoot.getProperty("_FAX");
        }
        faxTextField.setText(propertyFax != null ? propertyFax.getValue() : "");

        Property propertyeMailAddr;
        if (mRoot.getGedcom().getGrammar().getVersion().equals("5.5.1")) {

            propertyeMailAddr = mRoot.getProperty("EMAIL");
        } else {
            propertyeMailAddr = mRoot.getProperty("_EMAIL");
        }
        eMailAddrTextField.setText(propertyeMailAddr != null ? propertyeMailAddr.getValue() : "");

        Property propertyhttpAddr;
        if (mRoot.getGedcom().getGrammar().getVersion().equals("5.5.1")) {
            propertyhttpAddr = mRoot.getProperty("WWW");
        } else {
            propertyhttpAddr = mRoot.getProperty("_WWW");
        }
        httpAddrTextField.setText(propertyhttpAddr != null ? propertyhttpAddr.getValue() : "");

        changeListner.unmute();
    }

    public void commit() {
        if (mAddressModified) {
            mAddressModified = false;
            if (mAddress == null) {
                mAddress = mRoot.addProperty("ADDR", addressTextArea.getText());
            } else {
                if (mAddrLineModified) {
                    mAddress.setValue(addressTextArea.getText());
                }
            }

            if (mAddrLine1Modified) {
                mAddrLine1Modified = false;
                Property propertyAdr1 = mAddress.getProperty("ADR1");
                if (propertyAdr1 == null) {
                    mAddress.addProperty("ADR1", addrLine1TextField.getText());
                } else {
                    propertyAdr1.setValue(addrLine1TextField.getText());
                }
            }

            if (mAddrLine2Modified) {
                mAddrLine2Modified = false;
                Property propertyAdr2 = mAddress.getProperty("ADR2");
                if (propertyAdr2 == null) {
                    mAddress.addProperty("ADR2", addrLine2TextField.getText());
                } else {
                    propertyAdr2.setValue(addrLine2TextField.getText());
                }
            }

            if (mAddrLine3Modified) {
                mAddrLine3Modified = false;
                Property propertyAdr3 = mAddress.getProperty("ADR3");
                if (propertyAdr3 == null) {
                    mAddress.addProperty("ADR3", addrLine3TextField.getText());
                } else {
                    propertyAdr3.setValue(addrLine3TextField.getText());
                }
            }

            if (mCityModified) {
                mCityModified = false;
                Property propertyCity = mAddress.getProperty("CITY");
                if (propertyCity == null) {
                    mAddress.addProperty("CITY", cityTextField.getText());
                } else {
                    propertyCity.setValue(cityTextField.getText());
                }
            }

            if (mStateModified) {
                mStateModified = false;
                Property propertyState = mAddress.getProperty("STAE");
                if (propertyState == null) {
                    mAddress.addProperty("STAE", stateTextField.getText());
                } else {
                    propertyState.setValue(stateTextField.getText());
                }
            }

            if (mPostalCodeModified) {
                mPostalCodeModified = false;
                Property propertyPostalCode = mAddress.getProperty("POST");
                if (propertyPostalCode == null) {
                    mAddress.addProperty("POST", postalCodeTextField.getText());
                } else {
                    propertyPostalCode.setValue(postalCodeTextField.getText());
                }
            }

            if (mCountryModified) {
                mCountryModified = false;
                Property propertyCountry = mAddress.getProperty("CTRY");
                if (propertyCountry == null) {
                    mAddress.addProperty("CTRY", countryTextField.getText());
                } else {
                    propertyCountry.setValue(countryTextField.getText());
                }
            }
        }

        if (mPhoneModified) {
            mPhoneModified = false;
            Property propertyPhone = mRoot.getProperty("PHON");
            if (propertyPhone == null) {
                mRoot.addProperty("PHON", phoneTextField.getText());
            } else {
                propertyPhone.setValue(phoneTextField.getText());
            }
        }

        if (mFaxModified) {
            mFaxModified = false;
            if (mRoot.getGedcom().getGrammar().getVersion().equals("5.5.1")) {
                Property propertyFax = mRoot.getProperty("FAX");
                if (propertyFax == null) {
                    mRoot.addProperty("FAX", faxTextField.getText());
                } else {
                    propertyFax.setValue(faxTextField.getText());
                }
            } else {
                Property propertyFax = mRoot.getProperty("_FAX");
                if (propertyFax == null) {
                    mRoot.addProperty("_FAX", faxTextField.getText());
                } else {
                    propertyFax.setValue(faxTextField.getText());
                }
            }
        }

        if (meMailAddrModified) {
            meMailAddrModified = false;
            if (mRoot.getGedcom().getGrammar().getVersion().equals("5.5.1")) {
                Property propertyeMailAddr = mRoot.getProperty("EMAIL");
                if (propertyeMailAddr == null) {
                    mRoot.addProperty("EMAIL", eMailAddrTextField.getText());
                } else {
                    propertyeMailAddr.setValue(eMailAddrTextField.getText());
                }
            } else {
                Property propertyeMailAddr = mRoot.getProperty("_EMAIL");
                if (propertyeMailAddr == null) {
                    mRoot.addProperty("_EMAIL", eMailAddrTextField.getText());
                } else {
                    propertyeMailAddr.setValue(eMailAddrTextField.getText());
                }
            }
        }

        if (mHttpAddrModified) {
            mHttpAddrModified = false;
            if (mRoot.getGedcom().getGrammar().getVersion().equals("5.5.1")) {
                Property propertyhttpAddr = mRoot.getProperty("WWW");
                if (propertyhttpAddr == null) {
                    mRoot.addProperty("WWW", httpAddrTextField.getText());
                } else {
                    propertyhttpAddr.setValue(httpAddrTextField.getText());
                }
            } else {
                Property propertyhttpAddr = mRoot.getProperty("_WWW");
                if (propertyhttpAddr == null) {
                    mRoot.addProperty("_WWW", httpAddrTextField.getText());
                } else {
                    propertyhttpAddr.setValue(httpAddrTextField.getText());
                }
            }
        }
    }

    public class ChangeListner implements DocumentListener {

        private boolean mute = false;

        @Override
        public void insertUpdate(DocumentEvent de) {
            if (!mute) {
                mAddressModified = true;

                Object propertyName = de.getDocument().getProperty("name");
                if (propertyName != null) {
                    if (propertyName.equals("addressTextArea")) {
                        mAddrLineModified = true;
                    }
                    if (propertyName.equals("addrLine1TextField")) {
                        mAddrLine1Modified = true;
                    }
                    if (propertyName.equals("addrLine2TextField")) {
                        mAddrLine2Modified = true;
                    }
                    if (propertyName.equals("addrLine3TextField")) {
                        mAddrLine3Modified = true;
                    }
                    if (propertyName.equals("cityTextField")) {
                        mCityModified = true;
                    }
                    if (propertyName.equals("postalCodeTextField")) {
                        mStateModified = true;
                    }
                    if (propertyName.equals("stateTextField")) {
                        mPostalCodeModified = true;
                    }
                    if (propertyName.equals("countryTextField")) {
                        mCountryModified = true;
                    }
                    if (propertyName.equals("phoneTextField")) {
                        mPhoneModified = true;
                    }
                    if (propertyName.equals("faxTextField")) {
                        mFaxModified = true;
                    }
                    if (propertyName.equals("httpAddrTextField")) {
                        meMailAddrModified = true;
                    }
                    if (propertyName.equals("eMailAddrTextField")) {
                        mHttpAddrModified = true;
                    }

                    changeSupport.fireChange();
                }
            }
        }

        @Override
        public void removeUpdate(DocumentEvent de) {
            if (!mute) {
                mAddressModified = true;

                Object propertyName = de.getDocument().getProperty("name");
                if (propertyName != null) {
                    if (propertyName.equals("addressTextArea")) {
                        mAddrLineModified = true;
                    }
                    if (propertyName.equals("addrLine1TextField")) {
                        mAddrLine1Modified = true;
                    }
                    if (propertyName.equals("addrLine2TextField")) {
                        mAddrLine2Modified = true;
                    }
                    if (propertyName.equals("addrLine3TextField")) {
                        mAddrLine3Modified = true;
                    }
                    if (propertyName.equals("cityTextField")) {
                        mCityModified = true;
                    }
                    if (propertyName.equals("postalCodeTextField")) {
                        mStateModified = true;
                    }
                    if (propertyName.equals("stateTextField")) {
                        mPostalCodeModified = true;
                    }
                    if (propertyName.equals("countryTextField")) {
                        mCountryModified = true;
                    }
                    if (propertyName.equals("phoneTextField")) {
                        mPhoneModified = true;
                    }
                    if (propertyName.equals("faxTextField")) {
                        mFaxModified = true;
                    }
                    if (propertyName.equals("httpAddrTextField")) {
                        meMailAddrModified = true;
                    }
                    if (propertyName.equals("eMailAddrTextField")) {
                        mHttpAddrModified = true;
                    }

                    changeSupport.fireChange();
                }
            }
        }

        @Override
        public void changedUpdate(DocumentEvent de) {
            if (!mute) {
                mAddressModified = true;

                Object propertyName = de.getDocument().getProperty("name");
                if (propertyName != null) {
                    if (propertyName.equals("addressTextArea")) {
                        mAddrLineModified = true;
                    }
                    if (propertyName.equals("addrLine1TextField")) {
                        mAddrLine1Modified = true;
                    }
                    if (propertyName.equals("addrLine2TextField")) {
                        mAddrLine2Modified = true;
                    }
                    if (propertyName.equals("addrLine3TextField")) {
                        mAddrLine3Modified = true;
                    }
                    if (propertyName.equals("cityTextField")) {
                        mCityModified = true;
                    }
                    if (propertyName.equals("postalCodeTextField")) {
                        mStateModified = true;
                    }
                    if (propertyName.equals("stateTextField")) {
                        mPostalCodeModified = true;
                    }
                    if (propertyName.equals("countryTextField")) {
                        mCountryModified = true;
                    }
                    if (propertyName.equals("phoneTextField")) {
                        mPhoneModified = true;
                    }
                    if (propertyName.equals("faxTextField")) {
                        mFaxModified = true;
                    }
                    if (propertyName.equals("httpAddrTextField")) {
                        meMailAddrModified = true;
                    }
                    if (propertyName.equals("eMailAddrTextField")) {
                        mHttpAddrModified = true;
                    }

                    changeSupport.fireChange();
                }
            }
        }

        public void mute() {
            mute = true;
        }

        public void unmute() {
            mute = false;
        }
    }
}
