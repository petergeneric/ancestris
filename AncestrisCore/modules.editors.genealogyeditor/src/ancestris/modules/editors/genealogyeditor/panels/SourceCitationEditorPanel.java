package ancestris.modules.editors.genealogyeditor.panels;

import ancestris.modules.editors.genealogyeditor.editors.SourceEditor;
import ancestris.modules.editors.genealogyeditor.utilities.PropertyTag2Name;
import ancestris.modules.editors.genealogyeditor.models.ConfidenceLevelComboBoxModel;
import ancestris.modules.editors.genealogyeditor.models.EventsRoleComboBoxModel;
import ancestris.util.swing.DialogManager.ADialog;
import genj.gedcom.*;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.DefaultComboBoxModel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.openide.DialogDescriptor;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle;

/**
 *
 * @author dominique
 *
 * SOURCE_CITATION:= [ pointer to source record (preferred) n SOUR @<XREF:SOUR>@
 * +1 PAGE <WHERE_WITHIN_SOURCE>
 * +1 EVEN <EVENT_TYPE_CITED_FROM>
 * +2 ROLE <ROLE_IN_EVENT>
 * +1 DATA +2 DATE <ENTRY_RECORDING_DATE>
 * +2 TEXT <TEXT_FROM_SOURCE>
 * +3 [CONC|CONT] <TEXT_FROM_SOURCE>
 * +1 <<MULTIMEDIA_LINK>> +1 <<NOTE_STRUCTURE>> +1 QUAY <CERTAINTY_ASSESSMENT>
 * | Systems not using source records n SOUR <SOURCE_DESCRIPTION>
 * +1 [CONC|CONT] <SOURCE_DESCRIPTION>
 * +1 TEXT <TEXT_FROM_SOURCE>
 * +2 [CONC|CONT] <TEXT_FROM_SOURCE>
 * +1 <<MULTIMEDIA_LINK>> +1 <<NOTE_STRUCTURE>> +1 QUAY <CERTAINTY_ASSESSMENT> ]
 */
public class SourceCitationEditorPanel extends javax.swing.JPanel {

    private Property mRoot;
    private Source mReferencedSource = null;
    private Property mSourceCitation = null;
    private boolean mEventTypeModified = false;
    private boolean mEventRoleModified = false;
    private boolean mDataQualityModified = false;
    private boolean mSourceTextModified = false;
    private boolean mSourceReferencedTitleModified = false;
    private boolean mPageModified = false;
    private final String[] mEventsTags = {
        // Individual Events
        "ADOP",
        "BIRT",
        "BAPM",
        "BARM",
        "BASM",
        "BLES",
        "BURI",
        "CENS",
        "CHR",
        "CHRA",
        "CONF",
        "CREM",
        "DEAT",
        "EMIG",
        "FCOM",
        "GRAD",
        "IMMI",
        "NATU",
        "ORDN",
        "RETI",
        "PROB",
        "WILL",
        // Family Events
        "ANUL",
        "CENS",
        "DIV",
        "DIVF",
        "ENGA",
        "MARR",
        "MARB",
        "MARC",
        "MARL",
        "MARS",
        // common
        "EVEN"
    };
    private final DefaultComboBoxModel<String> mEventsModel = new DefaultComboBoxModel<String>(new String[]{});

    /**
     * Creates new form SourceCitationEditorPanel
     */
    public SourceCitationEditorPanel() {
        ArrayList<String> localizedEventsList = new ArrayList<String>();

        for (String tag : mEventsTags) {
            localizedEventsList.add(PropertyTag2Name.getTagName(tag));
        }

        java.util.Collections.sort(localizedEventsList);

        mEventsModel.removeAllElements();

        mEventsModel.addElement("");

        for (String tag : localizedEventsList) {
            mEventsModel.addElement(tag);
        }
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SourceReferencePanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        sourceReferencedTitleLabel = new javax.swing.JLabel();
        addSourceButton = new javax.swing.JButton();
        editSourceButton = new javax.swing.JButton();
        linkToSourceButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        sourceReferencedTitleTextArea = new javax.swing.JTextArea();
        referencedEventComboBox = new javax.swing.JComboBox();
        referencedEventLabel = new javax.swing.JLabel();
        pageLabel = new javax.swing.JLabel();
        pageTextField = new javax.swing.JTextField();
        eventRoleLabel = new javax.swing.JLabel();
        eventRoleComboBox = new javax.swing.JComboBox<String>();
        recordingDateLabel = new javax.swing.JLabel();
        recordingDate = new ancestris.modules.beans.ADateBean();
        jLabel5 = new javax.swing.JLabel();
        dataQualityComboBox = new javax.swing.JComboBox<String>();
        sourceCitationTabbedPane = new javax.swing.JTabbedPane();
        SourceDataPanel = new javax.swing.JPanel();
        sourceDataScrollPane = new javax.swing.JScrollPane();
        sourceDataTextArea = new javax.swing.JTextArea();
        notesPanel = new javax.swing.JPanel();
        noteCitationsTablePanel = new ancestris.modules.editors.genealogyeditor.panels.NoteCitationsTablePanel();
        multiMediaPanel = new javax.swing.JPanel();
        multimediaObjectCitationsTablePanel = new ancestris.modules.editors.genealogyeditor.panels.MultimediaObjectCitationsTablePanel();

        sourceReferencedTitleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        sourceReferencedTitleLabel.setText(org.openide.util.NbBundle.getMessage(SourceCitationEditorPanel.class, "SourceCitationEditorPanel.sourceReferencedTitleLabel.text")); // NOI18N

        addSourceButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/edit_add.png"))); // NOI18N
        addSourceButton.setToolTipText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("SourceCitationEditorPanel.addSourceButton.toolTipText"), new Object[] {})); // NOI18N
        addSourceButton.setFocusable(false);
        addSourceButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addSourceButton.setMaximumSize(new java.awt.Dimension(26, 26));
        addSourceButton.setMinimumSize(new java.awt.Dimension(26, 26));
        addSourceButton.setPreferredSize(new java.awt.Dimension(26, 26));
        addSourceButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        addSourceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSourceButtonActionPerformed(evt);
            }
        });

        editSourceButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/edit.png"))); // NOI18N
        editSourceButton.setToolTipText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("SourceCitationEditorPanel.editSourceButton.toolTipText"), new Object[] {})); // NOI18N
        editSourceButton.setFocusable(false);
        editSourceButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        editSourceButton.setMaximumSize(new java.awt.Dimension(26, 26));
        editSourceButton.setMinimumSize(new java.awt.Dimension(26, 26));
        editSourceButton.setPreferredSize(new java.awt.Dimension(26, 26));
        editSourceButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        editSourceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editSourceButtonActionPerformed(evt);
            }
        });

        linkToSourceButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/link_add.png"))); // NOI18N
        linkToSourceButton.setToolTipText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("SourceCitationEditorPanel.linkToSourceButton.toolTipText"), new Object[] {})); // NOI18N
        linkToSourceButton.setFocusable(false);
        linkToSourceButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        linkToSourceButton.setMaximumSize(new java.awt.Dimension(26, 26));
        linkToSourceButton.setMinimumSize(new java.awt.Dimension(26, 26));
        linkToSourceButton.setPreferredSize(new java.awt.Dimension(26, 26));
        linkToSourceButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        linkToSourceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linkToSourceButtonActionPerformed(evt);
            }
        });

        sourceReferencedTitleTextArea.setBackground(javax.swing.UIManager.getDefaults().getColor("TextField.inactiveBackground"));
        sourceReferencedTitleTextArea.setColumns(20);
        sourceReferencedTitleTextArea.setLineWrap(true);
        sourceReferencedTitleTextArea.setRows(2);
        sourceReferencedTitleTextArea.setWrapStyleWord(true);
        jScrollPane1.setViewportView(sourceReferencedTitleTextArea);

        referencedEventComboBox.setModel(mEventsModel);
        referencedEventComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                referencedEventComboBoxActionPerformed(evt);
            }
        });

        referencedEventLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        referencedEventLabel.setText(org.openide.util.NbBundle.getMessage(SourceCitationEditorPanel.class, "SourceCitationEditorPanel.referencedEventLabel.text")); // NOI18N

        pageLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        pageLabel.setText(org.openide.util.NbBundle.getMessage(SourceCitationEditorPanel.class, "SourceCitationEditorPanel.pageLabel.text")); // NOI18N

        pageTextField.setColumns(4);
        pageTextField.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void changedUpdate(DocumentEvent e) {
                mPageModified = true;
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                mPageModified = true;
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                mPageModified = true;
            }
        });
        pageTextField.setToolTipText(org.openide.util.NbBundle.getMessage(SourceCitationEditorPanel.class, "SourceCitationEditorPanel.pageTextField.toolTipText")); // NOI18N

        eventRoleLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        eventRoleLabel.setText(org.openide.util.NbBundle.getMessage(SourceCitationEditorPanel.class, "SourceCitationEditorPanel.eventRoleLabel.text")); // NOI18N

        eventRoleComboBox.setEditable(true);
        eventRoleComboBox.setModel(new EventsRoleComboBoxModel());
        eventRoleComboBox.setToolTipText(org.openide.util.NbBundle.getMessage(SourceCitationEditorPanel.class, "SourceCitationEditorPanel.eventRoleComboBox.toolTipText")); // NOI18N
        eventRoleComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eventRoleComboBoxActionPerformed(evt);
            }
        });

        recordingDateLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        recordingDateLabel.setText(org.openide.util.NbBundle.getMessage(SourceCitationEditorPanel.class, "SourceCitationEditorPanel.recordingDateLabel.text")); // NOI18N

        recordingDate.setToolTipText(org.openide.util.NbBundle.getMessage(SourceCitationEditorPanel.class, "SourceCitationEditorPanel.recordingDate.toolTipText")); // NOI18N

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText(org.openide.util.NbBundle.getMessage(SourceCitationEditorPanel.class, "SourceCitationEditorPanel.jLabel5.text")); // NOI18N

        dataQualityComboBox.setModel(new ConfidenceLevelComboBoxModel ());
        dataQualityComboBox.setToolTipText(org.openide.util.NbBundle.getMessage(SourceCitationEditorPanel.class, "SourceCitationEditorPanel.dataQualityComboBox.toolTipText")); // NOI18N
        dataQualityComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dataQualityComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(sourceReferencedTitleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(linkToSourceButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editSourceButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addSourceButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jScrollPane1)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(referencedEventLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(eventRoleLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(eventRoleComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(referencedEventComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dataQualityComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(recordingDateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(recordingDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pageTextField)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(sourceReferencedTitleLabel)
                    .addComponent(linkToSourceButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editSourceButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addSourceButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(referencedEventLabel)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(pageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(referencedEventComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(pageLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(eventRoleLabel)
                            .addComponent(eventRoleComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(recordingDateLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(dataQualityComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(recordingDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout SourceReferencePanelLayout = new javax.swing.GroupLayout(SourceReferencePanel);
        SourceReferencePanel.setLayout(SourceReferencePanelLayout);
        SourceReferencePanelLayout.setHorizontalGroup(
            SourceReferencePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        SourceReferencePanelLayout.setVerticalGroup(
            SourceReferencePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SourceReferencePanelLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        sourceCitationTabbedPane.setToolTipText(org.openide.util.NbBundle.getMessage(SourceCitationEditorPanel.class, "SourceCitationEditorPanel.sourceCitationTabbedPane.toolTipText")); // NOI18N

        SourceDataPanel.setToolTipText(org.openide.util.NbBundle.getMessage(SourceCitationEditorPanel.class, "SourceCitationEditorPanel.SourceDataPanel.toolTipText")); // NOI18N

        sourceDataTextArea.setColumns(20);
        sourceDataTextArea.setLineWrap(true);
        sourceDataTextArea.setRows(5);
        sourceDataTextArea.setWrapStyleWord(true);
        sourceDataTextArea.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void changedUpdate(DocumentEvent e) {
                mSourceTextModified = true;
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                mSourceTextModified = true;
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                mSourceTextModified = true;
            }
        });
        sourceDataScrollPane.setViewportView(sourceDataTextArea);

        javax.swing.GroupLayout SourceDataPanelLayout = new javax.swing.GroupLayout(SourceDataPanel);
        SourceDataPanel.setLayout(SourceDataPanelLayout);
        SourceDataPanelLayout.setHorizontalGroup(
            SourceDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sourceDataScrollPane)
        );
        SourceDataPanelLayout.setVerticalGroup(
            SourceDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sourceDataScrollPane)
        );

        sourceCitationTabbedPane.addTab(org.openide.util.NbBundle.getMessage(SourceCitationEditorPanel.class, "SourceCitationEditorPanel.SourceDataPanel.TabConstraints.tabTitle"), new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/source.png")), SourceDataPanel); // NOI18N

        noteCitationsTablePanel.setToolTipText(org.openide.util.NbBundle.getMessage(SourceCitationEditorPanel.class, "SourceCitationEditorPanel.noteCitationsTablePanel.toolTipText")); // NOI18N

        javax.swing.GroupLayout notesPanelLayout = new javax.swing.GroupLayout(notesPanel);
        notesPanel.setLayout(notesPanelLayout);
        notesPanelLayout.setHorizontalGroup(
            notesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(noteCitationsTablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        notesPanelLayout.setVerticalGroup(
            notesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(noteCitationsTablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        sourceCitationTabbedPane.addTab(org.openide.util.NbBundle.getMessage(SourceCitationEditorPanel.class, "SourceCitationEditorPanel.notesPanel.TabConstraints.tabTitle"), new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/Note.png")), notesPanel); // NOI18N

        multiMediaPanel.setToolTipText(org.openide.util.NbBundle.getMessage(SourceCitationEditorPanel.class, "SourceCitationEditorPanel.multiMediaPanel.toolTipText")); // NOI18N

        javax.swing.GroupLayout multiMediaPanelLayout = new javax.swing.GroupLayout(multiMediaPanel);
        multiMediaPanel.setLayout(multiMediaPanelLayout);
        multiMediaPanelLayout.setHorizontalGroup(
            multiMediaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(multimediaObjectCitationsTablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        multiMediaPanelLayout.setVerticalGroup(
            multiMediaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(multimediaObjectCitationsTablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        sourceCitationTabbedPane.addTab(org.openide.util.NbBundle.getMessage(SourceCitationEditorPanel.class, "SourceCitationEditorPanel.multiMediaPanel.TabConstraints.tabTitle"), new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/Media.png")), multiMediaPanel); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sourceCitationTabbedPane)
                    .addComponent(SourceReferencePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(SourceReferencePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sourceCitationTabbedPane)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addSourceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSourceButtonActionPerformed
        Gedcom gedcom = mRoot.getGedcom();
        int undoNb = gedcom.getUndoNb();

        try {
            gedcom.doUnitOfWork(new UnitOfWork() {

                @Override
                public void perform(Gedcom gedcom) throws GedcomException {
                    mReferencedSource = (Source) gedcom.createEntity(Gedcom.SOUR);
                }
            }); // end of doUnitOfWork

            SourceEditor sourceEditor = new SourceEditor();
            sourceEditor.setContext(new Context(mReferencedSource));

            if (sourceEditor.showPanel()) {
                gedcom.doUnitOfWork(new UnitOfWork() {

                    @Override
                    public void perform(Gedcom gedcom) throws GedcomException {
                        mSourceCitation.setValue('@' + mReferencedSource.getId() + '@');
                        ((PropertySource) mSourceCitation).link();
                    }
                }); // end of doUnitOfWork
                sourceReferencedTitleTextArea.setText(mReferencedSource.getTitle());
                addSourceButton.setVisible(false);
                editSourceButton.setVisible(true);
            } else {
                while (gedcom.getUndoNb() > undoNb && gedcom.canUndo()) {
                    gedcom.undoUnitOfWork(false);
                }
            }
        } catch (GedcomException ex) {
            Exceptions.printStackTrace(ex);
        }
    }//GEN-LAST:event_addSourceButtonActionPerformed

    private void editSourceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editSourceButtonActionPerformed
        if (mReferencedSource != null) {
            Gedcom gedcom = mRoot.getGedcom();

            SourceEditor sourceEditor = new SourceEditor();
            sourceEditor.setContext(new Context(mReferencedSource));
            sourceEditor.showPanel();
        }
    }//GEN-LAST:event_editSourceButtonActionPerformed

    private void linkToSourceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linkToSourceButtonActionPerformed

        SourcesTablePanel sourcesTablePanel = new SourcesTablePanel(mRoot.getGedcom());
        sourcesTablePanel.setToolBarVisible(false);

        ADialog sourcesTableDialog = new ADialog(NbBundle.getMessage(PlacesTablePanel.class,
                "sourcesTableDialog.linkTo.title"), sourcesTablePanel);
        sourcesTableDialog.setDialogId(SourcesTablePanel.class.getName());

        if (sourcesTableDialog.show() == DialogDescriptor.OK_OPTION) {
            if (sourcesTablePanel.getSelectedSource() != null) {
                if (mReferencedSource != null) {
                    ((PropertySource) mSourceCitation).unlink();
                }
                mReferencedSource = sourcesTablePanel.getSelectedSource();
                sourceReferencedTitleTextArea.setText(mReferencedSource.getTitle());
                try {
                    mRoot.getGedcom().doUnitOfWork(new UnitOfWork() {

                        @Override
                        public void perform(Gedcom gedcom) throws GedcomException {
                            mSourceCitation.setValue('@' + mReferencedSource.getId() + '@');
                            ((PropertySource) mSourceCitation).link();
                        }
                    }); // end of doUnitOfWork
                } catch (GedcomException ex) {
                    Exceptions.printStackTrace(ex);
                }

                addSourceButton.setVisible(false);
                editSourceButton.setVisible(true);
            }
        }
    }//GEN-LAST:event_linkToSourceButtonActionPerformed

    private void eventRoleComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eventRoleComboBoxActionPerformed
        mEventRoleModified = true;
    }//GEN-LAST:event_eventRoleComboBoxActionPerformed

    private void dataQualityComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dataQualityComboBoxActionPerformed
        mDataQualityModified = true;
    }//GEN-LAST:event_dataQualityComboBoxActionPerformed

    private void referencedEventComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_referencedEventComboBoxActionPerformed
        mEventTypeModified = true;
    }//GEN-LAST:event_referencedEventComboBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel SourceDataPanel;
    private javax.swing.JPanel SourceReferencePanel;
    private javax.swing.JButton addSourceButton;
    private javax.swing.JComboBox<String> dataQualityComboBox;
    private javax.swing.JButton editSourceButton;
    private javax.swing.JComboBox<String> eventRoleComboBox;
    private javax.swing.JLabel eventRoleLabel;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton linkToSourceButton;
    private javax.swing.JPanel multiMediaPanel;
    private ancestris.modules.editors.genealogyeditor.panels.MultimediaObjectCitationsTablePanel multimediaObjectCitationsTablePanel;
    private ancestris.modules.editors.genealogyeditor.panels.NoteCitationsTablePanel noteCitationsTablePanel;
    private javax.swing.JPanel notesPanel;
    private javax.swing.JLabel pageLabel;
    private javax.swing.JTextField pageTextField;
    private ancestris.modules.beans.ADateBean recordingDate;
    private javax.swing.JLabel recordingDateLabel;
    private javax.swing.JComboBox referencedEventComboBox;
    private javax.swing.JLabel referencedEventLabel;
    private javax.swing.JTabbedPane sourceCitationTabbedPane;
    private javax.swing.JScrollPane sourceDataScrollPane;
    private javax.swing.JTextArea sourceDataTextArea;
    private javax.swing.JLabel sourceReferencedTitleLabel;
    private javax.swing.JTextArea sourceReferencedTitleTextArea;
    // End of variables declaration//GEN-END:variables
    // SOURCE_CITATION:=
    // [ pointer to source record (preferred)
    // n SOUR @<XREF:SOUR>@ {1:1} (pointer to source record)
    // +1 PAGE <WHERE_WITHIN_SOURCE> {0:1}
    // +1 EVEN <EVENT_TYPE_CITED_FROM> {0:1}
    // +2 ROLE <ROLE_IN_EVENT> {0:1}
    // +1 DATA {0:1}
    // +2 DATE <ENTRY_RECORDING_DATE> {0:1}
    // +2 TEXT <TEXT_FROM_SOURCE> {0:M}
    // +3 [ CONC | CONT ] <TEXT_FROM_SOURCE> {0:M}
    // +1 QUAY <CERTAINTY_ASSESSMENT> {0:1}
    // +1 <<MULTIMEDIA_LINK>> {0:M}
    // +1 <<NOTE_STRUCTURE>> {0:M}
    // | Systems not using source records
    // n SOUR <SOURCE_DESCRIPTION>
    // +1 [CONC|CONT] <SOURCE_DESCRIPTION>
    // +1 TEXT <TEXT_FROM_SOURCE>
    // +2 [CONC|CONT] <TEXT_FROM_SOURCE>
    // +1 QUAY <CERTAINTY_ASSESSMENT>ecords
    // +1 <<MULTIMEDIA_LINK>>
    // +1 <<NOTE_STRUCTURE>>
    //]

    public void set(Property root, final Property sourceCitation) {

        mRoot = root;
        mSourceCitation = sourceCitation;

        if (sourceCitation instanceof PropertySource) {
            mReferencedSource = (Source) ((PropertySource) sourceCitation).getTargetEntity();

            sourceReferencedTitleTextArea.setEditable(false);

            if (mReferencedSource != null) {
                addSourceButton.setVisible(false);

                sourceReferencedTitleTextArea.setText(mReferencedSource.getTitle());
                mSourceReferencedTitleModified = false;
            } else {
                editSourceButton.setVisible(false);
                sourceReferencedTitleTextArea.setText("");
            }

            Property page = sourceCitation.getProperty("PAGE");
            if (page != null) {
                pageTextField.setText(page.getValue());
            } else {
                pageTextField.setText("");
            }

            Property eventType = sourceCitation.getProperty("EVEN");
            if (eventType != null) {
                referencedEventComboBox.setSelectedItem(PropertyTag2Name.getTagName(eventType.getValue()));
            } else {
                referencedEventComboBox.setSelectedItem("");
            }
            mEventTypeModified = false;

            Property eventRole = sourceCitation.getProperty("ROLE");
            if (eventRole != null) {
                /*
                 * Gedcom Predefined Roles are CHIL | HUSB | WIFE | MOTH | FATH | SPOU 
                 */
                if (eventRole.getValue().equals("CHIL")) {
                    eventRoleComboBox.setSelectedIndex(1);
                } else if (eventRole.getValue().equals("HUSB")) {
                    eventRoleComboBox.setSelectedIndex(2);
                } else if (eventRole.getValue().equals("WIFE")) {
                    eventRoleComboBox.setSelectedIndex(3);
                } else if (eventRole.getValue().equals("MOTH")) {
                    eventRoleComboBox.setSelectedIndex(4);
                } else if (eventRole.getValue().equals("FATH")) {
                    eventRoleComboBox.setSelectedIndex(5);
                } else if (eventRole.getValue().equals("SPOU")) {
                    eventRoleComboBox.setSelectedIndex(6);
                } else {
                    eventRoleComboBox.setSelectedItem(eventRole.getValue());
                }
            } else {
                eventRoleComboBox.setSelectedIndex(0);
            }

            mEventRoleModified = false;

            final Property sourceData = sourceCitation.getProperty("DATA");
            if (sourceData != null) {
                PropertyDate date = (PropertyDate) sourceData.getProperty("DATE", false);
                if (date == null) {
//                    try {
//                        mRoot.getGedcom().doUnitOfWork(new UnitOfWork() {

//                            @Override
//                            public void perform(Gedcom gedcom) throws GedcomException {
                    recordingDate.setContext(sourceData, null);
//                            }
//                        }); // end of doUnitOfWork
//                    } catch (GedcomException ex) {
//                        Exceptions.printStackTrace(ex);
//                    }
                } else {
                    recordingDate.setContext(date);
                }

                Property sourceText = sourceData.getProperty("TEXT");
                if (sourceText != null) {
                    sourceDataTextArea.setText(sourceText.getValue());
                    mSourceTextModified = false;
                } else {
                    mSourceTextModified = false;
                }
            } else {
//                try {
//                    mRoot.getGedcom().doUnitOfWork(new UnitOfWork() {

//                        @Override
//                        public void perform(Gedcom gedcom) throws GedcomException {
//                            Property sourceData = sourceCitation.addProperty("DATA", "");
                recordingDate.setContext(sourceCitation, new TagPath(".:DATA"), (Property) null, (String) null);
//                        }
//                    }); // end of doUnitOfWork
//                } catch (GedcomException ex) {
//                    Exceptions.printStackTrace(ex);
//               }
            }
        } else {
            addSourceButton.setVisible(false);
            linkToSourceButton.setVisible(false);
            editSourceButton.setVisible(false);

            pageLabel.setVisible(false);
            pageTextField.setVisible(false);

            referencedEventLabel.setVisible(false);
            referencedEventComboBox.setVisible(false);

            eventRoleLabel.setVisible(false);
            eventRoleComboBox.setVisible(false);

            recordingDateLabel.setVisible(false);
            recordingDate.setVisible(false);

            sourceReferencedTitleTextArea.setText(sourceCitation.getValue());
            mSourceReferencedTitleModified = false;

            Property sourceText = sourceCitation.getProperty("TEXT");
            if (sourceText != null) {
                sourceDataTextArea.setText(sourceText.getValue());
                mSourceTextModified = false;
            } else {
                sourceDataTextArea.setText("");
                mSourceTextModified = false;
            }
        }

        Property dataQuality = sourceCitation.getProperty("QUAY");
        if (dataQuality != null) {
            dataQualityComboBox.setSelectedIndex(Integer.parseInt(dataQuality.getValue()) + 1);
        } else {
            dataQualityComboBox.setSelectedIndex(0);
        }
        mDataQualityModified = false;

        noteCitationsTablePanel.set(mSourceCitation, Arrays.asList(mSourceCitation.getProperties("NOTE")));
        multimediaObjectCitationsTablePanel.set(mSourceCitation, Arrays.asList(mSourceCitation.getProperties("OBJE")));
    }

    public void commit() {
        if (mSourceCitation != null && mSourceCitation instanceof PropertySource) {
            if (mEventTypeModified) {
                mEventTypeModified = false;
                Property eventType = mSourceCitation.getProperty("EVEN");
                if (eventType == null) {
                    mSourceCitation.addProperty("EVEN", PropertyTag2Name.getPropertyTag(referencedEventComboBox.getSelectedItem().toString()));
                } else {
                    eventType.setValue(PropertyTag2Name.getPropertyTag(referencedEventComboBox.getSelectedItem().toString()));
                }
            }

            if (mEventRoleModified) {
                mEventRoleModified = false;
                Property eventRole = mSourceCitation.getProperty("ROLE");
                if (eventRole == null) {
                    if (eventRoleComboBox.getSelectedIndex() == 0) {
                        mSourceCitation.addProperty("ROLE", eventRoleComboBox.getSelectedItem().toString());
                    } else if (eventRoleComboBox.getSelectedIndex() == 1) {
                        mSourceCitation.addProperty("ROLE", "CHIL");
                    } else if (eventRoleComboBox.getSelectedIndex() == 2) {
                        mSourceCitation.addProperty("ROLE", "HUSB");
                    } else if (eventRoleComboBox.getSelectedIndex() == 3) {
                        mSourceCitation.addProperty("ROLE", "WIFE");
                    } else if (eventRoleComboBox.getSelectedIndex() == 4) {
                        mSourceCitation.addProperty("ROLE", "MOTH");
                    } else if (eventRoleComboBox.getSelectedIndex() == 5) {
                        mSourceCitation.addProperty("ROLE", "FATH");
                    } else if (eventRoleComboBox.getSelectedIndex() == 6) {
                        mSourceCitation.addProperty("ROLE", "SPOU");
                    }
                } else {
                    if (eventRoleComboBox.getSelectedIndex() == 0) {
                        eventRole.setValue(eventRoleComboBox.getSelectedItem().toString());
                    } else if (eventRoleComboBox.getSelectedIndex() == 1) {
                        eventRole.setValue("CHIL");
                    } else if (eventRoleComboBox.getSelectedIndex() == 2) {
                        eventRole.setValue("HUSB");
                    } else if (eventRoleComboBox.getSelectedIndex() == 3) {
                        eventRole.setValue("WIFE");
                    } else if (eventRoleComboBox.getSelectedIndex() == 4) {
                        eventRole.setValue("MOTH");
                    } else if (eventRoleComboBox.getSelectedIndex() == 5) {
                        eventRole.setValue("FATH");
                    } else if (eventRoleComboBox.getSelectedIndex() == 6) {
                        eventRole.setValue("SPOU");
                    }
                }
            }

            if (mPageModified) {
                mPageModified = false;
                Property page = mSourceCitation.getProperty("PAGE");
                if (page == null) {
                    mSourceCitation.addProperty("PAGE", pageTextField.getText());
                } else {
                    page.setValue(pageTextField.getText());
                }
            }

            if (mSourceTextModified) {
                mSourceTextModified = false;

                try {
                    recordingDate.commit();
                } catch (GedcomException ex) {
                    Exceptions.printStackTrace(ex);
                }

                Property sourceData = mSourceCitation.getProperty("DATA");
                if (sourceData == null) {
                    sourceData = mSourceCitation.addProperty("DATA", "");
                    sourceData.addProperty("TEXT", sourceDataTextArea.getText());
                } else {
                    Property sourceText = sourceData.getProperty("TEXT");
                    if (sourceText == null) {
                        sourceData.addProperty("TEXT", sourceDataTextArea.getText());
                    } else {
                        sourceText.setValue(sourceDataTextArea.getText());
                    }
                }
            }
        } else {
            mSourceCitation = mRoot.addProperty("SOUR", "");
            if (mSourceReferencedTitleModified) {
                mSourceReferencedTitleModified = false;
                mSourceCitation.setValue(sourceReferencedTitleTextArea.getText());
            }
            if (mSourceTextModified) {
                mSourceTextModified = false;

                Property sourceText = mSourceCitation.getProperty("TEXT");
                if (sourceText == null) {
                    mSourceCitation.addProperty("TEXT", sourceDataTextArea.getText());
                } else {
                    sourceText.setValue(sourceDataTextArea.getText());
                }
            }
        }

        if (mDataQualityModified) {
            mDataQualityModified = false;
            if (dataQualityComboBox.getSelectedIndex() > 0) {
                Property dataQuality = mSourceCitation.getProperty("QUAY");
                if (dataQuality == null) {
                    mSourceCitation.addProperty("QUAY", Integer.toString(dataQualityComboBox.getSelectedIndex() - 1));
                } else {
                    dataQuality.setValue(Integer.toString(dataQualityComboBox.getSelectedIndex() - 1));
                }
            }
        }
    }
}
