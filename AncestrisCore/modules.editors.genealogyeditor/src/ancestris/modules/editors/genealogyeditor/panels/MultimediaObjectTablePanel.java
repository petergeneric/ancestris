package ancestris.modules.editors.genealogyeditor.panels;

import ancestris.modules.editors.genealogyeditor.models.MultiMediaObjectsTableModel;
import ancestris.modules.editors.genealogyeditor.utilities.AriesFilterPanel;
import genj.gedcom.*;
import genj.util.Registry;
import java.util.ArrayList;
import java.util.List;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.RowFilter;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author dominique
 */
public class MultimediaObjectTablePanel extends javax.swing.JPanel implements AriesFilterPanel {

    private final MultiMediaObjectsTableModel mMultiMediaObjectsTableModel = new MultiMediaObjectsTableModel();
    private final TableRowSorter<TableModel> objetTableSorter;
    private Registry registry = null;

    /**
     * Creates new form MultimediaObjectTablePanel
     */
    public MultimediaObjectTablePanel(Property root, List<Media> multimediaObjectsList) {
        initComponents();
        registry = root.getGedcom().getRegistry();
        mMultiMediaObjectsTableModel.addAll(multimediaObjectsList);
        multimediaObjectsTable.setID(MultimediaObjectTablePanel.class.getName());
        objetTableSorter = new TableRowSorter<>(multimediaObjectsTable.getModel());
        loadSettings();
        multimediaObjectsTable.setRowSorter(objetTableSorter);
    }

    @Override
    public void saveFilterSettings() {
        StringBuilder sb = new StringBuilder();
        List<? extends RowSorter.SortKey> sortKeys = objetTableSorter.getSortKeys();
        for (int i = 0; i < sortKeys.size(); i++) {
            RowSorter.SortKey sk = sortKeys.get(i);
            sb.append(sk.getColumn());
            sb.append(',');
            sb.append(sk.getSortOrder().toString());
            sb.append(';');
        }
        registry.put("Aries.MObjectSortOrder", sb.toString());
    }

    private void loadSettings() {
        String sortOrder = registry.get("Aries.MObjectSortOrder", "");
        if ("".equals(sortOrder)) {
            return;
        }
        List<RowSorter.SortKey> sorts = new ArrayList<>();
        for (String columnInfo : sortOrder.split(";")) {
            String[] column = columnInfo.split(",");
            RowSorter.SortKey sk = new RowSorter.SortKey(Integer.valueOf(column[0]), SortOrder.valueOf(column[1]));
            sorts.add(sk);
        }
        if (sorts.size() > 0) {
            objetTableSorter.setSortKeys(sorts);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        filterToolBar = new ancestris.modules.editors.genealogyeditor.utilities.FilterToolBar(this);
        MultimediaObjectTableScrollPane = new javax.swing.JScrollPane();
        multimediaObjectsTable = new ancestris.modules.editors.genealogyeditor.table.EditorTable();

        multimediaObjectsTable.setModel(mMultiMediaObjectsTableModel);
        multimediaObjectsTable.setSelectionBackground(new java.awt.Color(89, 142, 195));
        MultimediaObjectTableScrollPane.setViewportView(multimediaObjectsTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MultimediaObjectTableScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 539, Short.MAX_VALUE)
            .addComponent(filterToolBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(filterToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(MultimediaObjectTableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane MultimediaObjectTableScrollPane;
    private ancestris.modules.editors.genealogyeditor.utilities.FilterToolBar filterToolBar;
    private ancestris.modules.editors.genealogyeditor.table.EditorTable multimediaObjectsTable;
    // End of variables declaration//GEN-END:variables

    public Media getSelectedMultiMediaObject() {
        int selectedRow = multimediaObjectsTable.getSelectedRow();
        if (selectedRow != -1) {
            int rowIndex = multimediaObjectsTable.convertRowIndexToModel(selectedRow);
            return mMultiMediaObjectsTableModel.getValueAt(rowIndex);
        } else {
            return null;
        }
    }

    @Override
    public ComboBoxModel<String> getComboBoxModel() {
        return new DefaultComboBoxModel<>(mMultiMediaObjectsTableModel.getColumnsName());
    }

    @Override
    public void filter(int index, String searchFilter) {
        RowFilter<TableModel, Integer> rf;
        //If current expression doesn't parse, don't update.
        try {
            rf = RowFilter.regexFilter("(?i)" + searchFilter, index);
        } catch (java.util.regex.PatternSyntaxException e) {
            return;
        }

        objetTableSorter.setRowFilter(rf);
    }

}
