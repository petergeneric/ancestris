package ancestris.modules.editors.genealogyeditor.panels;

import ancestris.util.swing.DialogManager;
import ancestris.util.swing.DialogManager.ADialog;
import genj.gedcom.*;
import genj.gedcom.time.Delta;
import java.util.Arrays;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.openide.DialogDescriptor;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle;

/**
 *
 * @author dominique
 */

/*
 *
 * EVENT_DETAIL:=
 * n TYPE <EVENT_OR_FACT_CLASSIFICATION>
 * n DATE <DATE_VALUE>
 * n <<PLACE_STRUCTURE>>
 * n <<ADDRESS_STRUCTURE>>
 * n AGNC <RESPONSIBLE_AGENCY>
 * n RELI <RELIGIOUS_AFFILIATION>
 * n CAUS <CAUSE_OF_EVENT>
 * n RESN <RESTRICTION_NOTICE>
 * n <<NOTE_STRUCTURE>>
 * n <<SOURCE_CITATION>>
 * n <<MULTIMEDIA_LINK>>
 *
 * FAMILY_EVENT_DETAIL:=
 * n HUSB
 * +1 AGE <AGE_AT_EVENT>
 * n WIFE
 * +1 AGE <AGE_AT_EVENT>
 * n <<EVENT_DETAIL>>
 *
 * FAMILY_EVENT_STRUCTURE:=
 * [
 * n [ ANUL | CENS | DIV | DIVF ]
 * +1 <<FAMILY_EVENT_DETAIL>>
 * |
 * n [ ENGA | MARB | MARC ]
 * +1 <<FAMILY_EVENT_DETAIL>>
 * |
 * n MARR [Y|<NULL>]
 * +1 <<FAMILY_EVENT_DETAIL>>
 * |
 * n [ MARL | MARS ]
 * +1 <<FAMILY_EVENT_DETAIL>>
 * |
 * n RESI
 * +1 <<FAMILY_EVENT_DETAIL>>
 * |
 * n EVEN [<EVENT_DESCRIPTOR> | <NULL>]
 * +1 <<FAMILY_EVENT_DETAIL>>
 * ]
 */
public class FamilyEventPanel extends javax.swing.JPanel {

    private Property mEvent = null;
    private Property mRoot;
    private Property mAddress;
    private PropertyPlace mPlace;
    private PropertyDate mDate;
    private boolean updateOnGoing = false;
    private boolean mEventModified = false;
    private boolean mEventCauseModified = false;
    private boolean mHusbandAgeModified = false;
    private boolean mWifeAgeModified = false;
    private boolean mEventNameModified = false;
    private boolean mEventTypeModified = false;

    /**
     * Creates new form EventEditorPanel
     */
    public FamilyEventPanel() {
        initComponents();
        aDateBean.setPreferHorizontal(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        eventInformationTabbedPane = new javax.swing.JTabbedPane();
        EventDetailPanel = new javax.swing.JPanel();
        placeLabel = new javax.swing.JLabel();
        placeTextField = new javax.swing.JTextField();
        privateRecordToggleButton = new javax.swing.JToggleButton();
        EventTypeLabel = new javax.swing.JLabel();
        dateLabel = new javax.swing.JLabel();
        aDateBean = new ancestris.modules.beans.ADateBean();
        eventNameTextField = new javax.swing.JTextField();
        eventCauseLabel = new javax.swing.JLabel();
        eventNameLabel = new javax.swing.JLabel();
        linkToPlaceButton = new javax.swing.JButton();
        editPlaceButton = new javax.swing.JButton();
        addPlaceButton = new javax.swing.JButton();
        husbandAgeLabel = new javax.swing.JLabel();
        husbandAgeTextField = new javax.swing.JTextField();
        wifeAgeLabel = new javax.swing.JLabel();
        wifeAgeTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        eventCauseTextArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        eventTypeTextArea = new javax.swing.JTextArea();
        sourcesPanel = new javax.swing.JPanel();
        sourceCitationsListPanel = new ancestris.modules.editors.genealogyeditor.panels.SourceCitationsListPanel();
        notesPanel = new javax.swing.JPanel();
        noteCitationsListPanel = new ancestris.modules.editors.genealogyeditor.panels.NoteCitationsListPanel();
        galleryPanel = new javax.swing.JPanel();
        multimediaObjectCitationsListPanel = new ancestris.modules.editors.genealogyeditor.panels.MultimediaObjectCitationsListPanel();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        eventInformationTabbedPane.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        eventInformationTabbedPane.setMinimumSize(new java.awt.Dimension(641, 192));
        eventInformationTabbedPane.setPreferredSize(new java.awt.Dimension(641, 192));

        EventDetailPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        placeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        placeLabel.setText(org.openide.util.NbBundle.getMessage(FamilyEventPanel.class, "FamilyEventPanel.placeLabel.text")); // NOI18N

        placeTextField.setEditable(false);
        placeTextField.setText(org.openide.util.NbBundle.getMessage(FamilyEventPanel.class, "FamilyEventPanel.placeTextField.text")); // NOI18N

        privateRecordToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/lock_open.png"))); // NOI18N
        privateRecordToggleButton.setMaximumSize(new java.awt.Dimension(26, 26));
        privateRecordToggleButton.setMinimumSize(new java.awt.Dimension(26, 26));
        privateRecordToggleButton.setPreferredSize(new java.awt.Dimension(26, 26));
        privateRecordToggleButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/lock_open.png"))); // NOI18N
        privateRecordToggleButton.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/lock.png"))); // NOI18N
        privateRecordToggleButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/lock.png"))); // NOI18N

        EventTypeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        EventTypeLabel.setText(org.openide.util.NbBundle.getMessage(FamilyEventPanel.class, "FamilyEventPanel.EventTypeLabel.text")); // NOI18N

        dateLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        dateLabel.setText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("FamilyEventPanel.dateLabel.text"), new Object[] {})); // NOI18N

        eventNameTextField.setEditable(false);
        eventNameTextField.setColumns(15);

        eventCauseLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        eventCauseLabel.setText(org.openide.util.NbBundle.getMessage(FamilyEventPanel.class, "FamilyEventPanel.eventCauseLabel.text")); // NOI18N

        eventNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        eventNameLabel.setText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("FamilyEventPanel.eventNameLabel.text"), new Object[] {})); // NOI18N

        linkToPlaceButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/link_add.png"))); // NOI18N
        linkToPlaceButton.setToolTipText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("FamilyEventPanel.linkToPlaceButton.toolTipText"), new Object[] {})); // NOI18N
        linkToPlaceButton.setFocusable(false);
        linkToPlaceButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        linkToPlaceButton.setMaximumSize(new java.awt.Dimension(26, 26));
        linkToPlaceButton.setMinimumSize(new java.awt.Dimension(26, 26));
        linkToPlaceButton.setPreferredSize(new java.awt.Dimension(26, 26));
        linkToPlaceButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        linkToPlaceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linkToPlaceButtonActionPerformed(evt);
            }
        });

        editPlaceButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/edit.png"))); // NOI18N
        editPlaceButton.setToolTipText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("FamilyEventPanel.editPlaceButton.toolTipText"), new Object[] {})); // NOI18N
        editPlaceButton.setFocusable(false);
        editPlaceButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        editPlaceButton.setMaximumSize(new java.awt.Dimension(26, 26));
        editPlaceButton.setMinimumSize(new java.awt.Dimension(26, 26));
        editPlaceButton.setPreferredSize(new java.awt.Dimension(26, 26));
        editPlaceButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        editPlaceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editPlaceButtonActionPerformed(evt);
            }
        });

        addPlaceButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/edit_add.png"))); // NOI18N
        addPlaceButton.setMaximumSize(new java.awt.Dimension(26, 26));
        addPlaceButton.setMinimumSize(new java.awt.Dimension(26, 26));
        addPlaceButton.setPreferredSize(new java.awt.Dimension(26, 26));
        addPlaceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPlaceButtonActionPerformed(evt);
            }
        });

        husbandAgeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        husbandAgeLabel.setText(org.openide.util.NbBundle.getMessage(FamilyEventPanel.class, "FamilyEventPanel.husbandAgeLabel.text")); // NOI18N

        husbandAgeTextField.setColumns(4);
        husbandAgeTextField.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void changedUpdate(DocumentEvent e) {
                if (!updateOnGoing) {
                    mEventModified = true;
                    mHusbandAgeModified = true;
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                if (!updateOnGoing) {
                    mEventModified = true;
                    mHusbandAgeModified = true;
                }
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                if (!updateOnGoing) {
                    mEventModified = true;
                    mHusbandAgeModified = true;
                }
            }
        });

        wifeAgeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        wifeAgeLabel.setText(org.openide.util.NbBundle.getMessage(FamilyEventPanel.class, "FamilyEventPanel.wifeAgeLabel.text")); // NOI18N

        wifeAgeTextField.setColumns(4);
        wifeAgeTextField.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void changedUpdate(DocumentEvent e) {
                if (!updateOnGoing) {
                    mEventModified = true;
                    mWifeAgeModified = true;
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                if (!updateOnGoing) {
                    mEventModified = true;
                    mWifeAgeModified = true;
                }
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                if (!updateOnGoing) {
                    mEventModified = true;
                    mWifeAgeModified = true;
                }
            }
        });

        eventCauseTextArea.setColumns(20);
        eventCauseTextArea.setLineWrap(true);
        eventCauseTextArea.setRows(2);
        eventCauseTextArea.setWrapStyleWord(true);
        jScrollPane1.setViewportView(eventCauseTextArea);

        eventTypeTextArea.setColumns(20);
        eventTypeTextArea.setLineWrap(true);
        eventTypeTextArea.setRows(2);
        eventTypeTextArea.setWrapStyleWord(true);
        jScrollPane2.setViewportView(eventTypeTextArea);

        javax.swing.GroupLayout EventDetailPanelLayout = new javax.swing.GroupLayout(EventDetailPanel);
        EventDetailPanel.setLayout(EventDetailPanelLayout);
        EventDetailPanelLayout.setHorizontalGroup(
            EventDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EventDetailPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(EventDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(eventNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(placeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(eventCauseLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(EventTypeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE)
                    .addComponent(husbandAgeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(EventDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(EventDetailPanelLayout.createSequentialGroup()
                        .addComponent(placeTextField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addPlaceButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editPlaceButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(linkToPlaceButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(EventDetailPanelLayout.createSequentialGroup()
                        .addComponent(aDateBean, javax.swing.GroupLayout.DEFAULT_SIZE, 515, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(privateRecordToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2)
                    .addGroup(EventDetailPanelLayout.createSequentialGroup()
                        .addComponent(husbandAgeTextField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(wifeAgeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(wifeAgeTextField))
                    .addGroup(EventDetailPanelLayout.createSequentialGroup()
                        .addComponent(eventNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        EventDetailPanelLayout.setVerticalGroup(
            EventDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EventDetailPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(EventDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eventNameLabel)
                    .addComponent(eventNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(EventDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(EventDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                        .addComponent(dateLabel)
                        .addComponent(aDateBean, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(privateRecordToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(EventDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(linkToPlaceButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editPlaceButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(placeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(placeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addPlaceButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(EventDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(eventCauseLabel)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(EventDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(EventDetailPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(EventDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(husbandAgeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(wifeAgeLabel)
                            .addComponent(wifeAgeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(husbandAgeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(EventDetailPanelLayout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(EventTypeLabel)))
                .addContainerGap())
        );

        eventInformationTabbedPane.addTab(org.openide.util.NbBundle.getMessage(FamilyEventPanel.class, "FamilyEventPanel.EventDetailPanel.TabConstraints.tabTitle"), new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/Place.png")), EventDetailPanel); // NOI18N

        sourceCitationsListPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        javax.swing.GroupLayout sourcesPanelLayout = new javax.swing.GroupLayout(sourcesPanel);
        sourcesPanel.setLayout(sourcesPanelLayout);
        sourcesPanelLayout.setHorizontalGroup(
            sourcesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sourceCitationsListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        sourcesPanelLayout.setVerticalGroup(
            sourcesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sourceCitationsListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
        );

        eventInformationTabbedPane.addTab(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("FamilyEventPanel.sourcesPanel.TabConstraints.tabTitle"), new Object[] {}), new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/source.png")), sourcesPanel); // NOI18N

        noteCitationsListPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        javax.swing.GroupLayout notesPanelLayout = new javax.swing.GroupLayout(notesPanel);
        notesPanel.setLayout(notesPanelLayout);
        notesPanelLayout.setHorizontalGroup(
            notesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(noteCitationsListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        notesPanelLayout.setVerticalGroup(
            notesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(noteCitationsListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
        );

        eventInformationTabbedPane.addTab(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("FamilyEventPanel.notesPanel.TabConstraints.tabTitle"), new Object[] {}), new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/Note.png")), notesPanel); // NOI18N

        multimediaObjectCitationsListPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        javax.swing.GroupLayout galleryPanelLayout = new javax.swing.GroupLayout(galleryPanel);
        galleryPanel.setLayout(galleryPanelLayout);
        galleryPanelLayout.setHorizontalGroup(
            galleryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(multimediaObjectCitationsListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        galleryPanelLayout.setVerticalGroup(
            galleryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(multimediaObjectCitationsListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
        );

        eventInformationTabbedPane.addTab(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("FamilyEventPanel.galleryPanel.TabConstraints.tabTitle"), new Object[] {}), new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/Media.png")), galleryPanel); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(eventInformationTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 754, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(eventInformationTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void linkToPlaceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linkToPlaceButtonActionPerformed
        PlacesListPanel placesListPanel = new PlacesListPanel(mRoot.getGedcom());
        DialogManager.ADialog placesListPanelDialog = new DialogManager.ADialog(
                NbBundle.getMessage(PlacesListPanel.class, "PlacesListPanel.title.link"),
                placesListPanel);
        placesListPanelDialog.setDialogId(PlacesListPanel.class.getName());

        if (placesListPanelDialog.show() == DialogDescriptor.OK_OPTION) {
            final PropertyPlace selectedPlace = placesListPanel.getSelectedPlace();
            if (selectedPlace != null) {
                try {
                    mRoot.getGedcom().doUnitOfWork(new UnitOfWork() {

                        @Override
                        public void perform(Gedcom gedcom) throws GedcomException {
                            if (mPlace == null) {
                                mPlace = (PropertyPlace) mEvent.addProperty("PLAC", selectedPlace.format("all"));
                            } else {
                                mPlace.setValue(selectedPlace.format("all"));
                            }

                            Property map;
                            Property selectedPlaceMap;
                            if (mPlace.getGedcom().getGrammar().getVersion().equals("5.5.1") == true) {
                                selectedPlaceMap = selectedPlace.getProperty("MAP");
                                if (selectedPlaceMap != null) {
                                    map = mPlace.getProperty("MAP");
                                    if (map == null) {
                                        map = mPlace.addProperty("MAP", "");
                                        map.addProperty("LATI", selectedPlaceMap.getProperty("LATI").getValue());
                                        map.addProperty("LONG", selectedPlaceMap.getProperty("LONG").getValue());
                                    } else {
                                        Property latitude = map.getProperty("LATI");
                                        if (latitude == null) {
                                            map.addProperty("LATI", selectedPlaceMap.getProperty("LATI").getValue());
                                        } else {
                                            latitude.setValue(selectedPlaceMap.getProperty("LATI").getValue());
                                        }
                                        Property longitude = map.getProperty("LONG");
                                        if (longitude == null) {
                                            map.addProperty("LONG", selectedPlaceMap.getProperty("LONG").getValue());
                                        } else {
                                            longitude.setValue(selectedPlaceMap.getProperty("LONG").getValue());
                                        }
                                    }
                                } else {
                                    map = mPlace.getProperty("MAP");
                                    if (map != null) {
                                        mPlace.delProperty(map);
                                    }
                                }
                            } else {
                                selectedPlaceMap = selectedPlace.getProperty("_MAP");
                                if (selectedPlaceMap != null) {
                                    map = mPlace.getProperty("_MAP");
                                    if (map == null) {
                                        map = mPlace.addProperty("_MAP", "");
                                    } else {
                                        Property latitude = map.getProperty("_LATI");
                                        if (latitude == null) {
                                            map.addProperty("_LATI", selectedPlaceMap.getProperty("_LATI").getValue());
                                        } else {
                                            latitude.setValue(selectedPlaceMap.getProperty("_LATI").getValue());
                                        }
                                        Property longitude = map.getProperty("_LONG");
                                        if (longitude == null) {
                                            map.addProperty("_LONG", selectedPlaceMap.getProperty("_LONG").getValue());
                                        } else {
                                            longitude.setValue(selectedPlaceMap.getProperty("_LONG").getValue());
                                        }
                                    }
                                } else {
                                    map = mPlace.getProperty("_MAP");
                                    if (map != null) {
                                        mPlace.delProperty(map);
                                    }
                                }
                            }
                        }
                    }); // end of doUnitOfWork

                    placeTextField.setText(mPlace.getDisplayValue());

                    addPlaceButton.setVisible(false);
                    editPlaceButton.setVisible(true);
                } catch (GedcomException ex) {
                    Exceptions.printStackTrace(ex);
                }
            }
        }
    }//GEN-LAST:event_linkToPlaceButtonActionPerformed

    private void editPlaceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editPlaceButtonActionPerformed
        Gedcom gedcom = mRoot.getGedcom();
        int undoNb = gedcom.getUndoNb();
        final PlaceEditorPanel placeEditorPanel = new PlaceEditorPanel();
        placeEditorPanel.set(mEvent, mPlace, mAddress);

        ADialog eventEditorDialog = new ADialog(
                NbBundle.getMessage(
                        PlaceEditorPanel.class, "PlaceEditorPanel.edit.title"),
                placeEditorPanel);
        eventEditorDialog.setDialogId(PlaceEditorPanel.class.getName());

        if (eventEditorDialog.show() == DialogDescriptor.OK_OPTION) {
            try {
                gedcom.doUnitOfWork(new UnitOfWork() {

                    @Override
                    public void perform(Gedcom gedcom) throws GedcomException {
                        placeEditorPanel.commit();
                    }
                });
            } catch (GedcomException ex) {
                Exceptions.printStackTrace(ex);
            }
            mPlace = (PropertyPlace) mEvent.getProperty(PropertyPlace.TAG, false);
            mAddress = mEvent.getProperty("ADDR", false);
            placeTextField.setText(mPlace != null ? mPlace.getDisplayValue() : mAddress.getDisplayValue());
        } else {
            while (gedcom.getUndoNb() > undoNb && gedcom.canUndo()) {
                gedcom.undoUnitOfWork(false);
            }
        }
    }//GEN-LAST:event_editPlaceButtonActionPerformed

    private void addPlaceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPlaceButtonActionPerformed
        Gedcom gedcom = mRoot.getGedcom();
        final PlaceEditorPanel placeEditorPanel = new PlaceEditorPanel();
        int undoNb = gedcom.getUndoNb();

        placeEditorPanel.set(mEvent, mPlace, mAddress);

        ADialog eventEditorDialog = new ADialog(
                NbBundle.getMessage(
                        PlaceEditorPanel.class, "PlaceEditorPanel.edit.title"),
                placeEditorPanel);
        eventEditorDialog.setDialogId(PlaceEditorPanel.class.getName());

        if (eventEditorDialog.show() == DialogDescriptor.OK_OPTION) {
            try {
                gedcom.doUnitOfWork(new UnitOfWork() {

                    @Override
                    public void perform(Gedcom gedcom) throws GedcomException {
                        placeEditorPanel.commit();
                    }
                });
            } catch (GedcomException ex) {
                Exceptions.printStackTrace(ex);
            }
            mPlace = (PropertyPlace) mEvent.getProperty(PropertyPlace.TAG, false);
            mAddress = mEvent.getProperty("ADDR", false);
            if (mPlace != null || mAddress != null) {
                placeTextField.setText(mPlace != null ? mPlace.getDisplayValue() : mAddress.getDisplayValue());
                addPlaceButton.setVisible(false);
                editPlaceButton.setVisible(true);
            } else {
                placeTextField.setText("");
                addPlaceButton.setVisible(true);
                editPlaceButton.setVisible(false);
            }
        } else {
            while (gedcom.getUndoNb() > undoNb && gedcom.canUndo()) {
                gedcom.undoUnitOfWork(false);
            }
        }
    }//GEN-LAST:event_addPlaceButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel EventDetailPanel;
    private javax.swing.JLabel EventTypeLabel;
    private ancestris.modules.beans.ADateBean aDateBean;
    private javax.swing.JButton addPlaceButton;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JButton editPlaceButton;
    private javax.swing.JLabel eventCauseLabel;
    private javax.swing.JTextArea eventCauseTextArea;
    private javax.swing.JTabbedPane eventInformationTabbedPane;
    private javax.swing.JLabel eventNameLabel;
    private javax.swing.JTextField eventNameTextField;
    private javax.swing.JTextArea eventTypeTextArea;
    private javax.swing.JPanel galleryPanel;
    private javax.swing.JLabel husbandAgeLabel;
    private javax.swing.JTextField husbandAgeTextField;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton linkToPlaceButton;
    private ancestris.modules.editors.genealogyeditor.panels.MultimediaObjectCitationsListPanel multimediaObjectCitationsListPanel;
    private ancestris.modules.editors.genealogyeditor.panels.NoteCitationsListPanel noteCitationsListPanel;
    private javax.swing.JPanel notesPanel;
    private javax.swing.JLabel placeLabel;
    private javax.swing.JTextField placeTextField;
    private javax.swing.JToggleButton privateRecordToggleButton;
    private ancestris.modules.editors.genealogyeditor.panels.SourceCitationsListPanel sourceCitationsListPanel;
    private javax.swing.JPanel sourcesPanel;
    private javax.swing.JLabel wifeAgeLabel;
    private javax.swing.JTextField wifeAgeTextField;
    // End of variables declaration//GEN-END:variables

    /**
     * @param event the event to set
     */
    public void set(Property root, Property event) {
        this.mRoot = root;
        this.mEvent = event;

        mEventModified = false;
        mEventCauseModified = false;
        mHusbandAgeModified = false;
        mWifeAgeModified = false;
        mEventNameModified = false;
        mEventTypeModified = false;
        updateOnGoing = true;

        if (!mEvent.getGedcom().getGrammar().getVersion().equals("5.5.1")) {
            privateRecordToggleButton.setVisible(false);
        }

        if (mEvent.getTag().equals("EVEN") || mEvent.getTag().equals("FACT")) {
            // Event Name
            eventNameLabel.setVisible(true);
            eventNameTextField.setVisible(true);
            eventNameTextField.setEditable(true);
            Property eventType = mEvent.getProperty("TYPE", false);
            if (eventType != null) {
                eventNameTextField.setText(eventType.getValue());
            } else {
                eventNameTextField.setText("");
            }

            eventCauseTextArea.setText(mEvent.getValue());
        } else {
            // Event Name
            eventNameLabel.setVisible(false);
            eventNameTextField.setVisible(false);
            Property eventType = mEvent.getProperty("TYPE");
            if (eventType != null) {
                eventTypeTextArea.setText(eventType.getValue());
            } else {
                eventTypeTextArea.setText("");
            }

            Property eventCause = mEvent.getProperty("CAUS", false);
            if (eventCause != null) {
                eventCauseTextArea.setText(eventCause.getValue());
            } else {
                eventCauseTextArea.setText("");
            }
        }

        /*
         * +1 RESN <RESTRICTION_NOTICE>
         */
        Property restrictionNotice = mEvent.getProperty("RESN", true);
        if (restrictionNotice != null) {
            privateRecordToggleButton.setSelected(true);
        } else {
            privateRecordToggleButton.setSelected(false);
        }

        mDate = (PropertyDate) mEvent.getProperty("DATE", false);
        if (mDate == null) {
            try {
                mEvent.getGedcom().doUnitOfWork(new UnitOfWork() {

                    @Override
                    public void perform(Gedcom gedcom) throws GedcomException {
                        mDate = (PropertyDate) mEvent.addProperty("DATE", "");
                    }
                }); // end of doUnitOfWork
            } catch (GedcomException ex) {
                Exceptions.printStackTrace(ex);
            }
        }
        aDateBean.setContext(mDate);

        PropertyAge husbandAge = (PropertyAge) mEvent.getPropertyByPath(".:HUSB:AGE");
        if (husbandAge != null) {
            husbandAgeTextField.setText(husbandAge.getDisplayValue());
            if (mDate.isValid() && ((Fam) mRoot).getHusband().getBirthDate().isValid()) {
                husbandAgeTextField.setEditable(false);
            } else {
                husbandAgeTextField.setEditable(true);
            }
        } else {
            if (mDate.isValid()) {
                Delta age = ((Fam) mRoot).getHusband().getAge(mDate.getStart());
                if (age != null) {
                    husbandAgeTextField.setText(age.toString());
                    husbandAgeTextField.setEditable(false);
                } else {
                    husbandAgeTextField.setText("");
                    husbandAgeTextField.setEditable(true);
                }
            } else {
                husbandAgeTextField.setText("");
                husbandAgeTextField.setEditable(true);
            }
        }

        PropertyAge wifeAge = (PropertyAge) mEvent.getPropertyByPath(".:WIFE:AGE");
        if (wifeAge != null) {
            wifeAgeTextField.setText(wifeAge.getDisplayValue());
            if (mDate.isValid() && ((Fam) mRoot).getWife().getBirthDate().isValid()) {
                wifeAgeTextField.setEditable(false);
            } else {
                wifeAgeTextField.setEditable(true);
            }
        } else {
            if (mDate.isValid()) {
                Delta age = ((Fam) mRoot).getWife().getAge(mDate.getStart());
                if (age != null) {
                    wifeAgeTextField.setText(age.toString());
                    wifeAgeTextField.setEditable(false);
                } else {
                    wifeAgeTextField.setText("");
                    wifeAgeTextField.setEditable(true);
                }
            } else {
                wifeAgeTextField.setText("");
                wifeAgeTextField.setEditable(true);
            }
        }

        mPlace = (PropertyPlace) mEvent.getProperty(PropertyPlace.TAG, false);
        mAddress = mEvent.getProperty("ADDR", false);
        if (mPlace != null || mAddress != null) {
            placeTextField.setText(mPlace != null ? mPlace.getDisplayValue() : mAddress.getDisplayValue());
            addPlaceButton.setVisible(false);
            editPlaceButton.setVisible(true);
        } else {
            placeTextField.setText("");
            addPlaceButton.setVisible(true);
            editPlaceButton.setVisible(false);
        }

        Property[] sourcesList = mEvent.getProperties("SOUR");
        sourceCitationsListPanel.set(mEvent, Arrays.asList(sourcesList));

        noteCitationsListPanel.set(mEvent, Arrays.asList(mEvent.getProperties("NOTE")));

        multimediaObjectCitationsListPanel.set(mEvent, Arrays.asList(mEvent.getProperties("OBJE")));

        updateOnGoing = false;

    }

    public void commit() {
        if (mRoot != null) {

            if (mEventModified == true || aDateBean.hasChanged()) {
                if (mEvent.getTag().equals("EVEN") || mEvent.getTag().equals("FACT")) {
                    if (mEventNameModified) {
                        Property eventType = mEvent.getProperty("TYPE", false);
                        if (eventType != null) {
                            eventType.setValue(eventNameTextField.getText());
                        } else {
                            mEvent.addProperty("TYPE", eventNameTextField.getText());
                        }
                    }
                    if (mEventCauseModified) {
                        mEvent.setValue(eventCauseTextArea.getText());
                    }
                } else {
                    if (mEventTypeModified) {
                        Property eventType = mEvent.getProperty("TYPE", false);
                        if (eventType != null) {
                            eventType.setValue(eventTypeTextArea.getText());
                        } else {
                            mEvent.addProperty("TYPE", eventTypeTextArea.getText());
                        }
                    }
                    if (mEventCauseModified) {
                        String causeText = eventCauseTextArea.getText();
                        Property eventCause = mEvent.getProperty("CAUS", false);
                        if (causeText.length() > 0) {
                            if (eventCause == null) {
                                mEvent.addProperty("CAUS", causeText);
                            } else {
                                eventCause.setValue(causeText);
                            }
                        } else if (eventCause != null) {
                            mRoot.delProperty(eventCause);
                        }
                    }
                }
                try {
                    aDateBean.commit();
                } catch (GedcomException ex) {
                    Exceptions.printStackTrace(ex);
                }

                Property restrictionNotice = mEvent.getProperty("RESN", true);
                if (privateRecordToggleButton.isSelected()) {
                    if (restrictionNotice == null) {
                        mEvent.addProperty("RESN", "confidential");
                    }
                } else {
                    if (restrictionNotice != null) {
                        mEvent.delProperty(restrictionNotice);
                    }
                }

                if (mHusbandAgeModified) {
                    PropertyAge husbandAge = (PropertyAge) mEvent.getPropertyByPath(".:HUSB:AGE");
                    if (husbandAge != null) {
                        husbandAge.setValue(husbandAgeTextField.getText() + " y");
                    } else {
                        Property addProperty = mEvent.addProperty("HUSB", "");
                        addProperty.addProperty("AGE", husbandAgeTextField.getText() + " y");
                    }
                }
                if (mWifeAgeModified) {
                    PropertyAge wifeAge = (PropertyAge) mEvent.getPropertyByPath(".:WIFE:AGE");
                    if (wifeAge != null) {
                        wifeAge.setValue(wifeAgeTextField.getText() + " y");
                    } else {
                        Property addProperty = mEvent.addProperty("WIFE", "");
                        addProperty.addProperty("AGE", wifeAgeTextField.getText() + " y");
                    }
                }
            }
            updateOnGoing = false;
            mEventModified = false;
            mEventCauseModified = false;
            mHusbandAgeModified = false;
            mWifeAgeModified = false;
            mEventNameModified = false;
            mEventTypeModified = false;
//        gedcomPlacePanel.commit();
//        addressPanel.commit();
        }
    }
}
