package ancestris.modules.editors.genealogyeditor.panels;

import ancestris.modules.editors.genealogyeditor.editors.IndividualEditor;
import ancestris.modules.editors.genealogyeditor.models.IndividualReferencesTableModel;
import ancestris.util.swing.DialogManager;
import genj.gedcom.*;
import java.util.ArrayList;
import java.util.List;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.openide.DialogDescriptor;
import org.openide.util.ChangeSupport;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle;

/**
 *
 * @author dominique
 */
public class AliasTablePanel extends javax.swing.JPanel {

    private final IndividualReferencesTableModel mIndividualReferencesTableModel = new IndividualReferencesTableModel();
    private final ChangeListner changeListner = new ChangeListner();
    private final ChangeSupport changeSupport = new ChangeSupport(AliasTablePanel.class);

    private Indi mRoot;
    private PropertyAlias mAlias = null;

    /**
     * Creates new form IndividualsListPanel
     */
    public AliasTablePanel() {
        initComponents();
        aliasTable.setID(AliasTablePanel.class.getName());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        childrenToolBar = new javax.swing.JToolBar();
        linkToAliasButton = new javax.swing.JButton();
        editAliasButton = new javax.swing.JButton();
        deleteAliasButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        aliasTable = new ancestris.modules.editors.genealogyeditor.table.EditorTable();

        childrenToolBar.setFloatable(false);
        childrenToolBar.setRollover(true);

        linkToAliasButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/edit_add.png"))); // NOI18N
        linkToAliasButton.setText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("AliasTablePanel.linkToAliasButton.text"), new Object[] {})); // NOI18N
        linkToAliasButton.setToolTipText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("AliasTablePanel.linkToAliasButton.toolTipText"), new Object[] {})); // NOI18N
        linkToAliasButton.setFocusable(false);
        linkToAliasButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        linkToAliasButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        linkToAliasButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linkToAliasButtonActionPerformed(evt);
            }
        });
        childrenToolBar.add(linkToAliasButton);

        editAliasButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/edit.png"))); // NOI18N
        editAliasButton.setToolTipText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("AliasTablePanel.editAliasButton.toolTipText"), new Object[] {})); // NOI18N
        editAliasButton.setFocusable(false);
        editAliasButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        editAliasButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        editAliasButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editAliasButtonActionPerformed(evt);
            }
        });
        childrenToolBar.add(editAliasButton);

        deleteAliasButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/edit_delete.png"))); // NOI18N
        deleteAliasButton.setToolTipText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("AliasTablePanel.deleteAliasButton.toolTipText"), new Object[] {})); // NOI18N
        deleteAliasButton.setFocusable(false);
        deleteAliasButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        deleteAliasButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        deleteAliasButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteAliasButtonActionPerformed(evt);
            }
        });
        childrenToolBar.add(deleteAliasButton);

        aliasTable.setModel(mIndividualReferencesTableModel);
        aliasTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                aliasTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(aliasTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(childrenToolBar, javax.swing.GroupLayout.DEFAULT_SIZE, 539, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(childrenToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void editAliasButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editAliasButtonActionPerformed
        int rowIndex = aliasTable.convertRowIndexToModel(aliasTable.getSelectedRow());
        if (rowIndex != -1) {
            PropertyXRef individualRef = mIndividualReferencesTableModel.getValueAt(rowIndex);
            IndividualEditor individualEditor = new IndividualEditor();
            individualEditor.setContext(new Context((Indi) individualRef.getTargetEntity()));
            individualEditor.addChangeListener(changeListner);
            individualEditor.showPanel();
            individualEditor.removeChangeListener(changeListner);
        }
    }//GEN-LAST:event_editAliasButtonActionPerformed

    private void deleteAliasButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteAliasButtonActionPerformed
        int rowIndex = aliasTable.convertRowIndexToModel(aliasTable.getSelectedRow());
        Gedcom gedcom = mRoot.getGedcom();

        if (rowIndex != -1) {
            final PropertyXRef individualRef = mIndividualReferencesTableModel.getValueAt(rowIndex);

            DialogManager createYesNo = DialogManager.createYesNo(
                    NbBundle.getMessage(AliasTablePanel.class, "AliasTablePanel.deleteAlias.confirmation.title",
                            individualRef.getTargetEntity()),
                    NbBundle.getMessage(AliasTablePanel.class, "AliasTablePanel.deleteAlias.confirmation.text",
                            individualRef.getTargetEntity(),
                            mRoot));
            if (createYesNo.show() == DialogManager.YES_OPTION) {
                try {
                    mIndividualReferencesTableModel.remove(rowIndex);
                    gedcom.doUnitOfWork(new UnitOfWork() {

                        @Override
                        public void perform(Gedcom gedcom) throws GedcomException {
                            mRoot.delProperty(individualRef);
                        }
                    }); // end of doUnitOfWork
                    changeListner.stateChanged(null);
                } catch (GedcomException ex) {
                    Exceptions.printStackTrace(ex);
                }
            }
        }
   }//GEN-LAST:event_deleteAliasButtonActionPerformed

    private void linkToAliasButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linkToAliasButtonActionPerformed
        IndividualsListPanel individualsListPanel = new IndividualsListPanel();
        List<Indi> individualsList = new ArrayList<Indi>(mRoot.getGedcom().getIndis());
        individualsListPanel.setToolBarVisible(false);
        individualsListPanel.set(mRoot, individualsList);
        DialogManager.ADialog individualsListDialog = new DialogManager.ADialog(
                NbBundle.getMessage(IndividualsListPanel.class, "IndividualsListPanel.title.select.child"),
                individualsListPanel);
        individualsListDialog.setDialogId(IndividualsListPanel.class.getName());

        if (individualsListDialog.show() == DialogDescriptor.OK_OPTION) {
            final Indi selectedIndividual = individualsListPanel.getSelectedIndividual();
            if (selectedIndividual != null) {
                try {
                    mRoot.getGedcom().doUnitOfWork(new UnitOfWork() {

                        @Override
                        public void perform(Gedcom gedcom) throws GedcomException {
                            mAlias = (PropertyAlias) mRoot.addProperty("ALIA", "@" + selectedIndividual.getId() + "@");
                            mAlias.link();
                            mIndividualReferencesTableModel.add(mAlias);
                        }
                    }); // end of doUnitOfWork
                    changeListner.stateChanged(null);
                } catch (GedcomException ex) {
                    Exceptions.printStackTrace(ex);
                }
            }
        }
    }//GEN-LAST:event_linkToAliasButtonActionPerformed

    private void aliasTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aliasTableMouseClicked
        if (evt.getClickCount() >= 2) {
            int rowIndex = aliasTable.convertRowIndexToModel(aliasTable.getSelectedRow());
            if (rowIndex != -1) {
                PropertyXRef individualRef = mIndividualReferencesTableModel.getValueAt(rowIndex);
                IndividualEditor individualEditor = new IndividualEditor();
                individualEditor.setContext(new Context((Indi) individualRef.getTargetEntity()));
                individualEditor.addChangeListener(changeListner);
                individualEditor.showPanel();
                changeListner.stateChanged(null);
            }
        }
    }//GEN-LAST:event_aliasTableMouseClicked
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private ancestris.modules.editors.genealogyeditor.table.EditorTable aliasTable;
    private javax.swing.JToolBar childrenToolBar;
    private javax.swing.JButton deleteAliasButton;
    private javax.swing.JButton editAliasButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton linkToAliasButton;
    // End of variables declaration//GEN-END:variables

    public void set(Indi root, List<? extends PropertyXRef> individualsList) {
        this.mRoot = root;
        mIndividualReferencesTableModel.clear();
        mIndividualReferencesTableModel.addAll(individualsList);
    }

    /**
     * Listener
     */
    public void addChangeListener(ChangeListener l) {
        changeSupport.addChangeListener(l);
    }

    /**
     * Listener
     */
    public void removeChangeListener(ChangeListener l) {
        changeSupport.removeChangeListener(l);
    }

    public class ChangeListner implements ChangeListener {

        @Override
        public void stateChanged(ChangeEvent ce) {
            changeSupport.fireChange();
        }

        private boolean mute = false;

        public void mute() {
            mute = true;
        }

        public void unmute() {
            mute = false;
        }

    }
}
