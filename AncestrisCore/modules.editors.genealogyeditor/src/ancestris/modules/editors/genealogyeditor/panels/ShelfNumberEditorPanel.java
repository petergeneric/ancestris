package ancestris.modules.editors.genealogyeditor.panels;

import genj.gedcom.Property;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author dominique
 */
public class ShelfNumberEditorPanel extends javax.swing.JPanel {

    private Property mParentProperty = null;
    private Property mShelfNumberProperty = null;
    private final ChangeListner changeListner = new ChangeListner();

    /**
     * Creates new form ShelfNumberPanel
     */
    public ShelfNumberEditorPanel() {
        initComponents();

        shelfNumberTextField.getDocument().addDocumentListener(changeListner);
        shelfNumberTextField.getDocument().putProperty("name", "shelfNumberTextField");

        mediaTypeTextField.getDocument().addDocumentListener(changeListner);
        mediaTypeTextField.getDocument().putProperty("name", "mediaTypeTextField");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        shelfNumberLabel = new javax.swing.JLabel();
        shelfNumberTextField = new javax.swing.JTextField();
        mediaTypeLabel = new javax.swing.JLabel();
        mediaTypeTextField = new javax.swing.JTextField();

        shelfNumberLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(shelfNumberLabel, org.openide.util.NbBundle.getMessage(ShelfNumberEditorPanel.class, "ShelfNumberEditorPanel.shelfNumberLabel.text")); // NOI18N

        mediaTypeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(mediaTypeLabel, org.openide.util.NbBundle.getMessage(ShelfNumberEditorPanel.class, "ShelfNumberEditorPanel.mediaTypeLabel.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mediaTypeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(shelfNumberLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(shelfNumberTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)
                    .addComponent(mediaTypeTextField))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(shelfNumberLabel)
                    .addComponent(shelfNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mediaTypeLabel)
                    .addComponent(mediaTypeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel mediaTypeLabel;
    private javax.swing.JTextField mediaTypeTextField;
    private javax.swing.JLabel shelfNumberLabel;
    private javax.swing.JTextField shelfNumberTextField;
    // End of variables declaration//GEN-END:variables

    public void set(Property parentProperty, Property shelfNumberProperty) {
        changeListner.mute();
        mParentProperty = parentProperty;
        mShelfNumberProperty = shelfNumberProperty;
        if (mShelfNumberProperty != null) {
            shelfNumberTextField.setText(mShelfNumberProperty.getValue());
            Property mediProperty = mShelfNumberProperty.getProperty("MEDI");
            mediaTypeTextField.setText(mediProperty != null ? mediProperty.getValue() : "");
        } else {
            shelfNumberTextField.setText("");
            mediaTypeTextField.setText("");
        }
        changeListner.unmute();
    }

    public Property commit() {
        if (changeListner.hasChange()) {
            if (mShelfNumberProperty != null) {
                mShelfNumberProperty.setValue(shelfNumberTextField.getText());
                Property mediProperty = mShelfNumberProperty.getProperty("MEDI");
                if (mShelfNumberProperty != null) {
                    mediProperty.setValue(mediaTypeTextField.getText());
                } else {
                    mShelfNumberProperty.addProperty("MEDI", mediaTypeTextField.getText());
                }
            } else {
                mShelfNumberProperty = mParentProperty.addProperty("CALN", shelfNumberTextField.getText());
                mShelfNumberProperty.addProperty("MEDI", mediaTypeTextField.getText());
            }
            changeListner.setChange(false);
        }
        return mShelfNumberProperty;
    }

    public class ChangeListner implements DocumentListener {

        private boolean mute = false;
        private boolean hasChange = false;

        @Override
        public void insertUpdate(DocumentEvent de) {
            if (!mute) {
                Object propertyName = de.getDocument().getProperty("name");
                if (propertyName != null) {
                    if (propertyName.equals("ShelfNumberField")) {
                        setChange(true);
                    } else if (propertyName.equals("MediaType")) {
                        setChange(true);
                    }
                }
            }
        }

        @Override
        public void removeUpdate(DocumentEvent de) {
            if (!mute) {
                Object propertyName = de.getDocument().getProperty("name");
                if (propertyName != null) {
                    if (propertyName.equals("ShelfNumberField")) {
                        setChange(true);
                    } else if (propertyName.equals("MediaType")) {
                        setChange(true);
                    }
                }
            }
        }

        @Override
        public void changedUpdate(DocumentEvent de) {
            if (!mute) {
                Object propertyName = de.getDocument().getProperty("name");
                if (propertyName != null) {
                    if (propertyName.equals("ShelfNumberField")) {
                        setChange(true);
                    } else if (propertyName.equals("MediaType")) {
                        setChange(true);
                    }
                }
            }
        }

        public void mute() {
            mute = true;
        }

        public void unmute() {
            mute = false;
        }

        /**
         * @return the hasChange
         */
        public boolean hasChange() {
            return hasChange;
        }

        /**
         * @param hasChange the hasChange to set
         */
        public void setChange(boolean hasChange) {
            this.hasChange = hasChange;
        }
    }
}
