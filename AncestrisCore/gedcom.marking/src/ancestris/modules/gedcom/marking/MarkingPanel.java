/*
 * Ancestris - http://www.ancestris.org
 * 
 * Copyright 2020 Ancestris
 * 
 * Author: Frédéric Lapeyre (frederic@ancestris.org).
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 */
package ancestris.modules.gedcom.marking;

import genj.gedcom.Context;
import genj.util.Registry;
import org.openide.util.NbBundle;

/**
 *
 * @author frederic
 */
public class MarkingPanel extends javax.swing.JPanel {

    private Context context;
    private Registry registry = null;
    private Settings settings = new Settings();    
    private static String prefix = "_";

    /**
     * Creates new form MarkingPanel
     */
    public MarkingPanel(Context context) {
        this.context = context;
        registry = context.getGedcom().getRegistry();
        
        initComponents();
        
        loadPreferences();

    }


    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelType = new javax.swing.JLabel();
        jLabelTag = new javax.swing.JLabel();
        jLabelValue = new javax.swing.JLabel();
        jCheckBoxTreeTop = new javax.swing.JCheckBox();
        jTextFieldTreeTopTag = new javax.swing.JTextField();
        jTextFieldTreeTopValue = new javax.swing.JTextField();
        jCheckBoxTreeBottom = new javax.swing.JCheckBox();
        jTextFieldTreeBottomTag = new javax.swing.JTextField();
        jTextFieldTreeBottomValue = new javax.swing.JTextField();
        jCheckBoxImplex = new javax.swing.JCheckBox();
        jTextFieldImplexTag = new javax.swing.JTextField();
        jTextFieldImplexValue = new javax.swing.JTextField();
        jCheckBoxMulti = new javax.swing.JCheckBox();
        jTextFieldMultiTag = new javax.swing.JTextField();
        jTextFieldMultiValue = new javax.swing.JTextField();
        jLabelActions = new javax.swing.JLabel();
        jCheckBoxMark = new javax.swing.JCheckBox();
        jCheckBoxDisplay = new javax.swing.JCheckBox();

        org.openide.awt.Mnemonics.setLocalizedText(jLabelType, org.openide.util.NbBundle.getMessage(MarkingPanel.class, "MarkingPanel.jLabelType.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabelTag, org.openide.util.NbBundle.getMessage(MarkingPanel.class, "MarkingPanel.jLabelTag.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabelValue, org.openide.util.NbBundle.getMessage(MarkingPanel.class, "MarkingPanel.jLabelValue.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBoxTreeTop, org.openide.util.NbBundle.getMessage(MarkingPanel.class, "MarkingPanel.jCheckBoxTreeTop.text")); // NOI18N
        jCheckBoxTreeTop.setToolTipText(org.openide.util.NbBundle.getMessage(MarkingPanel.class, "MarkingPanel.jCheckBoxTreeTop.toolTipText")); // NOI18N

        jTextFieldTreeTopTag.setText(org.openide.util.NbBundle.getMessage(MarkingPanel.class, "MarkingPanel.jTextFieldTreeTopTag.text")); // NOI18N

        jTextFieldTreeTopValue.setText(org.openide.util.NbBundle.getMessage(MarkingPanel.class, "MarkingPanel.jTextFieldTreeTopValue.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBoxTreeBottom, org.openide.util.NbBundle.getMessage(MarkingPanel.class, "MarkingPanel.jCheckBoxTreeBottom.text")); // NOI18N
        jCheckBoxTreeBottom.setToolTipText(org.openide.util.NbBundle.getMessage(MarkingPanel.class, "MarkingPanel.jCheckBoxTreeBottom.toolTipText")); // NOI18N

        jTextFieldTreeBottomTag.setText(org.openide.util.NbBundle.getMessage(MarkingPanel.class, "MarkingPanel.jTextFieldTreeBottomTag.text")); // NOI18N

        jTextFieldTreeBottomValue.setText(org.openide.util.NbBundle.getMessage(MarkingPanel.class, "MarkingPanel.jTextFieldTreeBottomValue.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBoxImplex, org.openide.util.NbBundle.getMessage(MarkingPanel.class, "MarkingPanel.jCheckBoxImplex.text")); // NOI18N
        jCheckBoxImplex.setToolTipText(org.openide.util.NbBundle.getMessage(MarkingPanel.class, "MarkingPanel.jCheckBoxImplex.toolTipText")); // NOI18N

        jTextFieldImplexTag.setText(org.openide.util.NbBundle.getMessage(MarkingPanel.class, "MarkingPanel.jTextFieldImplexTag.text")); // NOI18N

        jTextFieldImplexValue.setText(org.openide.util.NbBundle.getMessage(MarkingPanel.class, "MarkingPanel.jTextFieldImplexValue.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBoxMulti, org.openide.util.NbBundle.getMessage(MarkingPanel.class, "MarkingPanel.jCheckBoxMulti.text")); // NOI18N
        jCheckBoxMulti.setToolTipText(org.openide.util.NbBundle.getMessage(MarkingPanel.class, "MarkingPanel.jCheckBoxMulti.toolTipText")); // NOI18N

        jTextFieldMultiTag.setText(org.openide.util.NbBundle.getMessage(MarkingPanel.class, "MarkingPanel.jTextFieldMultiTag.text")); // NOI18N

        jTextFieldMultiValue.setText(org.openide.util.NbBundle.getMessage(MarkingPanel.class, "MarkingPanel.jTextFieldMultiValue.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabelActions, org.openide.util.NbBundle.getMessage(MarkingPanel.class, "MarkingPanel.jLabelActions.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBoxMark, org.openide.util.NbBundle.getMessage(MarkingPanel.class, "MarkingPanel.jCheckBoxMark.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBoxDisplay, org.openide.util.NbBundle.getMessage(MarkingPanel.class, "MarkingPanel.jCheckBoxDisplay.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelActions)
                                .addGap(113, 113, 113))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addComponent(jCheckBoxMark)
                                .addGap(18, 18, 18)
                                .addComponent(jCheckBoxDisplay)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelType)
                                .addGap(0, 384, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCheckBoxImplex)
                                    .addComponent(jCheckBoxTreeBottom)
                                    .addComponent(jCheckBoxTreeTop)
                                    .addComponent(jCheckBoxMulti))
                                .addGap(8, 8, 8)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabelTag)
                                    .addComponent(jTextFieldTreeTopTag)
                                    .addComponent(jTextFieldTreeBottomTag, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
                                    .addComponent(jTextFieldImplexTag)
                                    .addComponent(jTextFieldMultiTag))
                                .addGap(32, 32, 32)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextFieldTreeTopValue)
                                    .addComponent(jTextFieldTreeBottomValue)
                                    .addComponent(jTextFieldImplexValue)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabelValue)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(jTextFieldMultiValue))))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelType)
                    .addComponent(jLabelTag)
                    .addComponent(jLabelValue))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxTreeTop)
                    .addComponent(jTextFieldTreeTopTag, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldTreeTopValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxTreeBottom)
                    .addComponent(jTextFieldTreeBottomTag, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldTreeBottomValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxImplex)
                    .addComponent(jTextFieldImplexTag, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldImplexValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxMulti)
                    .addComponent(jTextFieldMultiTag, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldMultiValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelActions)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxMark)
                    .addComponent(jCheckBoxDisplay))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox jCheckBoxDisplay;
    private javax.swing.JCheckBox jCheckBoxImplex;
    private javax.swing.JCheckBox jCheckBoxMark;
    private javax.swing.JCheckBox jCheckBoxMulti;
    private javax.swing.JCheckBox jCheckBoxTreeBottom;
    private javax.swing.JCheckBox jCheckBoxTreeTop;
    private javax.swing.JLabel jLabelActions;
    private javax.swing.JLabel jLabelTag;
    private javax.swing.JLabel jLabelType;
    private javax.swing.JLabel jLabelValue;
    private javax.swing.JTextField jTextFieldImplexTag;
    private javax.swing.JTextField jTextFieldImplexValue;
    private javax.swing.JTextField jTextFieldMultiTag;
    private javax.swing.JTextField jTextFieldMultiValue;
    private javax.swing.JTextField jTextFieldTreeBottomTag;
    private javax.swing.JTextField jTextFieldTreeBottomValue;
    private javax.swing.JTextField jTextFieldTreeTopTag;
    private javax.swing.JTextField jTextFieldTreeTopValue;
    // End of variables declaration//GEN-END:variables


    private void loadPreferences() {
        jCheckBoxTreeTop.setSelected(registry.get("MarkingTreeTop", false));
        jTextFieldTreeTopTag.setText(registry.get("MarkingTreeTopTag", NbBundle.getMessage(MarkingAction.class, "MarkingPanel.jTextFieldTreeTopTag.text")));
        jTextFieldTreeTopValue.setText(registry.get("MarkingTreeTopValue", NbBundle.getMessage(MarkingAction.class, "MarkingPanel.jTextFieldTreeTopValue.text")));
        
        jCheckBoxTreeBottom.setSelected(registry.get("MarkingTreeBottom", false));
        jTextFieldTreeBottomTag.setText(registry.get("MarkingTreeBottomTag", NbBundle.getMessage(MarkingAction.class, "MarkingPanel.jTextFieldTreeBottomTag.text")));
        jTextFieldTreeBottomValue.setText(registry.get("MarkingTreeBottomValue", NbBundle.getMessage(MarkingAction.class, "MarkingPanel.jTextFieldTreeBottomValue.text")));
        
        jCheckBoxImplex.setSelected(registry.get("MarkingImplex", false));
        jTextFieldImplexTag.setText(registry.get("MarkingImplexTag", NbBundle.getMessage(MarkingAction.class, "MarkingPanel.jTextFieldImplexTag.text")));
        jTextFieldImplexValue.setText(registry.get("MarkingImplexValue", NbBundle.getMessage(MarkingAction.class, "MarkingPanel.jTextFieldImplexValue.text")));
        
        jCheckBoxMulti.setSelected(registry.get("MarkingMulti", false));
        jTextFieldMultiTag.setText(registry.get("MarkingMultiTag", NbBundle.getMessage(MarkingAction.class, "MarkingPanel.jTextFieldMultiTag.text")));
        jTextFieldMultiValue.setText(registry.get("MarkingMultiValue", NbBundle.getMessage(MarkingAction.class, "MarkingPanel.jTextFieldMultiValue.text")));
        
        jCheckBoxMark.setSelected(registry.get("MarkingMark", false));
        jCheckBoxDisplay.setSelected(registry.get("MarkingDisplay", false));
    }

    public void savePreferences() {
        settings.isTreeTop = jCheckBoxTreeTop.isSelected();
        settings.treeTopTag = jTextFieldTreeTopTag.getText().toUpperCase();
        if (!settings.treeTopTag.startsWith(prefix)) {
            settings.treeTopTag = prefix + settings.treeTopTag;
        }
        settings.treeTopValue = jTextFieldTreeTopValue.getText();

        settings.isTreeBottom = jCheckBoxTreeBottom.isSelected();
        settings.treeBottomTag = jTextFieldTreeBottomTag.getText().toUpperCase();
        if (!settings.treeBottomTag.startsWith(prefix)) {
            settings.treeBottomTag = prefix + settings.treeBottomTag;
        }
        settings.treeBottomValue = jTextFieldTreeBottomValue.getText();

        settings.isImplex = jCheckBoxImplex.isSelected();
        settings.implexTag = jTextFieldImplexTag.getText().toUpperCase();
        if (!settings.implexTag.startsWith(prefix)) {
            settings.implexTag = prefix + settings.implexTag;
        }
        settings.implexValue = jTextFieldImplexValue.getText();

        settings.isMulti = jCheckBoxMulti.isSelected();
        settings.multiTag = jTextFieldMultiTag.getText().toUpperCase();
        if (!settings.multiTag.startsWith(prefix)) {
            settings.multiTag = prefix + settings.multiTag;
        }
        settings.multiValue = jTextFieldMultiValue.getText();

        settings.toBeMarked = jCheckBoxMark.isSelected();
        settings.toBeDisplayed = jCheckBoxDisplay.isSelected();

        registry.put("MarkingTreeTop", settings.isTreeTop);
        registry.put("MarkingTreeTopTag", settings.treeTopTag);
        registry.put("MarkingTreeTopValue", settings.treeTopValue);
        
        registry.put("MarkingTreeBottom", settings.isTreeBottom);
        registry.put("MarkingTreeBottomTag", settings.treeBottomTag);
        registry.put("MarkingTreeBottomValue", settings.treeBottomValue);
        
        registry.put("MarkingImplex", settings.isImplex);
        registry.put("MarkingImplexTag", settings.implexTag);
        registry.put("MarkingImplexValue", settings.implexValue);
        
        registry.put("MarkingMulti", settings.isMulti);
        registry.put("MarkingMultiTag", settings.multiTag);
        registry.put("MarkingMultiValue", settings.multiValue);
        
        registry.put("MarkingMark", settings.toBeMarked);
        registry.put("MarkingDisplay", settings.toBeDisplayed);
        
        
    }

    public Settings getSettings() {
        return settings;
    }

    public static class Settings {
        
        public boolean isTreeTop = true;
        public boolean isTreeBottom = true;
        public boolean isImplex = true;
        public boolean isMulti = true;

        public String treeTopTag = "";
        public String treeBottomTag = "";
        public String implexTag = "";
        public String multiTag = "";

        public String treeTopValue = "";
        public String treeBottomValue = "";
        public String implexValue = "";
        public String multiValue = "";

        public boolean toBeMarked = true;
        public boolean toBeDisplayed = true;

    }
    


}
