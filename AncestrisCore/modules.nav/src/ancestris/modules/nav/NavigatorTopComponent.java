/*
 * Ancestris - http://www.ancestris.org
 *
 * Copyright 2011 Ancestris
 *
 * Author: Daniel Andre (daniel@ancestris.org).
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 */

package ancestris.modules.nav;

import ancestris.modules.editors.standard.ResourcesSupport;
import ancestris.view.AncestrisDockModes;
import genj.gedcom.Context;
import genj.util.swing.Action2;
import genj.util.swing.Action2.Group;
import genj.view.ActionProvider;
import genj.view.SelectionListener;
import ancestris.view.AncestrisTopComponent;
import ancestris.view.AncestrisViewInterface;
import java.awt.Image;
import java.awt.event.ActionEvent;
import org.openide.util.lookup.ServiceProvider;

/**
 * Top component which displays something.
 */
@ServiceProvider(service = AncestrisViewInterface.class)
public final class NavigatorTopComponent extends AncestrisTopComponent implements ActionProvider, SelectionListener {

    private static final String PREFERRED_ID = "EditTopComponent";  // NOI18N
    private static NavigatorTopComponent factory;
    FamilyPanel familyPanel = new FamilyPanel();
//    EventsPanel eventsPanel = new EventsPanel();
//    GedcomPanel gedcomPanel = new GedcomPanel();
//    JTabbedPane editorPanel;

    @Override
    public boolean createPanel() {
//        editorPanel = new JTabbedPane();
//        editorPanel.addTab(org.openide.util.NbBundle.getMessage(EditTopComponent.class, "tab.entity.title"), familyPanel);
//        editorPanel.addTab(org.openide.util.NbBundle.getMessage(EditTopComponent.class, "tab.event.title"), eventsPanel);
//        editorPanel.addTab("Gedcom", gedcomPanel);
        setContext(getContext(), true);
        return true;
    }

    @Override
    public String getDefaultFactoryMode() {
        return AncestrisDockModes.OUTPUT; // NOI18N
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     */
    public static synchronized NavigatorTopComponent getFactory() {
        if (factory == null) {
            factory = new NavigatorTopComponent();
        }
        return factory;
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    @Override
    public void createActions(Context context, Purpose purpose, Group into) {
//        if (purpose == Purpose.CONTEXT && getContext().getGedcom().equals(context.getGedcom())) {
//            into.add(new OpenInEditor(context));
//        }
    }

//    @Override
//    public Image getImageIcon() {
//        // XXX: return proper image
//        return ResourcesSupport.editorIcon.getImage();
//    }

    public void setContext(Context context, boolean isActionPerformed) {
        if (context == null) {
            return;
        }
        familyPanel.setContext(context);
        setPanel(familyPanel);
        repaint();
    }
}
