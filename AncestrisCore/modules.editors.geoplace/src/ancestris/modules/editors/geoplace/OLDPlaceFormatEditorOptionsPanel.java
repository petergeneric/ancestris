package ancestris.modules.editors.geoplace;

import genj.gedcom.Gedcom;
import genj.gedcom.GedcomOptions;
import genj.gedcom.PropertyPlace;
import genj.util.Registry;
import java.util.ArrayList;
import java.util.StringTokenizer;
import javax.swing.JComponent;

/**
 * 
 * Logic for setting place format and place order : 
 * 
 * 1/ Place format 
 *      a/ taken from current gedcom header 
 *      b/ else from Ancestris User Preferences (GedcomOptions) 
 *      c/ else from Ancestris gedcom module bundle properties 
 * 2/ Sort Order 
 *      a/ taken from local previously stored preference (using this module) 
 *      b/ else from this module bundle, but not from ancestris options
 *
 * Default jurisdictions format in Ancestris options (option.placeFormat) :
 *          Hamlet,City,,Zip_Code,County,State,Country 
 * Predefined fields in panel :
 *          Hamlet,Parish,City,zipCode,geoID,County,State,Country 
 * => Default sortorder if none found : 
 *          0     ,-1    ,1   ,3      ,2    ,4     ,5    ,6
 *
 * 3/ Display Format
 *      a/ Taken from local previously stored preference (using this module)
 *      b/ else from place format string
 * 
 * @author dominique & frederic
 */
public class OLDPlaceFormatEditorOptionsPanel extends javax.swing.JPanel {

    public final static int HAMLET = 0;
    public final static int PARISH = 1;
    public final static int CITY = 2;
    public final static int ZIP_CODE = 3;
    public final static int GEO_ID = 4;
    public final static int COUNTY = 5;
    public final static int STATE = 6;
    public final static int COUNTRY = 7;
    public final static int MAX_JURISDICTIONS = 8;

    private Gedcom gedcom = null;
    private Registry registry = null;
    private String[] mComboPlaceFormat, mPlaceFormat;
    private int[] mPlaceSortOrder;

    /**
     * Creates new form PlaceFormatEditorOptionsPanel
     * 
     * @param gedcom
     */
    // TODO: if gedcom == null use global settings for place options
    public OLDPlaceFormatEditorOptionsPanel(Gedcom gedcom) {

        this.gedcom = gedcom;
        this.registry = gedcom.getRegistry();
    
        // Read place format from Gedcom, else Ancestris preferences, else fallback to bundle
        mPlaceFormat = PropertyPlace.getFormat(gedcom, true);
        if (mPlaceFormat == null || mPlaceFormat.length == 0) {
            mPlaceFormat = toJurisdictions(genj.gedcom.GedcomOptions.getInstance().getPlaceFormat());
        }
        
        // Build the list used for all combo boxes
        mComboPlaceFormat = new String[Math.min(MAX_JURISDICTIONS, mPlaceFormat.length) + 1];
        mComboPlaceFormat[0] = "";
        System.arraycopy(mPlaceFormat, 0, mComboPlaceFormat, 1, mPlaceFormat.length);

        // Read place sort order to intiate the mapping between known juridictions and those in the gedcom format
        mPlaceSortOrder = initPlaceSortOrder();
        if (isRegisteredPlaceSortOrder()) {
            mPlaceSortOrder = getRegisteredPlaceSortOrder();
        }
        
        // Init panel
        initComponents();
        JComponent gedcomFields[] = {
            hamletComboBox,
            parishComboBox,
            cityComboBox,
            zipCodeComboBox,
            geoIDComboBox,
            countyComboBox,
            stateComboBox,
            countryComboBox
        };
        JComponent formatFields[] = {
            jLabel2,
            jLabel3,
            jLabel4,
            jLabel5,
            jLabel6,
            jLabel7,
            jLabel8,
            jLabel9
        };

        // Set gedcom fields
        for (int index = 0; index < mPlaceSortOrder.length; index++) {
            if (mPlaceSortOrder[index] > -1 && mPlaceSortOrder[index] + 1 < mComboPlaceFormat.length) {
                ((javax.swing.JComboBox) gedcomFields[index]).setSelectedIndex(mPlaceSortOrder[index] + 1);
                ((javax.swing.JLabel) formatFields[index]).setText("" + mPlaceSortOrder[index]);
            } else {
                ((javax.swing.JComboBox) gedcomFields[index]).setSelectedIndex(0);
                ((javax.swing.JLabel) formatFields[index]).setText("");
            }
        }

        // Set place format field
        jTextField1.setText(gedcom==null?
                GedcomOptions.getInstance().getPlaceDisplayFormat():
                gedcom.getPlaceDisplayFormat());
                
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        hamletLabel = new javax.swing.JLabel();
        parishLabel = new javax.swing.JLabel();
        cityLabel = new javax.swing.JLabel();
        zipCodeLabel = new javax.swing.JLabel();
        geoIDLabel = new javax.swing.JLabel();
        countyLabel = new javax.swing.JLabel();
        stateLabel = new javax.swing.JLabel();
        countryLabel = new javax.swing.JLabel();
        hamletComboBox = new javax.swing.JComboBox<String>();
        cityComboBox = new javax.swing.JComboBox<String>();
        geoIDComboBox = new javax.swing.JComboBox<String>();
        stateComboBox = new javax.swing.JComboBox<String>();
        parishComboBox = new javax.swing.JComboBox<String>();
        zipCodeComboBox = new javax.swing.JComboBox<String>();
        countyComboBox = new javax.swing.JComboBox<String>();
        countryComboBox = new javax.swing.JComboBox<String>();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();

        jScrollPane1.setHorizontalScrollBar(null);

        jPanel1.setRequestFocusEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel10, org.openide.util.NbBundle.getMessage(OLDPlaceFormatEditorOptionsPanel.class, "OLDPlaceFormatEditorOptionsPanel.jLabel10.text")); // NOI18N

        hamletLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(hamletLabel, org.openide.util.NbBundle.getMessage(OLDPlaceFormatEditorOptionsPanel.class, "PlaceFormatEditorOptionsPanel.hamletLabel")); // NOI18N

        parishLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(parishLabel, org.openide.util.NbBundle.getMessage(OLDPlaceFormatEditorOptionsPanel.class, "PlaceFormatEditorOptionsPanel.parishLabel")); // NOI18N

        cityLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(cityLabel, org.openide.util.NbBundle.getMessage(OLDPlaceFormatEditorOptionsPanel.class, "PlaceFormatEditorOptionsPanel.cityLabel")); // NOI18N

        zipCodeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(zipCodeLabel, org.openide.util.NbBundle.getMessage(OLDPlaceFormatEditorOptionsPanel.class, "PlaceFormatEditorOptionsPanel.ZipCodeLabel")); // NOI18N

        geoIDLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(geoIDLabel, org.openide.util.NbBundle.getMessage(OLDPlaceFormatEditorOptionsPanel.class, "PlaceFormatEditorOptionsPanel.GeoIdLabel")); // NOI18N

        countyLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(countyLabel, org.openide.util.NbBundle.getMessage(OLDPlaceFormatEditorOptionsPanel.class, "PlaceFormatEditorOptionsPanel.CountyLabel")); // NOI18N

        stateLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(stateLabel, org.openide.util.NbBundle.getMessage(OLDPlaceFormatEditorOptionsPanel.class, "PlaceFormatEditorOptionsPanel.StateLabel")); // NOI18N

        countryLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(countryLabel, org.openide.util.NbBundle.getMessage(OLDPlaceFormatEditorOptionsPanel.class, "PlaceFormatEditorOptionsPanel.CountryLabel")); // NOI18N

        hamletComboBox.setModel(new javax.swing.DefaultComboBoxModel<String>(mComboPlaceFormat));
        hamletComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hamletComboBoxActionPerformed(evt);
            }
        });

        cityComboBox.setModel(new javax.swing.DefaultComboBoxModel<String>(mComboPlaceFormat));
        cityComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cityComboBoxActionPerformed(evt);
            }
        });

        geoIDComboBox.setModel(new javax.swing.DefaultComboBoxModel<String>(mComboPlaceFormat));
        geoIDComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                geoIDComboBoxActionPerformed(evt);
            }
        });

        stateComboBox.setModel(new javax.swing.DefaultComboBoxModel<String>(mComboPlaceFormat));
        stateComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stateComboBoxActionPerformed(evt);
            }
        });

        parishComboBox.setModel(new javax.swing.DefaultComboBoxModel<String>(mComboPlaceFormat));
        parishComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                parishComboBoxActionPerformed(evt);
            }
        });

        zipCodeComboBox.setModel(new javax.swing.DefaultComboBoxModel<String>(mComboPlaceFormat));
        zipCodeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zipCodeComboBoxActionPerformed(evt);
            }
        });

        countyComboBox.setModel(new javax.swing.DefaultComboBoxModel<String>(mComboPlaceFormat));
        countyComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                countyComboBoxActionPerformed(evt);
            }
        });

        countryComboBox.setModel(new javax.swing.DefaultComboBoxModel<String>(mComboPlaceFormat));
        countryComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                countryComboBoxActionPerformed(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(OLDPlaceFormatEditorOptionsPanel.class, "OLDPlaceFormatEditorOptionsPanel.jLabel1.text")); // NOI18N

        jTextField1.setText(org.openide.util.NbBundle.getMessage(OLDPlaceFormatEditorOptionsPanel.class, "OLDPlaceFormatEditorOptionsPanel.jTextField1.text")); // NOI18N
        jTextField1.setToolTipText(org.openide.util.NbBundle.getMessage(OLDPlaceFormatEditorOptionsPanel.class, "OLDPlaceFormatEditorOptionsPanel.jTextField1.toolTipText")); // NOI18N
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(OLDPlaceFormatEditorOptionsPanel.class, "OLDPlaceFormatEditorOptionsPanel.jLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(OLDPlaceFormatEditorOptionsPanel.class, "OLDPlaceFormatEditorOptionsPanel.jLabel3.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(OLDPlaceFormatEditorOptionsPanel.class, "OLDPlaceFormatEditorOptionsPanel.jLabel4.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(OLDPlaceFormatEditorOptionsPanel.class, "OLDPlaceFormatEditorOptionsPanel.jLabel5.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel6, org.openide.util.NbBundle.getMessage(OLDPlaceFormatEditorOptionsPanel.class, "OLDPlaceFormatEditorOptionsPanel.jLabel6.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel7, org.openide.util.NbBundle.getMessage(OLDPlaceFormatEditorOptionsPanel.class, "OLDPlaceFormatEditorOptionsPanel.jLabel7.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel8, org.openide.util.NbBundle.getMessage(OLDPlaceFormatEditorOptionsPanel.class, "OLDPlaceFormatEditorOptionsPanel.jLabel8.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel9, org.openide.util.NbBundle.getMessage(OLDPlaceFormatEditorOptionsPanel.class, "OLDPlaceFormatEditorOptionsPanel.jLabel9.text")); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addComponent(jSeparator2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(countryLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cityLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(zipCodeLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(geoIDLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(countyLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(stateLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(parishLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(hamletLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(hamletComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, 665, Short.MAX_VALUE)
                            .addComponent(parishComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cityComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(zipCodeComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(geoIDComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(countyComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(countryComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(stateComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(jLabel2)))
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hamletLabel)
                    .addComponent(hamletComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(parishComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(parishLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cityComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(cityLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(zipCodeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(zipCodeLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(geoIDComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(geoIDLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(countyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(countyLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(stateLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(countryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(countryLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jScrollPane1.setViewportView(jPanel1);
        jPanel1.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(OLDPlaceFormatEditorOptionsPanel.class, "OLDPlaceFormatEditorOptionsPanel.jPanel1.AccessibleContext.accessibleName")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void hamletComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hamletComboBoxActionPerformed
        jLabel2.setText("" + (hamletComboBox.getSelectedIndex() == 0 ? "" : hamletComboBox.getSelectedIndex() - 1));
    }//GEN-LAST:event_hamletComboBoxActionPerformed

    private void parishComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_parishComboBoxActionPerformed
        jLabel3.setText("" + (parishComboBox.getSelectedIndex() == 0 ? "" : parishComboBox.getSelectedIndex() - 1));
    }//GEN-LAST:event_parishComboBoxActionPerformed

    private void cityComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cityComboBoxActionPerformed
        jLabel4.setText("" + (cityComboBox.getSelectedIndex() == 0 ? "" : cityComboBox.getSelectedIndex() - 1));
    }//GEN-LAST:event_cityComboBoxActionPerformed

    private void zipCodeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zipCodeComboBoxActionPerformed
        jLabel5.setText("" + (zipCodeComboBox.getSelectedIndex() == 0 ? "" : zipCodeComboBox.getSelectedIndex() - 1));
    }//GEN-LAST:event_zipCodeComboBoxActionPerformed

    private void geoIDComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_geoIDComboBoxActionPerformed
        jLabel6.setText("" + (geoIDComboBox.getSelectedIndex() == 0 ? "" : geoIDComboBox.getSelectedIndex() - 1));
    }//GEN-LAST:event_geoIDComboBoxActionPerformed

    private void countyComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_countyComboBoxActionPerformed
        jLabel7.setText("" + (countyComboBox.getSelectedIndex() == 0 ? "" : countyComboBox.getSelectedIndex() - 1));
    }//GEN-LAST:event_countyComboBoxActionPerformed

    private void stateComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stateComboBoxActionPerformed
        jLabel8.setText("" + (stateComboBox.getSelectedIndex() == 0 ? "" : stateComboBox.getSelectedIndex() - 1));
    }//GEN-LAST:event_stateComboBoxActionPerformed

    private void countryComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_countryComboBoxActionPerformed
        jLabel9.setText("" + (countryComboBox.getSelectedIndex() == 0 ? "" : countryComboBox.getSelectedIndex() - 1));
    }//GEN-LAST:event_countryComboBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cityComboBox;
    private javax.swing.JLabel cityLabel;
    private javax.swing.JComboBox<String> countryComboBox;
    private javax.swing.JLabel countryLabel;
    private javax.swing.JComboBox<String> countyComboBox;
    private javax.swing.JLabel countyLabel;
    private javax.swing.JComboBox<String> geoIDComboBox;
    private javax.swing.JLabel geoIDLabel;
    private javax.swing.JComboBox<String> hamletComboBox;
    private javax.swing.JLabel hamletLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JComboBox<String> parishComboBox;
    private javax.swing.JLabel parishLabel;
    private javax.swing.JComboBox<String> stateComboBox;
    private javax.swing.JLabel stateLabel;
    private javax.swing.JComboBox<String> zipCodeComboBox;
    private javax.swing.JLabel zipCodeLabel;
    // End of variables declaration//GEN-END:variables

    public int[] getPlaceSortOrder() {
        mPlaceSortOrder[0] = (Integer) hamletComboBox.getSelectedIndex() - 1;
        mPlaceSortOrder[1] = (Integer) parishComboBox.getSelectedIndex() - 1;
        mPlaceSortOrder[2] = (Integer) cityComboBox.getSelectedIndex() - 1;
        mPlaceSortOrder[3] = (Integer) zipCodeComboBox.getSelectedIndex() - 1;
        mPlaceSortOrder[4] = (Integer) geoIDComboBox.getSelectedIndex() - 1;
        mPlaceSortOrder[5] = (Integer) countyComboBox.getSelectedIndex() - 1;
        mPlaceSortOrder[6] = (Integer) stateComboBox.getSelectedIndex() - 1;
        mPlaceSortOrder[7] = (Integer) countryComboBox.getSelectedIndex() - 1;
        return mPlaceSortOrder;
    }

    public String[] getPlaceFormat() {
        return mPlaceFormat;
    }
    
    public void commit() {
        registry.put("PLAC.hamlet.index", mPlaceSortOrder[0]);
        registry.put("PLAC.parish.index", mPlaceSortOrder[1]);
        registry.put("PLAC.city.index", mPlaceSortOrder[2]);
        registry.put("PLAC.zipCode.index", mPlaceSortOrder[3]);
        registry.put("PLAC.geoID.index", mPlaceSortOrder[4]);
        registry.put("PLAC.county.index", mPlaceSortOrder[5]);
        registry.put("PLAC.state.index", mPlaceSortOrder[6]);
        registry.put("PLAC.country.index", mPlaceSortOrder[7]);
        if (gedcom != null){
            gedcom.setPlaceDisplayFormat(jTextField1.getText());
        } else {
            GedcomOptions.getInstance().setPlaceDisplayFormat(jTextField1.getText());
        }
//        registry.put("PLAC.display.format", jTextField1.getText());
    }
    
    public boolean isRegisteredPlaceSortOrder() {
        Boolean sortOrderRegistered = (registry.get("PLAC.hamlet.index", -2) != -2);
        Boolean PlaceFormatExists = gedcom.getPlaceDisplayFormat()!=null;
//        Boolean PlaceFormatExists = !registry.get("PLAC.display.format", "").trim().isEmpty();
        return sortOrderRegistered && PlaceFormatExists;
    }

    public int[] getRegisteredPlaceSortOrder() {
        mPlaceSortOrder[0] = registry.get("PLAC.hamlet.index", mPlaceSortOrder[0]);
        mPlaceSortOrder[1] = registry.get("PLAC.parish.index", mPlaceSortOrder[1]);
        mPlaceSortOrder[2] = registry.get("PLAC.city.index", mPlaceSortOrder[2]);
        mPlaceSortOrder[3] = registry.get("PLAC.zipCode.index", mPlaceSortOrder[3]);
        mPlaceSortOrder[4] = registry.get("PLAC.geoID.index", mPlaceSortOrder[4]);
        mPlaceSortOrder[5] = registry.get("PLAC.county.index", mPlaceSortOrder[5]);
        mPlaceSortOrder[6] = registry.get("PLAC.state.index", mPlaceSortOrder[6]);
        mPlaceSortOrder[7] = registry.get("PLAC.country.index", mPlaceSortOrder[7]);
        return mPlaceSortOrder;
    }
    
    private static String[] toJurisdictions(String value) {
        ArrayList<String> result = new ArrayList<String>(10);
        String lastToken = PropertyPlace.JURISDICTION_SEPARATOR;
        for (StringTokenizer tokens = new StringTokenizer(value, ",", true); tokens.hasMoreTokens();) {
            String token = tokens.nextToken();
            if (!PropertyPlace.JURISDICTION_SEPARATOR.equals(token)) {
                result.add(token);
            } else if (PropertyPlace.JURISDICTION_SEPARATOR.equals(lastToken)) {
                result.add("");
            }
            lastToken = token;
        }
        if (PropertyPlace.JURISDICTION_SEPARATOR.equals(lastToken)) {
            result.add("");
        }
        return result.toArray(new String[result.size()]);
    }

    private int[] initPlaceSortOrder() {
        int[] results = new int[] { 0, -1, 1, -1, 2, 3, 4, 5 }; // defaults as if gedcom format was "hamlet, city, geocode, dept, region, country" (most frequent)
        return results;
    }

}
