/*
 * Ancestris - http://www.ancestris.org
 * 
 * Copyright 2011 Ancestris
 * 
 * Author: Daniel Andre (daniel@ancestris.org).
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 */
package ancestris.modules.wizards.newgedcom;

import genj.gedcom.Gedcom;
import genj.gedcom.GedcomException;
import genj.gedcom.Submitter;
import genj.gedcom.TagPath;
import javax.swing.JPanel;
import org.openide.util.Exceptions;

public final class SubmitterVisualPanel extends JPanel {

    private Gedcom gedcom;
    private SubmitterWizardPanel changeListener;

    /** Creates new form SubmitterVisualPanel */
    // FIXME: circular dependency: 
    public SubmitterVisualPanel(INewGedcomProvider newGedcom, SubmitterWizardPanel changeListner) {
        initComponents();
        //FIXME: ce n'est pas sa place
        gedcom = newGedcom.getContext().getGedcom();
        this.changeListener = changeListner;

        Submitter subm = gedcom.getSubmitter();
        submitterAddress.setContext(subm,null);
        submitterName.setContext(subm, new TagPath("NAME"), subm.getProperty("NAME"));
    }

    @Override
    public String getName() {
        return org.openide.util.NbBundle.getMessage(SubmitterVisualPanel.class, "create.file.title");
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        submitterName = new ancestris.modules.beans.ASimpleBean();
        submitterAddress = new ancestris.modules.beans.AAddrBean();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();

        setPreferredSize(new java.awt.Dimension(622, 380));
        setRequestFocusEnabled(false);

        submitterName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                submitterNameKeyReleased(evt);
            }
        });

        submitterAddress.setPreferredSize(new java.awt.Dimension(580, 285));

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(SubmitterVisualPanel.class, "SubmitterVisualPanel.jLabel1.text")); // NOI18N
        jLabel1.setToolTipText(org.openide.util.NbBundle.getMessage(SubmitterVisualPanel.class, "SubmitterVisualPanel.jLabel1.toolTipText")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(SubmitterVisualPanel.class, "SubmitterVisualPanel.jLabel2.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 493, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 493, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(submitterName, javax.swing.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE))
                    .addComponent(submitterAddress, javax.swing.GroupLayout.DEFAULT_SIZE, 493, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(submitterName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(submitterAddress, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void submitterNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_submitterNameKeyReleased
        // Add a keyreleased listner. The typed listener is call before updating the jtextfield
        // resulting in incorect result returned to caller
        if (changeListener != null) {
            changeListener.fireChangeEvent();
        }
}//GEN-LAST:event_submitterNameKeyReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JSeparator jSeparator1;
    private ancestris.modules.beans.AAddrBean submitterAddress;
    private ancestris.modules.beans.ASimpleBean submitterName;
    // End of variables declaration//GEN-END:variables

    public void applyNext() {
        try {
            submitterAddress.commit();
            submitterName.commit();
        } catch (GedcomException ex) {
            Exceptions.printStackTrace(ex);
        }
    }

    String getSubmitterName() {
        return submitterName.getValue();
    }
}
