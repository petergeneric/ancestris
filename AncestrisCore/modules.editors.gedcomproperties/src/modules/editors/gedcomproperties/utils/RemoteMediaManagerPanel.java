/*
 * Ancestris - http://www.ancestris.org
 *
 * Copyright 2019 Ancestris
 *
 * Author: Zurga.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 */
package modules.editors.gedcomproperties.utils;

import ancestris.util.swing.DialogManager;
import ancestris.util.swing.FileChooserBuilder;
import genj.gedcom.PropertyFile;
import genj.io.InputSource;
import genj.util.Registry;
import java.awt.Dimension;
import java.io.File;
import java.io.IOException;
import java.util.Optional;
import java.util.Set;
import java.util.TreeSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.commons.io.FileUtils;
import org.openide.util.NbBundle;

/**
 * MAange remote file to copy on local disk.
 *
 * @author Zurga
 */
public class RemoteMediaManagerPanel extends javax.swing.JPanel {

    Logger LOG = Logger.getLogger("ancestris.app");

    private Set<PathData> paths = null;
    private Registry registry = null;
    private RemoteMediaTableModel rmtm;
    private boolean select = false;
    private boolean modified = false;

    public RemoteMediaManagerPanel(Set<PropertyFile> chemin) {
        paths = new TreeSet<>();
        registry = Registry.get(getClass());
        buildPathList(chemin);
        rmtm = new RemoteMediaTableModel(paths, this);
        initComponents();

        this.setPreferredSize(new Dimension(registry.get("remoteMediaManagerPanelWidth", this.getPreferredSize().width), registry.get("remoteMediaManagerPanelHeight", this.getPreferredSize().height)));

        resizeColumn();

    }

    private void resizeColumn() {
        Dimension size = this.getPreferredSize();

        jTable1.getColumnModel().getColumn(0).setPreferredWidth(100);
        jTable1.getColumnModel().getColumn(1).setPreferredWidth(100);
        jTable1.getColumnModel().getColumn(2).setPreferredWidth(size.width - 200);
    }

    private void buildPathList(Set<PropertyFile> chemin) {
        for (PropertyFile pf : chemin) {
            PathData pd = getPathData(pf.getValue());
            if (pd != null) {
                pd.addFile(pf);
            } else {
                paths.add(new PathData(false, false, pf, pf.getValue()));
            }
        }
    }

    private PathData getPathData(String key) {
        for (PathData pd : paths) {
            if (pd.newPath.equals(key)) {
                return pd;
            }
        }
        return null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        jTextField1.setText(org.openide.util.NbBundle.getMessage(RemoteMediaManagerPanel.class, "RemoteMediaManagerPanel.jTextField1.text")); // NOI18N
        jTextField1.setToolTipText(org.openide.util.NbBundle.getMessage(RemoteMediaManagerPanel.class, "RemoteMediaManagerPanel.jTextField1.toolTipText")); // NOI18N

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/modules/editors/gedcomproperties/ressources/Open.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(RemoteMediaManagerPanel.class, "RemoteMediaManagerPanel.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(RemoteMediaManagerPanel.class, "RemoteMediaManagerPanel.jLabel1.text")); // NOI18N

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setModel(rmtm);
        jScrollPane1.setViewportView(jTable1);

        org.openide.awt.Mnemonics.setLocalizedText(jButton2, org.openide.util.NbBundle.getMessage(RemoteMediaManagerPanel.class, "RemoteMediaManagerPanel.jButton2.text")); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButton3, org.openide.util.NbBundle.getMessage(RemoteMediaManagerPanel.class, "RemoteMediaManagerPanel.jButton3.text")); // NOI18N
        jButton3.setToolTipText(org.openide.util.NbBundle.getMessage(RemoteMediaManagerPanel.class, "RemoteMediaManagerPanel.jButton3.toolTipText")); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 362, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton3)
                        .addGap(20, 20, 20))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 269, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addGap(21, 21, 21))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        registry.put("remoteMediaManagerPanelWidth", evt.getComponent().getWidth());
        registry.put("remoteMediaManagerPanelHeight", evt.getComponent().getHeight());
    }//GEN-LAST:event_formComponentResized

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        select = !select;
        for (int i = 0; i < jTable1.getRowCount(); i++) {
            jTable1.setValueAt(select, i, 0);
        }
        jTable1.repaint();

        if (select) {
            jButton2.setText(NbBundle.getMessage(RemoteMediaManagerPanel.class, "RemoteMediaManagerPanel.unselect"));
        } else {
            jButton2.setText(NbBundle.getMessage(RemoteMediaManagerPanel.class, "RemoteMediaManagerPanel.jButton2.text"));
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String defaultDir = jTextField1.getText();
        if (defaultDir.isEmpty()) {
            defaultDir = System.getProperty("user.home");
        }
        File file = new FileChooserBuilder(RemoteMediaManagerPanel.class)
                .setDirectoriesOnly(true)
                .setDefaultBadgeProvider()
                .setTitle(NbBundle.getMessage(RemoteMediaManagerPanel.class, "FileChooserTitle"))
                .setApproveText(NbBundle.getMessage(RemoteMediaManagerPanel.class, "FileChooserButton"))
                .setFileFilter(null)
                .setAcceptAllFileFilterUsed(true)
                .setFileHiding(true)
                .setParent(this)
                .setDefaultPreviewer()
                .setSelectedFile(new File(defaultDir))
                .setDefaultWorkingDirectory(new File(defaultDir))
                .showOpenDialog();
        if (file != null) {
            if (!file.isDirectory()) {
                file = file.getParentFile();
            }
            jTextField1.setText(file.getAbsolutePath());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        final String dir = jTextField1.getText();
        if (dir != null && !dir.isEmpty()) {
            downloadFiles();
        } else {
            DialogManager.createError(NbBundle.getMessage(RemoteMediaManagerPanel.class, "NO_DIRECTORY_TITLE"), NbBundle.getMessage(RemoteMediaManagerPanel.class, "NO_DIRECTORY_MSG")).show();
        }
    }//GEN-LAST:event_jButton3ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    public void updatePath(String path, boolean value) {
        for (PathData pd : paths) {
            if (pd.newPath.equals(path)) {
                pd.found = value;
            }
        }
    }

    private void downloadFiles() {
        Set<PathData> ok = new TreeSet<>();
        long nbProperty = 0;
        for (PathData pd : paths) {
            if (pd.found) {
                boolean done = false;
                InputSource is = null;
                Optional<InputSource> newLocation = Optional.empty();
                for (PropertyFile pf : pd.getFiles()) {
                    is = pf.getInput().orElse(null);
                    if (is != null && !done) {
                        try {
                            File fichier = new File(jTextField1.getText() + File.separator + getCleanFileName(pf.getValue(), "-"));
                            FileUtils.copyInputStreamToFile(is.open(), fichier);
                            newLocation = InputSource.get(fichier);
                            done = true;
                        } catch (IOException e) {
                            LOG.log(Level.INFO, "Unable to get remote file", e);
                            break;
                        }
                    }
                    if (newLocation.isPresent()) {
                        pf.addFile(newLocation.get());
                        modified = true;
                        nbProperty++;
                    }
                }
                if (done) {
                    ok.add(pd);
                }
            }
        }
        paths.removeAll(ok);
        rmtm = new RemoteMediaTableModel(paths, this);
        jTable1.setModel(rmtm);
        resizeColumn();
        jTable1.repaint();
        DialogManager.create(NbBundle.getMessage(RemoteMediaManagerPanel.class, "RESULT_TITLE"), 
                NbBundle.getMessage(RemoteMediaManagerPanel.class, "RESULT_MSG", ok.size(), jTextField1.getText(), nbProperty))
                .setOptionType(DialogManager.OK_ONLY_OPTION).setMessageType(DialogManager.INFORMATION_MESSAGE).show();
    }

    public boolean isMapModified() {
        return modified;
    }

    private String getCleanFileName(String input, String defchar) {

        // Eliminate drive letter by starting after ":"
        String str = input.substring(Math.max(0, input.lastIndexOf(":") + 1));

        // Eliminate back-slashes in case of windows or any other case
        while (str.startsWith("\\")) {
            str = str.substring(1);
        }

        // Eliminate slashes
        while (str.startsWith("/")) {
            str = str.substring(1);
        }

        // Eliminate blank spaces
        String temp = str.replaceAll("\\s", "_");

        // Remove anything web parameters
        int i = temp.indexOf('?');
        if (i > 0) {
            temp = temp.substring(0, i);
        }

        // Eliminate accents
        String cleanName = fileNameConvert(temp, defchar);

        return cleanName;
    }

    private String fileNameConvert(String filename, String defchar) {
        if (filename == null) {
            return "null";
        }
        String text = filename.toLowerCase();
        char[] charInput = text.toCharArray();
        StringBuilder strOutput = new StringBuilder(1000);
        for (int i = 0; i < charInput.length; i++) {
            strOutput.append(convertChar(charInput[i], false, defchar));
        }
        return strOutput.toString();
    }

    private String convertChar(char c, boolean isAnchor, String defchar) {
        String str;
        switch (c) {
            case 'à':
                str = "a";
                break;
            case 'á':
                str = "a";
                break;
            case 'â':
                str = "a";
                break;
            case 'ã':
                str = "a";
                break;
            case 'ä':
                str = "a";
                break;
            case 'å':
                str = "a";
                break;
            case 'æ':
                str = "ae";
                break;
            case 'ç':
                str = "c";
                break;
            case 'è':
                str = "e";
                break;
            case 'é':
                str = "e";
                break;
            case 'ê':
                str = "e";
                break;
            case 'ë':
                str = "e";
                break;
            case 'ì':
                str = "i";
                break;
            case 'í':
                str = "i";
                break;
            case 'î':
                str = "i";
                break;
            case 'ï':
                str = "i";
                break;
            case 'ð':
                str = "o";
                break;
            case 'ñ':
                str = "n";
                break;
            case 'ò':
                str = "o";
                break;
            case 'ó':
                str = "o";
                break;
            case 'ô':
                str = "o";
                break;
            case 'õ':
                str = "o";
                break;
            case 'ö':
                str = "o";
                break;
            case 'ø':
                str = "o";
                break;
            case 'ù':
                str = "u";
                break;
            case 'ú':
                str = "u";
                break;
            case 'û':
                str = "u";
                break;
            case 'ü':
                str = "u";
                break;
            case 'ý':
                str = "y";
                break;
            case 'þ':
                str = "p";
                break;
            case 'ÿ':
                str = "y";
                break;
            case 'ß':
                str = "ss";
                break;
            default:
                str = String.valueOf(c);
                if (str.matches("[a-zA-Z0-9]")) {
                    return str;
                } else if (str.compareTo(".") == 0) {
                    return (isAnchor ? defchar : str);
                } else if (str.compareTo("/") == 0) {
                    return (isAnchor ? defchar : str);
                } else if (str.compareTo("\\") == 0) {
                    return (isAnchor ? defchar : str);
                } else {
                    return defchar;
                }
        }
        return str;
    }

}
