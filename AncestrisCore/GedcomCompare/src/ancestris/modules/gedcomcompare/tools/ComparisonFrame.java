/*
 * Ancestris - http://www.ancestris.org
 * 
 * Copyright 2015-2020 Ancestris
 * 
 * Author: Frédéric Lapeyre (frederic@ancestris.org).
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 */
package ancestris.modules.gedcomcompare.tools;

import ancestris.modules.gedcomcompare.GedcomCompareTopComponent;
import ancestris.util.swing.DialogManager;
import ancestris.util.swing.FileChooserBuilder;
import java.awt.Container;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseListener;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.List;

import java.util.Set;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import org.openide.util.NbBundle;

/**
 *
 * @author frederic
 */
public class ComparisonFrame extends DataFrame {

    private Set<ComparedGedcom> gedcomPair = null;
    private STMap stMap1 = null;
    private STMap stMap2 = null;
    private STMap stIntersection = null;

    private CompareMapPanel mapPanel = null;
    private CompareListPanel listPanel = null;

    public ComparisonFrame(GedcomCompareTopComponent tstc, ComparedGedcom gedcomFrame1, ComparedGedcom gedcomFrame2) {
        super(NbBundle.getMessage(ComparisonFrame.class, "TITL_Comparison"));
        this.owner = tstc;
        gedcomPair = new HashSet<>();
        gedcomPair.add(gedcomFrame1);
        gedcomPair.add(gedcomFrame2);

        initComponents();
        
        setComponentPopupMenu(null);
        Container pane = ((BasicInternalFrameUI) getUI()).getNorthPane();
        JButton menuButton = (JButton) pane.getComponent(0);
        MouseListener[] mls = menuButton.getMouseListeners();
        if (mls.length>1 && mls[1] instanceof MouseAdapter) {
            menuButton.removeMouseListener(mls[1]);
        }
        
        reset();
    }

    public void reset() {
        stMap1 = null;
        stMap2 = null;
        stIntersection = null;
        lastCityLabel.setText(NbBundle.getMessage(ComparisonFrame.class, "ComparisonFrame.lastCityLabel.text", "-"));
        eventLabel.setText(NbBundle.getMessage(ComparisonFrame.class, "ComparisonFrame.eventLabel.text", "-"));
        progressBar.setValue(0);
    }

        
    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        overlapLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        lastCityLabel = new javax.swing.JLabel();
        eventLabel = new javax.swing.JLabel();
        geoButton = new javax.swing.JButton();
        listButton = new javax.swing.JButton();

        setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        setToolTipText(org.openide.util.NbBundle.getMessage(ComparisonFrame.class, "ComparisonFrame.toolTipText")); // NOI18N
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/gedcomcompare/resources/comparegedcom.png"))); // NOI18N
        setVisible(true);

        overlapLabel.setFont(overlapLabel.getFont().deriveFont(overlapLabel.getFont().getSize()-1f));
        org.openide.awt.Mnemonics.setLocalizedText(overlapLabel, org.openide.util.NbBundle.getMessage(ComparisonFrame.class, "ComparisonFrame.overlapLabel.text")); // NOI18N

        progressBar.setFont(progressBar.getFont().deriveFont(progressBar.getFont().getStyle() | java.awt.Font.BOLD, progressBar.getFont().getSize()-2));
		progressBar.setToolTipText(org.openide.util.NbBundle.getMessage(ComparisonFrame.class, "ComparisonFrame.progressBar.toolTipText")); // NOI18N
        progressBar.setStringPainted(true);

        lastCityLabel.setFont(lastCityLabel.getFont().deriveFont(lastCityLabel.getFont().getSize()-1f));
        lastCityLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/gedcomcompare/resources/indi.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(lastCityLabel, org.openide.util.NbBundle.getMessage(ComparisonFrame.class, "ComparisonFrame.lastCityLabel.text")); // NOI18N
        lastCityLabel.setToolTipText(org.openide.util.NbBundle.getMessage(ComparisonFrame.class, "ComparisonFrame.lastCityLabel.toolTipText")); // NOI18N

        eventLabel.setFont(eventLabel.getFont().deriveFont(eventLabel.getFont().getSize()-1f));
        eventLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/gedcomcompare/resources/even.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(eventLabel, org.openide.util.NbBundle.getMessage(ComparisonFrame.class, "ComparisonFrame.eventLabel.text")); // NOI18N
        eventLabel.setToolTipText(org.openide.util.NbBundle.getMessage(ComparisonFrame.class, "ComparisonFrame.eventLabel.toolTipText")); // NOI18N

        geoButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/gedcomcompare/resources/geo.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(geoButton, org.openide.util.NbBundle.getMessage(ComparisonFrame.class, "ComparisonFrame.geoButton.text")); // NOI18N
        geoButton.setToolTipText(org.openide.util.NbBundle.getMessage(ComparisonFrame.class, "ComparisonFrame.geoButton.toolTipText")); // NOI18N
        geoButton.setPreferredSize(new java.awt.Dimension(34, 28));
        geoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                geoButtonActionPerformed(evt);
            }
        });

        listButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/gedcomcompare/resources/list.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(listButton, org.openide.util.NbBundle.getMessage(ComparisonFrame.class, "ComparisonFrame.listButton.text")); // NOI18N
        listButton.setToolTipText(org.openide.util.NbBundle.getMessage(ComparisonFrame.class, "ComparisonFrame.listButton.toolTipText")); // NOI18N
        listButton.setPreferredSize(new java.awt.Dimension(34, 28));
        listButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(overlapLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE))
                    .addComponent(lastCityLabel)
                    .addComponent(eventLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(geoButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(listButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(overlapLabel)
                            .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lastCityLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(eventLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(geoButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(listButton, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void geoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_geoButtonActionPerformed
        showGeoView();
    }//GEN-LAST:event_geoButtonActionPerformed

    private void listButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listButtonActionPerformed
        showListView();
    }//GEN-LAST:event_listButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel eventLabel;
    private javax.swing.JButton geoButton;
    private javax.swing.JLabel lastCityLabel;
    private javax.swing.JButton listButton;
    private javax.swing.JLabel overlapLabel;
    private javax.swing.JProgressBar progressBar;
    // End of variables declaration//GEN-END:variables

    public boolean contains(ComparedGedcom gedcomFrame1, ComparedGedcom gedcomFrame2) {
        return (gedcomPair.contains(gedcomFrame1) && gedcomPair.contains(gedcomFrame2));
    }

    public boolean includesMain() {
        if (gedcomPair.stream().anyMatch((item) -> (item.isMain()))) {
            return true;
        }
        return false;
    }

    public boolean matchID(String id) {
        if (gedcomPair.stream().anyMatch((item) -> (item.getID().equals(id)))) {
            return true;
        }
        return false;
    }

    public boolean contains(ComparedGedcom gedcomFrame) {
        return (gedcomPair.contains(gedcomFrame));
    }

    public void updateMain(LocalGedcomFrame main) {
        if (stMap1 == null || stMap2 == null || stIntersection == null) {
            return;
        }

        if (main.getMap() != stMap1) {
            // swap
            launchCompare(false);
        }
    }

    // ***************
    
    public boolean launchCompare(boolean quiet) {

        if (gedcomPair.size() != 2) {
            displayInstructions("TEXT_Instruction1");
            return false;
        }

        ComparedGedcom[] cd = gedcomPair.toArray(new ComparedGedcom[2]);

        STMap map1 = cd[0].getMap();
        STMap map2 = cd[1].getMap();
        if (map1 == null || map2 == null) {
            if (!quiet) {
                displayInstructions("TEXT_Instruction1");
            }
            return false;
        }
        if (cd[1].isMain()) {
            map1 = cd[1].getMap();
            map2 = cd[0].getMap();
        }

        this.stMap1 = map1;
        this.stMap2 = map2;

        stIntersection = STFactory.intersectSTMaps(map1, map2);

        progressBar.setValue(stIntersection.getOverlap());
        lastCityLabel.setText(NbBundle.getMessage(ComparisonFrame.class, "ComparisonFrame.lastCityLabel.text", stIntersection.getLastCityNb()));
        eventLabel.setText(NbBundle.getMessage(ComparisonFrame.class, "ComparisonFrame.eventLabel.text", stIntersection.getEventNb()));
        owner.updateStatsDisplay();
        
        return true;
    }

    
    private void displayInstructions(String text) {
        DialogManager.create(
                NbBundle.getMessage(ComparisonFrame.class, "TITL_Instruction"),
                NbBundle.getMessage(ComparisonFrame.class, text))
                .setMessageType(DialogManager.INFORMATION_MESSAGE)
                .setDialogId(ComparisonFrame.class)
                .setOptionType(DialogManager.OK_ONLY_OPTION)
                .show();

    }

    private void showGeoView() {

        if (stMap1 == null || stMap2 == null || stIntersection == null) {
            boolean ret = launchCompare(false);
            if (!ret) {
                return;
            }
        }
        
        if (stMap2.isRemote() && !stMap2.isComplete()) {
            displayInstructions("TEXT_Instruction1");
            return;
        }

        if (mapPanel == null) {
            mapPanel = new CompareMapPanel();
        }

        STFactory.printFullSTMap(stMap2);
        
        mapPanel.init(stMap1, stMap2, stIntersection);

        DialogManager.create(NbBundle.getMessage(ComparisonFrame.class, "TITL_Map"), mapPanel)
                .setMessageType(DialogManager.PLAIN_MESSAGE)
                .setDialogId(CompareMapPanel.class)
                .setOptionType(DialogManager.OK_ONLY_OPTION)
                .show();

        mapPanel.fixZoom();

    }

    private void showListView() {

        if (stMap1 == null || stMap2 == null || stIntersection == null) {
            boolean ret = launchCompare(false);
            if (!ret) {
                return;
            }
        }

        if (listPanel == null) {
            listPanel = new CompareListPanel();
        }

        listPanel.init(stMap1, stMap2, stIntersection);

        JButton extractButton = new JButton(new ImageIcon(getClass().getResource("/ancestris/modules/gedcomcompare/resources/download.png")));  // NOI18N
        extractButton.setEnabled(stIntersection != null && stIntersection.getLastCityNb() > 0);
        extractButton.setToolTipText(NbBundle.getMessage(ComparisonFrame.class, "ComparisonFrame.export.toolTipText"));
        Object action = DialogManager.create(NbBundle.getMessage(ComparisonFrame.class, "TITL_List"), listPanel)
                .setMessageType(DialogManager.PLAIN_MESSAGE)
                .setDialogId(CompareListPanel.class)
                .setOptions(new Object[]{extractButton, DialogManager.OK_OPTION})
                .show();
        if (action == extractButton) {
            extractTable();
        }
    }

    private void extractTable() {
        File file = new FileChooserBuilder(ComparisonFrame.class)
                .setTitle(NbBundle.getMessage(ComparisonFrame.class, "ComparisonFrame.export"))
                .setApproveText(NbBundle.getMessage(ComparisonFrame.class, "ComparisonFrame.export"))
                .setFileHiding(true)
                .setParent(this)
                .setFileFilter(new FileNameExtensionFilter(NbBundle.getMessage(ComparisonFrame.class, "ComparisonFrame.export.filter.text"), "txt", "csv"))
                .setDefaultExtension(FileChooserBuilder.getTextFilter().getExtensions()[0])
                .setDefaultBadgeProvider()
                .setDefaultWorkingDirectory(new File(System.getProperty("user.home")))
                .showSaveDialog(true);
        if (file == null) {
            return;
        }
        try {
            tsvExport(file);
            DialogManager.create(NbBundle.getMessage(ComparisonFrame.class, "ComparisonFrame.export"),
                    NbBundle.getMessage(ComparisonFrame.class, "ComparisonFrame.export.success", file.getAbsoluteFile())).show();
        } catch (IOException e) {
            DialogManager.createError(NbBundle.getMessage(ComparisonFrame.class, "ComparisonFrame.export"),
                    NbBundle.getMessage(ComparisonFrame.class, "ComparisonFrame.export.error", file.getAbsoluteFile())).show();
        }
    }

    public void tsvExport(File file) throws IOException {

        final FileWriter writer = new FileWriter(file);

        writer.write(stMap1.getName() + "\t");
        writer.write(stMap2.getName());
        writer.write("\n");

        for (Object line : stIntersection.getData()) {
            Object[] cells = (Object[]) line;
            writer.write((String) cells[1] + "\t");
            writer.write((String) cells[2] + "\t");
            writer.write("\n");
        }
        writer.close();
    }

    public Set<String> getIntersectionKeys() {
        if (stIntersection == null) {
            launchCompare(true);
        }
        return stIntersection != null ? stIntersection.keySet() : null;
    }

    
    
    // Stats

    public int getOverlap(int maxoverlap) {
        return stIntersection == null || stIntersection.getOverlap() <= maxoverlap ? maxoverlap : stIntersection.getOverlap();
    }
    
    public int getLastCityNb() {
        return stIntersection != null ? stIntersection.getLastCityNb() : 0;
    }
    
    public int getEventNb() {
        return stIntersection != null ? stIntersection.getEventNb() : 0;
    }
    
    public List<String> getAreaCityNames() {
        return stIntersection.getAreaCityNames();
    }

    
    
    
}
