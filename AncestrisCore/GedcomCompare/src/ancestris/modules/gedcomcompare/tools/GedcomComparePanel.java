/*
 * Ancestris - http://www.ancestris.org
 * 
 * Copyright 2015-2020 Ancestris
 * 
 * Author: Frédéric Lapeyre (frederic@ancestris.org).
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 */
package ancestris.modules.gedcomcompare.tools;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.Insets;
import java.awt.Rectangle;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.beans.PropertyVetoException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JInternalFrame;
import org.openide.util.Exceptions;

/**
 *
 * @author frederic
 */
public class GedcomComparePanel extends javax.swing.JPanel {

    private final int H_GAP = 10;
    private final int V_GAP = 10;
    private final int HORIZONTAL_SIZE = 970;
    private final int VERTICAL_SIZE = 600;
    
    private GraphicDesktopPane gDesktopPane;
    
    String isFirstTime = null;
    
    /**
     * Creates new form GedcomComparePanel
     */
    public GedcomComparePanel() {
        initComponents();
        gDesktopPane.setLayout(null);
        jScrollPane.getVerticalScrollBar().setUnitIncrement(12);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gDesktopPane = new GraphicDesktopPane();
        jScrollPane = new DesktopScrollPane(gDesktopPane);
        jDesktopPane = gDesktopPane;

        jDesktopPane.setAutoscrolls(true);

        javax.swing.GroupLayout jDesktopPaneLayout = new javax.swing.GroupLayout(jDesktopPane);
        jDesktopPane.setLayout(jDesktopPaneLayout);
        jDesktopPaneLayout.setHorizontalGroup(
            jDesktopPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 645, Short.MAX_VALUE)
        );
        jDesktopPaneLayout.setVerticalGroup(
            jDesktopPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 472, Short.MAX_VALUE)
        );

        jScrollPane.setViewportView(jDesktopPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDesktopPane jDesktopPane;
    private javax.swing.JScrollPane jScrollPane;
    // End of variables declaration//GEN-END:variables

    
    /**
     * Place frames on the panel
     * - the main frame on the top left
     * - then all the others in a circle around
     * - staring with the local ones
     * - the remote ones next
     * - without overlaps
     * - 
    */
    public void placeFrames(List<? extends DataFrame> gframes, List<ComparisonFrame> cframes, boolean create) {

        // locate frame types
        DataFrame mainFrame = null;
        List<DataFrame> otherFrames = new ArrayList<>();
        List<DataFrame> tmpRemoteFrames = new ArrayList<>();
        Insets insets = gDesktopPane.getInsets();
        
        for (DataFrame f : gframes) {
            f.setIconifiable(false);  // already set in design view, so just to remember explicitly
            if (f.isMain() && mainFrame == null) {
                mainFrame = f;
                continue;
            } 
            if (f.isRemote()) {
                if (f.isVisible()) {
                    tmpRemoteFrames.add(f);
                }
            } else {
                otherFrames.add(f);
            }
            
        }
        // put all non-main frames in one single list
        for (DataFrame frame : tmpRemoteFrames) {
            otherFrames.add(frame);
        }
        
        //
        // Main frame is at insets.left, top
        //
        if (mainFrame != null) {
            if (create && mainFrame.getParent() == null) {
                gDesktopPane.add(mainFrame);
                mainFrame.addComponentListener(new ComponentAdapter() {
                    @Override
                    public void componentMoved(ComponentEvent e) {
                        gDesktopPane.repaint();
                    }
                });
            }
            Dimension size = mainFrame.getPreferredSize();
            mainFrame.setBounds(insets.left + H_GAP, insets.top + V_GAP, size.width, size.height);
            gDesktopPane.revalidate();
            gDesktopPane.repaint();
        }

        if (!otherFrames.isEmpty()) {
            int frameWidth = otherFrames.get(0).getPreferredSize().width;
            int frameHeight = otherFrames.get(0).getPreferredSize().height;
            
            double myWidth = getSize().width;
            double myHeight = getSize().height;
            if (myWidth < 50) {
                myWidth = HORIZONTAL_SIZE;
            }
            if ( myHeight < 50) {
                myHeight = VERTICAL_SIZE;
            }
            
            double newHeight = setFrames(otherFrames, frameWidth, frameHeight, myWidth, myHeight, create);
            if (newHeight > myHeight) {
                setFrames(otherFrames, frameWidth, frameHeight, myWidth, newHeight, false);
            }
        }
        
        if (cframes == null) {
            return;
        }
        
        // Place comparison frames
        for (ComparisonFrame f : cframes) {
            // if none of the pair is main, skip;
            if (!f.includesMain()) {
                f.setVisible(false);
                removeLink(f);
                continue;
            }
            
            // Identify gedcom pair (from list of displayed ComparedGedcom Frames).
            List<Component> comps = new ArrayList<>();
            for (Component c : gDesktopPane.getComponents()) {
                if (!(c instanceof ComparedGedcom)) {
                    continue;
                }
                if (f.matchID(((ComparedGedcom) c).getID()) && c.isVisible()) {
                    comps.add(c);
                }
            }
            if (comps.size() != 2) {
                continue;
            }

            f.setVisible(true);
            
            // Identify their respective positions
            Rectangle r1 = comps.get(0).getBounds();
            Rectangle r2 = comps.get(1).getBounds();
            Dimension dim = f.getPreferredSize();
            double dx = (r1.x + r2.x)/2 + (r1.width+r2.width)/4 - dim.width/2;
            double dy = (r1.y + r2.y)/2 + (r1.height+r2.height)/4 - dim.height/2;
            setFrame(f, dx, dy, false);
            
            // Draw the link on each side, the main frame on the left
            removeLink(f);
            ComparedGedcom f0 = (ComparedGedcom)comps.get(0);
            if (f0.isMain()) {
                linkFrames(comps.get(0), f);
                linkFrames(f, comps.get(1));
            } else {
                linkFrames(comps.get(1), f);
                linkFrames(f, comps.get(0));
            }
        }
        
        // Order focus sequence
        for (DataFrame frame : otherFrames) {
            frame.focusOther();
        }

                    
        
    }
    
    private double setFrames(List<DataFrame> otherFrames, int frameWidth, int frameHeight, double myWidth, double myHeight, boolean create) {

        double a = frameWidth + H_GAP;
        double b = frameHeight + V_GAP;
        double H = myWidth - a - 20; // reduce from scroll bar width
        double V = myHeight - b;

        double x = H;
        double y = V_GAP;
        String direction = "V";
        for (DataFrame frame : otherFrames) {
            setFrame(frame, x, y, create);
            // recalc x, y
            if (direction.equals("V")) {
                double y2 = y + b;
                if (y2 > V) {
                    y = y2;
                    x = H_GAP;
                    continue;
                }
                double x2 = H / V * Math.sqrt(V * V - y2 * y2); // ellips
                if ((x - x2) > a) {
                    direction = "H";
                } else {
                    x = x2;
                    y = y2;
                    continue;
                }
            }
            if (direction.equals("H")) {
                x = x - a;
                if (x < H_GAP) {
                    x = H_GAP;
                    y = y + b;
                    direction = "V";
                    continue;
                }
                y = V / H * Math.sqrt(H * H - x * x); // ellips
            }
        }
        
        return y; // + frameHeight + V_GAP;
    }

    private void setFrame(DataFrame frame, double dx, double dy, boolean create) {
        Dimension size = frame.getPreferredSize();
        frame.setBounds((int) dx, (int) dy, size.width, size.height);
        if (create && frame.getParent() == null) {
            gDesktopPane.add(frame);
            frame.addComponentListener(new ComponentAdapter() {
                @Override
                public void componentMoved(ComponentEvent e) {
                    gDesktopPane.repaint();
                }
            });
        }
        gDesktopPane.revalidate();
        gDesktopPane.repaint();
    }

    
    public void addFrame(JInternalFrame frame) {
        gDesktopPane.add(frame);
        frame.addComponentListener(new ComponentAdapter() {

            @Override
            public void componentMoved(ComponentEvent e) {
                gDesktopPane.repaint();
            }
        });
        frame.setVisible(true);
        frame.moveToFront();
        try {
            frame.setSelected(true);
        } catch (PropertyVetoException ex) {
            Exceptions.printStackTrace(ex);
        }
        gDesktopPane.setSelectedFrame(frame);
        gDesktopPane.revalidate();
        gDesktopPane.repaint();
    }

    public void removeFrame(Object o) {
        gDesktopPane.remove((JInternalFrame) o);
        gDesktopPane.revalidate();
        gDesktopPane.repaint();
    }

    public void linkFrames(Object o1, Object o2) {
        gDesktopPane.addLink((JInternalFrame) o1, (JInternalFrame) o2);
    }

    public void removeLink(Object o) {
        gDesktopPane.removeLink((JInternalFrame) o);
        gDesktopPane.revalidate();
        gDesktopPane.repaint();
    }

    public void showFrame(JInternalFrame frame, boolean show) {
        frame.setVisible(show);
        gDesktopPane.revalidate();
        gDesktopPane.repaint();
    }

    
}
