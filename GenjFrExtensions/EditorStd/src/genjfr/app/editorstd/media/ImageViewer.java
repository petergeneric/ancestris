/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ImageViewer.java
 *
 * Created on 13 nov. 2010, 21:36:57
 */
package genjfr.app.editorstd.media;

import genj.util.swing.ImageIcon;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Insets;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.event.AdjustmentEvent;
import java.awt.event.AdjustmentListener;
import java.awt.image.BufferedImage;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSlider;
import org.openide.util.ImageUtilities;

/**
 *
 * @author frederic
 */
public class ImageViewer extends javax.swing.JPanel {

    private MapPane mapPane;
    private boolean fitIsOn = false;
    private boolean zooming = true;

    private static ImageIcon fitIcon = new ImageIcon(ImageUtilities.loadImage("genjfr/app/editorstd/media/fit.png", true));
    private static ImageIcon origIcon = new ImageIcon(ImageUtilities.loadImage("genjfr/app/editorstd/media/orig.png", true));

    /** Creates new form ImageViewer */
    public ImageViewer(MediaWrapper mediaWrapper) {
        initComponents();
        fitSize.setIcon(fitIcon);
        origSize.setIcon(origIcon);
        imagePane.setLayout(new BorderLayout());
        mapPane = new MapPane(mediaWrapper.getImage());
        JScrollPane scrollpane = new JScrollPane(mapPane);
        AdjustmentListener listener = new MyAdjustmentListener();
        scrollpane.getHorizontalScrollBar().addAdjustmentListener(listener);
        scrollpane.getVerticalScrollBar().addAdjustmentListener(listener);
        imagePane.add(scrollpane, BorderLayout.CENTER);
        setImage(mediaWrapper);
    }

    public final void setImage(MediaWrapper mediaWrapper) {
        mapPane.setImage(mediaWrapper.getImage());
        fitSize.doClick();
        mapPane.setCenter(mapPane.getDefaultCenter());
        zooming = false;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        zoom = new javax.swing.JSlider();
        origSize = new javax.swing.JButton();
        fitSize = new javax.swing.JButton();
        imagePane = new javax.swing.JPanel();

        zoom.setMajorTickSpacing(100);
        zoom.setMaximum(500);
        zoom.setMinimum(1);
        zoom.setMinorTickSpacing(50);
        zoom.setOrientation(javax.swing.JSlider.VERTICAL);
        zoom.setValue(100);
        zoom.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                zoomStateChanged(evt);
            }
        });

        origSize.setText(org.openide.util.NbBundle.getMessage(ImageViewer.class, "ImageViewer.origSize.text")); // NOI18N
        origSize.setIconTextGap(0);
        origSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                origSizeActionPerformed(evt);
            }
        });

        fitSize.setText(org.openide.util.NbBundle.getMessage(ImageViewer.class, "ImageViewer.fitSize.text")); // NOI18N
        fitSize.setIconTextGap(0);
        fitSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fitSizeActionPerformed(evt);
            }
        });

        imagePane.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                imagePaneComponentResized(evt);
            }
        });

        javax.swing.GroupLayout imagePaneLayout = new javax.swing.GroupLayout(imagePane);
        imagePane.setLayout(imagePaneLayout);
        imagePaneLayout.setHorizontalGroup(
            imagePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 272, Short.MAX_VALUE)
        );
        imagePaneLayout.setVerticalGroup(
            imagePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 224, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(fitSize)
                    .addComponent(origSize)
                    .addComponent(zoom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(imagePane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(zoom, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(origSize)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fitSize))
            .addComponent(imagePane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void zoomStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_zoomStateChanged
        fitIsOn = false;
        zooming = true;
        mapPane.setScale(((JSlider) evt.getSource()).getValue());
        repaint();
        zooming = false;
    }//GEN-LAST:event_zoomStateChanged

    private void origSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_origSizeActionPerformed
        zoom.setValue(100);
        fitIsOn = false;
    }//GEN-LAST:event_origSizeActionPerformed

    private void fitSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fitSizeActionPerformed
        mapPane.fit(imagePane, zoom);
        fitIsOn = true;
        mapPane.setCenter(mapPane.getDefaultCenter());
    }//GEN-LAST:event_fitSizeActionPerformed

    private void imagePaneComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_imagePaneComponentResized
        if (fitIsOn) {
            fitSize.doClick();
        }
    }//GEN-LAST:event_imagePaneComponentResized
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton fitSize;
    private javax.swing.JPanel imagePane;
    private javax.swing.JButton origSize;
    private javax.swing.JSlider zoom;
    // End of variables declaration//GEN-END:variables

    private class MyAdjustmentListener implements AdjustmentListener {

        @Override
        public void adjustmentValueChanged(AdjustmentEvent evt) {
            if (!zooming && evt.getValueIsAdjusting()) {
                mapPane.setCenter(mapPane.getCenter());
            }
        }
    }

    private class MapPane extends javax.swing.JPanel {

        private BufferedImage image;
        private double scale = 1;
        private Dimension center;
        //private final int precision = 100000;

        /** Creates a new instance with given image.
         * @param image The initial image.
         */
        public MapPane(BufferedImage image) {
            super();
            setImage(image);
        }

        private void setImage(BufferedImage image) {
            this.image = image;
            setCenter(getDefaultCenter());
            recalculateAndResetSize();
            repaint();
        }

        /** Recalculer correctement la taille du panel.
         */
        private void recalculateAndResetSize() {
            int width = 0;
            int height = 0;
            // Tenir compte de la bordure optionnelle du panel.
            Insets insets = getInsets();
            width += insets.left + insets.right;
            height += insets.top + insets.bottom;
            // Tenir compte de la taille de l'image.
            if (image != null) {
                width += image.getWidth() * scale;
                height += image.getHeight() * scale;
            }
            // Resizer
            Dimension size = new Dimension(width, height);
            setSize(size);
            setMinimumSize(size);
            setPreferredSize(size);
            // Recenter
            if (this.getParent() != null) {
                int panelWidth = size.width - (insets.left + insets.right);
                int panelHeight = size.height - (insets.top + insets.bottom);
                int scaledImageWidth = (int) (image.getWidth() * scale);
                int scaledImageHeight = (int) (image.getHeight() * scale);
                if (panelWidth == scaledImageWidth && panelHeight == scaledImageHeight) {
                    int viewPointX = (int) (center.width * scale - (getVisibleRect().width / 2));
                    int viewPointY = (int) (center.height * scale - (getVisibleRect().height / 2));
                    ((javax.swing.JViewport) this.getParent()).setViewPosition(new Point(viewPointX, viewPointY));
                }
            }

        }

        /** Sets the scale factor to given value.
         * @param value The new value.
         */
        public void setScale(int value) {
            this.scale = ((double) value) / 100;
            recalculateAndResetSize();
            repaint();
        }

        /** Fits the image to the pane.
         * Calculates the relevant scale and sets it
         */
        public void fit(JPanel imagePane, JSlider zoom) {
            Dimension size = imagePane.getSize();
            int viewWidth = size.width;
            int viewHeight = size.height;
            double scaleWidth = ((double) viewWidth) / image.getWidth();
            double scaleHeight = ((double) viewHeight) / image.getHeight();
            int value = (int) (Math.min(scaleWidth, scaleHeight) * 100);
            zoom.setValue(value);
        }

        @Override
        protected void paintComponent(Graphics graphics) {
            super.paintComponent(graphics);
            Graphics2D g2d = (Graphics2D) graphics;
            if (image != null) {
                Insets insets = getInsets();
                Dimension size = getSize();
                int panelWidth = size.width - (insets.left + insets.right);
                int panelHeight = size.height - (insets.top + insets.bottom);
                int scaledImageWidth = (int) (image.getWidth() * scale);
                int scaledImageHeight = (int) (image.getHeight() * scale);
                int x = (panelWidth - scaledImageWidth) / 2;
                int y = (panelHeight - scaledImageHeight) / 2;
                g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
                g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_OFF);
                g2d.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_NEAREST_NEIGHBOR);
                g2d.drawImage(image, x, y, scaledImageWidth, scaledImageHeight, null);
            }
        }

        private Dimension getDefaultCenter() {
            return new Dimension(image.getWidth() / 2, image.getHeight() / 2);
        }

        private Dimension getCenter() {
            Dimension dim = getDefaultCenter();
            if (this.getParent() != null) {
                Point viewPosition = ((javax.swing.JViewport) this.getParent()).getViewPosition();
                dim.width = (int) ((viewPosition.x + (getVisibleRect().width / 2)) / scale);
                dim.height = (int) ((viewPosition.y + (getVisibleRect().height / 2)) / scale);
            }
            return dim;
        }

        private void setCenter(Dimension dim) {
            this.center = dim;
        }
    }
}
