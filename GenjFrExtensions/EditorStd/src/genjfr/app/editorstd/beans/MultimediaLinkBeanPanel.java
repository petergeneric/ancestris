/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MultimediaLinkBeanPanel.java
 *
 * Created on 23 oct. 2010, 16:24:23
 */
package genjfr.app.editorstd.beans;

import genj.gedcom.Entity;
import genj.gedcom.Gedcom;
import genj.gedcom.GedcomException;
import genj.gedcom.Media;
import genj.gedcom.Property;
import genj.gedcom.PropertyXRef;
import genj.util.swing.ImageIcon;
import genjfr.app.editorstd.media.JListWithMedia;
import genjfr.app.editorstd.media.MediaWrapper;
import java.awt.Toolkit;
import java.awt.event.ItemEvent;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.InputVerifier;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.SpinnerNumberModel;
import javax.swing.text.JTextComponent;
import org.openide.util.ImageUtilities;

/**
 *
 * @author frederic
 */
public class MultimediaLinkBeanPanel extends BeanPanelParent {

    private DefaultListModel mediaList;
    private List<MultimediaLinkBean> multimediaLinkBeanList = new ArrayList<MultimediaLinkBean>();
    private int oldSpinValue = 0;
    //
    private Entity[] mediaEntitiesList = new Entity[1];
    private boolean busy = false;
    private static ImageIcon addIcon = new ImageIcon(ImageUtilities.loadImage("genjfr/app/editorstd/images/add.png", true));
    private static ImageIcon removeIcon = new ImageIcon(ImageUtilities.loadImage("genjfr/app/editorstd/images/remove.png", true));
    private static ImageIcon linkIcon = new ImageIcon(ImageUtilities.loadImage("genjfr/app/editorstd/images/link.png", true));
    //
    private FieldInputVerifier verifier = new FieldInputVerifier();

    /** 
     * Creates new form MultimediaLinkBeanPanel
     */
    public MultimediaLinkBeanPanel() {
        mediaList = new DefaultListModel();
        initComponents();
        addButton.setIcon(addIcon);
        removeButton.setIcon(removeIcon);
        linkButton.setIcon(linkIcon);
    }

    /**
     * Initialisation of panel after constructor
     */
    public void init() {
        multimedia_file_reference.setInputVerifier(verifier);
        ((JTextComponent) xref_obje.getEditor().getEditorComponent()).setInputVerifier(verifier);
        descriptive_title.setInputVerifier(verifier);
        multimedia_format.setInputVerifier(verifier);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        mediaListBox = new JListWithMedia();
        addButton = new javax.swing.JButton();
        linkButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        upDownButton = new javax.swing.JSpinner();
        jPanel3 = new javax.swing.JPanel();
        xref_obje = new javax.swing.JComboBox(mediaEntitiesList);
        jLabel2 = new javax.swing.JLabel();
        descriptive_title = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        multimedia_format = new javax.swing.JTextField();
        multimedia_file_reference = new javax.swing.JTextField();
        fileSearchButton = new javax.swing.JButton();
        mediaTabbedPane = new javax.swing.JTabbedPane();
        mediaPanel = new genjfr.app.editorstd.media.MediaPanel();
        noteStructureBeanPanel = new genjfr.app.editorstd.beans.NoteStructureBeanPanel();
        seeMediaRecordButton = new javax.swing.JButton();
        externalLabel = new javax.swing.JLabel();
        internalLabel = new javax.swing.JLabel();

        jSplitPane1.setOpaque(true);

        jPanel1.setMinimumSize(new java.awt.Dimension(120, 100));
        jPanel1.setPreferredSize(new java.awt.Dimension(120, 314));

        mediaListBox.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        mediaListBox.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                mediaListBoxValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(mediaListBox);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 325, Short.MAX_VALUE)
        );

        addButton.setText(org.openide.util.NbBundle.getMessage(MultimediaLinkBeanPanel.class, "MultimediaLinkBeanPanel.addButton.text")); // NOI18N
        addButton.setPreferredSize(new java.awt.Dimension(29, 29));
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        linkButton.setText(org.openide.util.NbBundle.getMessage(MultimediaLinkBeanPanel.class, "MultimediaLinkBeanPanel.linkButton.text")); // NOI18N
        linkButton.setPreferredSize(new java.awt.Dimension(29, 29));
        linkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linkButtonActionPerformed(evt);
            }
        });

        removeButton.setText(org.openide.util.NbBundle.getMessage(MultimediaLinkBeanPanel.class, "MultimediaLinkBeanPanel.removeButton.text")); // NOI18N
        removeButton.setPreferredSize(new java.awt.Dimension(29, 29));
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        upDownButton.setModel(new javax.swing.SpinnerNumberModel(1, 0, 2, 1));
        upDownButton.setPreferredSize(new java.awt.Dimension(10, 28));
        upDownButton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                upDownButtonStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(linkButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(upDownButton, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 325, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(linkButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(removeButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(upDownButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jSplitPane1.setLeftComponent(jPanel2);

        xref_obje.setEditable(true);
        xref_obje.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                xref_objeItemStateChanged(evt);
            }
        });

        jLabel2.setText(org.openide.util.NbBundle.getMessage(MultimediaLinkBeanPanel.class, "MultimediaLinkBeanPanel.jLabel2.text")); // NOI18N

        descriptive_title.setText(org.openide.util.NbBundle.getMessage(MultimediaLinkBeanPanel.class, "MultimediaLinkBeanPanel.descriptive_title.text")); // NOI18N

        jLabel3.setText(org.openide.util.NbBundle.getMessage(MultimediaLinkBeanPanel.class, "MultimediaLinkBeanPanel.jLabel3.text")); // NOI18N

        multimedia_format.setText(org.openide.util.NbBundle.getMessage(MultimediaLinkBeanPanel.class, "MultimediaLinkBeanPanel.multimedia_format.text")); // NOI18N

        multimedia_file_reference.setText(org.openide.util.NbBundle.getMessage(MultimediaLinkBeanPanel.class, "MultimediaLinkBeanPanel.multimedia_file_reference.text")); // NOI18N

        fileSearchButton.setText(org.openide.util.NbBundle.getMessage(MultimediaLinkBeanPanel.class, "MultimediaLinkBeanPanel.fileSearchButton.text")); // NOI18N
        fileSearchButton.setMaximumSize(new java.awt.Dimension(29, 29));
        fileSearchButton.setMinimumSize(new java.awt.Dimension(29, 29));
        fileSearchButton.setPreferredSize(new java.awt.Dimension(29, 29));
        fileSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileSearchButtonActionPerformed(evt);
            }
        });

        mediaTabbedPane.addTab(org.openide.util.NbBundle.getMessage(MultimediaLinkBeanPanel.class, "MultimediaLinkBeanPanel.mediaPanel.TabConstraints.tabTitle"), mediaPanel); // NOI18N
        mediaTabbedPane.addTab(org.openide.util.NbBundle.getMessage(MultimediaLinkBeanPanel.class, "MultimediaLinkBeanPanel.noteStructureBeanPanel.TabConstraints.tabTitle"), noteStructureBeanPanel); // NOI18N

        seeMediaRecordButton.setText(org.openide.util.NbBundle.getMessage(MultimediaLinkBeanPanel.class, "MultimediaLinkBeanPanel.seeMediaRecordButton.text")); // NOI18N
        seeMediaRecordButton.setMaximumSize(new java.awt.Dimension(29, 29));
        seeMediaRecordButton.setMinimumSize(new java.awt.Dimension(29, 29));
        seeMediaRecordButton.setPreferredSize(new java.awt.Dimension(29, 29));
        seeMediaRecordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seeMediaRecordButtonActionPerformed(evt);
            }
        });

        externalLabel.setText(org.openide.util.NbBundle.getMessage(MultimediaLinkBeanPanel.class, "MultimediaLinkBeanPanel.externalLabel.text")); // NOI18N
        externalLabel.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        internalLabel.setText(org.openide.util.NbBundle.getMessage(MultimediaLinkBeanPanel.class, "MultimediaLinkBeanPanel.internalLabel.text")); // NOI18N
        internalLabel.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mediaTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 433, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(externalLabel)
                            .addComponent(internalLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addComponent(descriptive_title, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(multimedia_format, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(xref_obje, 0, 337, Short.MAX_VALUE)
                                    .addComponent(multimedia_file_reference, javax.swing.GroupLayout.DEFAULT_SIZE, 337, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(seeMediaRecordButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(fileSearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(externalLabel)
                    .addComponent(multimedia_file_reference, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fileSearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(internalLabel)
                    .addComponent(xref_obje, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(seeMediaRecordButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(descriptive_title, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(multimedia_format, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mediaTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                .addContainerGap())
        );

        jSplitPane1.setRightComponent(jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 607, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 384, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void mediaListBoxValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_mediaListBoxValueChanged
        if (mediaListBox.getSelectedIndex() > -1) {
            removeButton.setEnabled(true);
            displayMedia(getMedia().getPropertyParent());
            resetSpinner(mediaListBox.getSelectedIndex());
        } else {
            removeButton.setEnabled(false);
            displayMedia(null);
            resetSpinner(mediaListBox.getSelectedIndex());
        }
    }//GEN-LAST:event_mediaListBoxValueChanged

    private void xref_objeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_xref_objeItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            // Select item in list box if already there, clear selection otherwise
            Entity selectedEntity = (Entity) xref_obje.getSelectedItem();
            boolean found = false;
            for (int i = 0; i < mediaList.size(); i++) {
                Property property = getMedia(i).getPropertyParent();
                if (property instanceof PropertyXRef) {
                    PropertyXRef pRef = (PropertyXRef) property;
                    Entity entity = pRef.getTargetEntity();
                    if (entity instanceof Media && entity == selectedEntity) {
                        if (!busy) {
                            mediaListBox.setSelectedIndex(i);
                        }
                        found = true;
                        break;
                    }
                }
            }
            if (!found) {
                mediaListBox.clearSelection();
            }
            //
            displayProperties((Property) xref_obje.getSelectedItem());
        }
    }//GEN-LAST:event_xref_objeItemStateChanged

    private void fileSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileSearchButtonActionPerformed
        String str = multimedia_file_reference.getText();
        JFileChooser fc = new JFileChooser(str != null ? str.substring(0, Math.max(str.indexOf(" "), str.length())) : "");
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            String relPath = RelativePath.getRelativePath(parentProperty.getGedcom().getOrigin().getFile(), fc.getSelectedFile());
            multimedia_file_reference.setText(relPath);
        }
    }//GEN-LAST:event_fileSearchButtonActionPerformed

    private void seeMediaRecordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seeMediaRecordButtonActionPerformed
        // TODO: go to media record panel viewer for the selected media record
    }//GEN-LAST:event_seeMediaRecordButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        int index = mediaListBox.getSelectedIndex(); //get selected index
        if (index == -1) { //no selection, so insert at beginning
            index = 0;
        } else {           //add after the selected item
            index++;
        }

        // Create external multimedia link
        try {
            Property propChild = parentProperty.addProperty("OBJE", "", index);
            mediaList.insertElementAt(new MediaWrapper(propChild), index);
        } catch (GedcomException ex) {
            //Exceptions.printStackTrace(ex);
        }

        //Select the new item and make it visible.
        mediaListBox.setSelectedIndex(index);
        mediaListBox.ensureIndexIsVisible(index);
    }//GEN-LAST:event_addButtonActionPerformed

    private void linkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linkButtonActionPerformed
        int index = mediaListBox.getSelectedIndex(); //get selected index
        if (index == -1) { //no selection, so insert at beginning
            index = 0;
        } else {           //add after the selected item
            index++;
        }

        // Create internal multimedia link
        try {
            Property propChild = parentProperty.addProperty("OBJE", "", index);
            mediaList.insertElementAt(new MediaWrapper(propChild), index);
        } catch (GedcomException ex) {
            //Exceptions.printStackTrace(ex);
        }

        //Select the new item and make it visible.
        mediaListBox.setSelectedIndex(index);
        mediaListBox.ensureIndexIsVisible(index);

    }//GEN-LAST:event_linkButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        int index = mediaListBox.getSelectedIndex();
        mediaList.remove(index);

        int size = mediaList.getSize();

        if (size == 0) { //Nobody's left, disable button
            removeButton.setEnabled(false);

        } else { //Select an index.
            if (index == mediaList.getSize()) {
                //removed item in last position
                index--;
            }

            mediaListBox.setSelectedIndex(index);
            mediaListBox.ensureIndexIsVisible(index);
        }


    }//GEN-LAST:event_removeButtonActionPerformed

    private void upDownButtonStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_upDownButtonStateChanged
        int newSpinValue = ((Number) upDownButton.getValue()).intValue();
        int moveMe = mediaListBox.getSelectedIndex();

        if (moveMe < 0) {
            return;
        }
        if (newSpinValue > oldSpinValue) {
            //UP ARROW BUTTON
            if (moveMe != 0) {
                //not already at top
                swap(moveMe, moveMe - 1);
                mediaListBox.setSelectedIndex(moveMe - 1);
                mediaListBox.ensureIndexIsVisible(moveMe - 1);
            }
        } else if (newSpinValue < oldSpinValue) {
            //DOWN ARROW BUTTON
            if (moveMe != mediaList.getSize() - 1) {
                //not already at bottom
                swap(moveMe, moveMe + 1);
                mediaListBox.setSelectedIndex(moveMe + 1);
                mediaListBox.ensureIndexIsVisible(moveMe + 1);
            }
        }
        oldSpinValue = newSpinValue;
    }//GEN-LAST:event_upDownButtonStateChanged
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JTextField descriptive_title;
    private javax.swing.JLabel externalLabel;
    private javax.swing.JButton fileSearchButton;
    private javax.swing.JLabel internalLabel;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JButton linkButton;
    private javax.swing.JList mediaListBox;
    private genjfr.app.editorstd.media.MediaPanel mediaPanel;
    private javax.swing.JTabbedPane mediaTabbedPane;
    private javax.swing.JTextField multimedia_file_reference;
    private javax.swing.JTextField multimedia_format;
    private genjfr.app.editorstd.beans.NoteStructureBeanPanel noteStructureBeanPanel;
    private javax.swing.JButton removeButton;
    private javax.swing.JButton seeMediaRecordButton;
    private javax.swing.JSpinner upDownButton;
    private javax.swing.JComboBox xref_obje;
    // End of variables declaration//GEN-END:variables

    public void setProperties(Property parentProperty) {
        this.parentProperty = parentProperty;

        // Initialise list of media links in the parent property
        initMediaList();
        if (mediaListBox.getModel().getSize() > 0) {
            mediaListBox.setSelectedIndex(0);
            //displayMedia(mediaList[mediaListBox.getSelectedIndex()].getPropertyParent()); // state changed not adjusting at initialisation, so force display
            displayMedia(getMedia().getPropertyParent()); // state changed not adjusting at initialisation, so force display
        }

        // set the rest
//        multimediaLinkBean.setFile(parentProperty.getProperty(MultimediaLinkBean.PROP_FILE));

//        addressStructure.setAddr((PropertyMultilineValue) (parentProperty.getProperty(AddressStructureBean.PROP_ADDR)));
//        if (addressStructure.getAddr() != null) {
//            addressStructure.setAddr1((PropertySimpleValue) (addressStructure.getAddr().getProperty(AddressStructureBean.PROP_ADDR1)));
//            addressStructure.setAddr2((PropertySimpleValue) (addressStructure.getAddr().getProperty(AddressStructureBean.PROP_ADDR2)));
//            addressStructure.setCity((PropertyChoiceValue) (addressStructure.getAddr().getProperty(AddressStructureBean.PROP_CITY)));
//            addressStructure.setStae((PropertyChoiceValue) (addressStructure.getAddr().getProperty(AddressStructureBean.PROP_STAE)));
//            addressStructure.setPost((PropertyChoiceValue) (addressStructure.getAddr().getProperty(AddressStructureBean.PROP_POST)));
//            addressStructure.setCtry((PropertyChoiceValue) (addressStructure.getAddr().getProperty(AddressStructureBean.PROP_CTRY)));
//        }
//        addressStructure.setPhon((Property[]) (parentProperty.getProperties(AddressStructureBean.PROP_PHON)));

        // Initialise list of media records in the gedcom
        initEntitiesList();
    }

    /**
     * Initialise list of media links in the parent property. These media will populate the list box
     */
    private void initMediaList() {
        Property[] propList = parentProperty.getProperties("OBJE");
        //List<MediaWrapper> mediaTmpList = new ArrayList<MediaWrapper>();
        for (int i = 0; i < propList.length; i++) {
            Property property = propList[i];
            //mediaTmpList.add(new MediaWrapper(property));
            mediaList.addElement(new MediaWrapper(property));
        }
        //mediaList = mediaTmpList.toArray(new MediaWrapper[1]);
        //mediaListBox.setListData(mediaList);
        mediaListBox.setModel(mediaList);
        resetSpinner(0);
        return;
    }

    /**
     * Get selected media in the list box
     * @return
     */
    private MediaWrapper getMedia() {
        int index = mediaListBox.getSelectedIndex();
        return (index > -1) ? ((MediaWrapper) mediaList.get(index)) : null;
    }

    private MediaWrapper getMedia(int i) {
        return ((MediaWrapper) mediaList.get(i));
    }

    private void resetSpinner(int i) {
        int maximum = (mediaList.getSize() > 0) ? mediaList.getSize() - 1 : 0;
        ((SpinnerNumberModel) (upDownButton.getModel())).setMaximum(maximum);
        if (i >= 0 && i <= maximum) {
            oldSpinValue = maximum - i;
            ((SpinnerNumberModel) (upDownButton.getModel())).setValue(oldSpinValue);
        }
    }

    //Swap two elements in the list.
    private void swap(int a, int b) {
        Object aObject = mediaList.getElementAt(a);
        Object bObject = mediaList.getElementAt(b);
        mediaList.set(a, bObject);
        mediaList.set(b, aObject);
    }

    /**
     * Initialise list of media records in the gedcom ; these records will populate the combo box
     */
    private void initEntitiesList() {
        Gedcom gedcom = parentProperty.getGedcom();
        List<Entity> tempList = new ArrayList<Entity>();
        tempList.add(null);
        tempList.addAll(Arrays.asList(gedcom.getEntities(Gedcom.OBJE, "OBJE:TITL")));
        mediaEntitiesList = tempList.toArray(new Entity[1]);
        xref_obje.setModel(new DefaultComboBoxModel(mediaEntitiesList));
    }

    public void displayProperties() {
//            updateField(address_line, addressStructure.getAddr());
//            updateField(address_line1, addressStructure.getAddr1());
//            updateField(address_line2, addressStructure.getAddr2());
//            updateField(address_city, addressStructure.getCity());
//            updateField(address_state, addressStructure.getStae());
//            updateField(address_postal_code, addressStructure.getPost());
//            updateField(((JTextComponent) address_country.getEditor().getEditorComponent()), addressStructure.getCtry());
//            updateField(addressStructure.getPhon());
    }

    private void displayMedia(Property selectedMedia) {
        if (busy) {
            return;
        }
        busy = true;
        if (selectedMedia == null) {
            displayProperties(null);
        }
        if (selectedMedia instanceof PropertyXRef) {
            enableFields(true);
            PropertyXRef pRef = (PropertyXRef) selectedMedia;
            Entity entity = pRef.getTargetEntity();
            if (entity instanceof Media) {
                if (xref_obje.getSelectedItem() == (Media) entity) {
                    displayProperties((Property) entity);
                } else {
                    xref_obje.setSelectedItem((Media) entity);
                }
            }
        } else {
            enableFields(false);
            displayProperties(selectedMedia);
        }
        busy = false;
    }

    private void enableFields(boolean isInternal) {
        internalLabel.setVisible(isInternal);
        xref_obje.setVisible(isInternal);
        seeMediaRecordButton.setVisible(isInternal);
        if (!isInternal && !busy) {
            xref_obje.setSelectedIndex(0);
        }
        externalLabel.setVisible(!isInternal);
        multimedia_file_reference.setVisible(!isInternal);
        fileSearchButton.setVisible(!isInternal);
        descriptive_title.setEditable(!isInternal);
        multimedia_format.setEditable(!isInternal);
    }

    private void displayProperties(Property selectedMedia) {
        Property pTemp;
        pTemp = (selectedMedia == null) ? null : selectedMedia.getPropertyByPath("OBJE:TITL");
        descriptive_title.setText(pTemp != null ? pTemp.getDisplayValue() : "");
        pTemp = (selectedMedia == null) ? null : selectedMedia.getPropertyByPath("OBJE:FORM");
        multimedia_format.setText(pTemp != null ? pTemp.getDisplayValue() : "");
        pTemp = (selectedMedia == null) ? null : selectedMedia.getPropertyByPath("OBJE:FILE");
        multimedia_file_reference.setText(pTemp != null ? pTemp.getDisplayValue() : "");
        // afficher le media (image, son, video)
        mediaPanel.showMedia((selectedMedia == null) ? null : getMedia());

    }

    /**
     * Class used to detect changes of field and commit gedcom changes for each valid modification
     */
    private class FieldInputVerifier extends InputVerifier {

        public FieldInputVerifier() {
            super();
        }

        @Override
        public boolean shouldYieldFocus(JComponent input) {
            boolean valid = verify(input);

            if (valid) {
                return true;
            } else {
                Toolkit.getDefaultToolkit().beep();
                return false;
            }
        }

        @Override
        public boolean verify(JComponent input) {
            JTextComponent jtc = (JTextComponent) input;
            String fieldText = jtc.getText();
//            if (jtc == address_line && hasFieldChanged(addressStructure.getAddr(), fieldText)) {
//                updateGedcom(parentProperty, addressStructure.getAddr(), AddressStructureBean.PROP_ADDR, fieldText);
//            }
            return true;
        }
    }
}
