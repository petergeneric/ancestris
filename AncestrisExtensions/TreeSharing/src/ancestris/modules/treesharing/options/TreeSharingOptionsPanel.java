/*
 * Ancestris - http://www.ancestris.org
 * 
 * Copyright 2015 Ancestris
 * 
 * Author: Frédéric Lapeyre (frederic@ancestris.org).
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 */
package ancestris.modules.treesharing.options;

import ancestris.modules.treesharing.communication.MemberProfile;
import ancestris.modules.treesharing.panels.MembersPopup;
import ancestris.util.swing.DialogManager;
import java.awt.Component;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.prefs.BackingStoreException;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.UIManager;
import javax.swing.border.Border;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle;
import org.openide.util.NbPreferences;

public final class TreeSharingOptionsPanel extends javax.swing.JPanel implements TableModelListener {

    private final static int IMG_SMALL_WIDTH = 16;
    private final static int IMG_SMALL_HEIGHT = 19;
    
    private final static int IMG_MEDIUM_WIDTH = 51;
    private final static int IMG_MEDIUM_HEIGHT = 62;
    
    public final static int IMG_LARGE_WIDTH = 155;
    public final static int IMG_LARGE_HEIGHT = 186;

    private final ImageIcon ALLOWED_ICON  = new ImageIcon(getClass().getResource("/ancestris/modules/treesharing/resources/allowed.png"));
    private final ImageIcon MEMBER_ICON = new ImageIcon(getClass().getResource("/ancestris/modules/treesharing/resources/friend16.png"));
    

    private final TreeSharingOptionsPanelController controller;
    private static String photoPath = "";
    private static File dest = null;
    private static BufferedImage targetImage = null;
    private static boolean loading = false;
    
    public static final int NO_MATCH = 0; 
    public static final int EXACT_MATCH = 1; 
    public static final int FLASH_MATCH = 2; 
    public static final int LOOSE_MATCH = 3; 
    public static final int MAX_MATCH = 3; 

    public static final String[] MATCHING_MENU = new String[] { 
        NbBundle.getMessage(TreeSharingOptionsPanel.class, "Match"+EXACT_MATCH),
        NbBundle.getMessage(TreeSharingOptionsPanel.class, "Match"+FLASH_MATCH),
        NbBundle.getMessage(TreeSharingOptionsPanel.class, "Match"+LOOSE_MATCH) 
    };
    
    private Map<String, Boolean> jlist1 = null;
    private Map<String, Boolean> jlist2 = null;
    private MyTableModel model1 = null;
    private MyTableModel model2 = null;
            
            
            
            

    TreeSharingOptionsPanel(TreeSharingOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
        loading = false;
    };

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jTextField1 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jPanel4 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(TreeSharingOptionsPanel.class, "TreeSharingOptionsPanel.jLabel5.text")); // NOI18N

        jTextField5.setText(org.openide.util.NbBundle.getMessage(TreeSharingOptionsPanel.class, "TreeSharingOptionsPanel.jTextField5.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel6, org.openide.util.NbBundle.getMessage(TreeSharingOptionsPanel.class, "TreeSharingOptionsPanel.jLabel6.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(TreeSharingOptionsPanel.class, "TreeSharingOptionsPanel.jLabel1.text")); // NOI18N

        jTextField6.setText(org.openide.util.NbBundle.getMessage(TreeSharingOptionsPanel.class, "TreeSharingOptionsPanel.jTextField6.text")); // NOI18N

        jTextField1.setText(org.openide.util.NbBundle.getMessage(TreeSharingOptionsPanel.class, "TreeSharingOptionsPanel.jTextField1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel7, org.openide.util.NbBundle.getMessage(TreeSharingOptionsPanel.class, "TreeSharingOptionsPanel.jLabel7.text")); // NOI18N

        jTextField4.setText(org.openide.util.NbBundle.getMessage(TreeSharingOptionsPanel.class, "TreeSharingOptionsPanel.jTextField4.text")); // NOI18N

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel8, org.openide.util.NbBundle.getMessage(TreeSharingOptionsPanel.class, "TreeSharingOptionsPanel.jLabel8.text")); // NOI18N
        jLabel8.setToolTipText(org.openide.util.NbBundle.getMessage(TreeSharingOptionsPanel.class, "TreeSharingOptionsPanel.jLabel8.toolTipText")); // NOI18N
        jLabel8.setBorder(null);
        jLabel8.setIconTextGap(0);
        jLabel8.setPreferredSize(new java.awt.Dimension(155, 186));
        jLabel8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel8MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jLabel8.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(TreeSharingOptionsPanel.class, "TreeSharingOptionsPanel.jLabel8.AccessibleContext.accessibleName")); // NOI18N
        jLabel8.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(TreeSharingOptionsPanel.class, "TreeSharingOptionsPanel.jLabel8.AccessibleContext.accessibleDescription")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(TreeSharingOptionsPanel.class, "TreeSharingOptionsPanel.jLabel2.text")); // NOI18N

        jTextField2.setText(org.openide.util.NbBundle.getMessage(TreeSharingOptionsPanel.class, "TreeSharingOptionsPanel.jTextField2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(TreeSharingOptionsPanel.class, "TreeSharingOptionsPanel.jLabel4.text")); // NOI18N

        jTextField3.setText(org.openide.util.NbBundle.getMessage(TreeSharingOptionsPanel.class, "TreeSharingOptionsPanel.jTextField3.text")); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4)
                    .addComponent(jLabel7)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTextField5)
                    .addComponent(jTextField2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE)
                    .addComponent(jTextField3)
                    .addComponent(jTextField4)
                    .addComponent(jTextField6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(4, 4, 4)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(TreeSharingOptionsPanel.class, "TreeSharingOptionsPanel.jPanel2.TabConstraints.tabTitle"), jPanel2); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBox1, org.openide.util.NbBundle.getMessage(TreeSharingOptionsPanel.class, "TreeSharingOptionsPanel.jCheckBox1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(TreeSharingOptionsPanel.class, "TreeSharingOptionsPanel.jLabel3.text")); // NOI18N

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(MATCHING_MENU));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jCheckBox1)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(TreeSharingOptionsPanel.class, "TreeSharingOptionsPanel.jPanel3.TabConstraints.tabTitle"), jPanel3); // NOI18N

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel9, org.openide.util.NbBundle.getMessage(TreeSharingOptionsPanel.class, "TreeSharingOptionsPanel.jLabel9.text")); // NOI18N

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel10, org.openide.util.NbBundle.getMessage(TreeSharingOptionsPanel.class, "TreeSharingOptionsPanel.jLabel10.text")); // NOI18N

        jScrollPane3.setViewportView(jTable1);

        jScrollPane4.setViewportView(jTable2);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 251, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(TreeSharingOptionsPanel.class, "TreeSharingOptionsPanel.jPanel4.TabConstraints.tabTitle"), jPanel4); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addGap(17, 17, 17))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel8MouseClicked
        loading = true;
        chooseAndDisplayImage();
        loading = false;
    }//GEN-LAST:event_jLabel8MouseClicked

    void load() {
        jTextField1.setText(NbPreferences.forModule(TreeSharingOptionsPanel.class).get("Pseudo", "").trim());
        jTextField2.setText(NbPreferences.forModule(TreeSharingOptionsPanel.class).get("Lastname", "").trim());
        jTextField3.setText(NbPreferences.forModule(TreeSharingOptionsPanel.class).get("Firstname", "").trim());
        jTextField4.setText(NbPreferences.forModule(TreeSharingOptionsPanel.class).get("Email", "").trim());
        jTextField5.setText(NbPreferences.forModule(TreeSharingOptionsPanel.class).get("City", "").trim());
        jTextField6.setText(NbPreferences.forModule(TreeSharingOptionsPanel.class).get("Country", "".trim()));
        photoPath = NbPreferences.forModule(TreeSharingOptionsPanel.class).get("Photo", "");
        if (loadSavePhoto(new File(photoPath))) {
            jLabel8.setText("");
            jLabel8.setIcon(new ImageIcon(targetImage));
        } else {
            jLabel8.setText(NbBundle.getMessage(TreeSharingOptionsPanel.class, "TreeSharingOptionsPanel.jLabel8.toolTipText"));
            jLabel8.setIcon(null);
        }
        jCheckBox1.setSelected(NbPreferences.forModule(TreeSharingOptionsPanel.class).getBoolean("RespectPrivacy", true));
        jComboBox1.setSelectedIndex(getMatchType()-1);
        
        loadMembersLists();
        model1 = new MyTableModel(jlist1);
        model2 = new MyTableModel(jlist2);
        jTable1.setModel(model1);
        jTable2.setModel(model2);
        setTable(jTable1);
        setTable(jTable2);
        

    }

    void store() {
        String str = jTextField1.getText();
        int i = str.indexOf(" ");
        NbPreferences.forModule(TreeSharingOptionsPanel.class).put("Pseudo", i == -1 ? str : str.substring(0, i));  // no space in pseudo
        NbPreferences.forModule(TreeSharingOptionsPanel.class).put("Lastname", jTextField2.getText().trim());
        NbPreferences.forModule(TreeSharingOptionsPanel.class).put("Firstname", jTextField3.getText().trim());
        NbPreferences.forModule(TreeSharingOptionsPanel.class).put("Email", jTextField4.getText().trim());
        NbPreferences.forModule(TreeSharingOptionsPanel.class).put("City", jTextField5.getText().trim());
        NbPreferences.forModule(TreeSharingOptionsPanel.class).put("Country", jTextField6.getText().trim());
        if (targetImage != null && dest != null) {
            photoPath = dest.getAbsolutePath();
            saveImage(dest);
            NbPreferences.forModule(TreeSharingOptionsPanel.class).put("Photo", photoPath);
        }
        NbPreferences.forModule(TreeSharingOptionsPanel.class).putBoolean("RespectPrivacy", jCheckBox1.isSelected());
        NbPreferences.forModule(TreeSharingOptionsPanel.class).put("MatchingType", ""+ ((int)(jComboBox1.getSelectedIndex()+1)) );
        
        saveMembersLists();
    }

    boolean valid() {
        // TODO check whether form is consistent and complete
        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    // End of variables declaration//GEN-END:variables

    /**
     * Get file from user and if file is not a picture or if picture cannot be resized, set null icon and display "choose another file" message
     */
    private void chooseAndDisplayImage() {
        JFileChooser jfc = new JFileChooser();
        int ret = jfc.showDialog(jfc, NbBundle.getMessage(TreeSharingOptionsPanel.class, "FileChooserTitle"));
        if (ret == JFileChooser.APPROVE_OPTION) {
            if (processImage(jfc.getSelectedFile())) {
                jLabel8.setText("");
                jLabel8.setIcon(new ImageIcon(targetImage));
            } else {
                jLabel8.setText(NbBundle.getMessage(TreeSharingOptionsPanel.class, "TreeSharingOptionsPanel.jLabel8.toolTipText"));
                jLabel8.setIcon(null);
            }
        }
    }
    
   
    private static boolean loadSavePhoto(File f) {
            if (processImage(f)) {
            saveImage(f);
            return true;
        }
        return false;
    }
 
    private static boolean processImage(File f) {
        try {
            if (f == null) {
                throw new Exception("FileIsNull");
            }

            targetImage = scaleImage(f, IMG_LARGE_WIDTH, IMG_LARGE_HEIGHT);
            dest = new File(System.getProperty("netbeans.user") + File.separator + removeExtension(f.getName()) + ".jpg");
            return true;

        } catch (Exception ex) {
            if (loading) {
                DialogManager.create(NbBundle.getMessage(TreeSharingOptionsPanel.class, "TITL_" + ex.getMessage()),
                        NbBundle.getMessage(TreeSharingOptionsPanel.class, "TITL_PleaseChooseOther"))
                        .setMessageType(DialogManager.ERROR_MESSAGE).show();
            }
            return false;
        }
    }

    private static void saveImage(File f) {
        try {
            ImageIO.write(targetImage, "jpeg", f);
        } catch (Exception ex) {
            DialogManager.create(NbBundle.getMessage(TreeSharingOptionsPanel.class, "TITL_CannotSaveCopy"),
                    NbBundle.getMessage(TreeSharingOptionsPanel.class, "TITL_PleaseCheckPath", photoPath)).setMessageType(DialogManager.ERROR_MESSAGE).show();
        }
    }

    
    private static BufferedImage scaleImage(File f, int IMG_LARGE_WIDTH, int IMG_LARGE_HEIGHT) throws Exception {

        BufferedImage ret = null;
        Image image = null;
        try {
            image = ImageIO.read(f);
        } catch (Exception ex) {
            throw new Exception("FileIsNotAnImage"); 
        }

        if (image == null) {
            throw new Exception("FileIsNotAnImage"); 
        }
        
        int imageWidth = image.getWidth(null);
        int imageHeight = image.getHeight(null);
        if ((imageWidth <= 0) || (imageHeight <= 0)) {
            image.flush();
            throw new Exception("FileIsNotAnImage"); 
        }
        
        double imageRatio = (double) imageWidth / (double) imageHeight;
        int targetWidth = IMG_LARGE_WIDTH;
        int targetHeight = IMG_LARGE_HEIGHT;
        double targetRatio = (double) targetWidth / (double) targetHeight;
        if (targetRatio < imageRatio) {
            targetHeight = (int) (targetWidth / imageRatio);
        } else {
            targetWidth = (int) (targetHeight * imageRatio);
        }

        try {
            ret = resizeImage(image, targetWidth, targetHeight);
        } catch (Exception e) {
            throw new Exception("FileCannotBeResized"); 
        }

        return ret;
    }

    
    private static BufferedImage resizeImage(Image img, int width, int height) {
        BufferedImage dimg = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
        Graphics2D g = dimg.createGraphics();
        g.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
        g.drawImage(img, 0, 0, width, height, null);
        g.dispose();
        return dimg;
    }

    
    
    public static byte[] getPhotoBytes(File f) {
        try {
            BufferedImage img = ImageIO.read(f);
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            ImageIO.write(img, "jpg", baos);
            baos.flush();
            return baos.toByteArray();
        } catch (IOException ex) {
            //Exceptions.printStackTrace(ex);
        }
        return null;
    }
    
    public static ImageIcon getPhoto(int size, byte[] photoBytes) {
        Image image = null;
        if (photoBytes == null) {
            return null;
        }
        try {
            BufferedImage bufferedImage = ImageIO.read(new ByteArrayInputStream(photoBytes));
            if (size == 1) {
                image = bufferedImage.getScaledInstance(IMG_SMALL_WIDTH, IMG_SMALL_HEIGHT, Image.SCALE_DEFAULT);
            } else if (size == 2) {
                image = bufferedImage.getScaledInstance(IMG_MEDIUM_WIDTH, IMG_MEDIUM_HEIGHT, Image.SCALE_DEFAULT);
            } else if (size == 3) {
                image = bufferedImage.getScaledInstance(IMG_LARGE_WIDTH, IMG_LARGE_HEIGHT, Image.SCALE_DEFAULT);
            } else {
                image = bufferedImage.getScaledInstance(IMG_MEDIUM_WIDTH, IMG_MEDIUM_HEIGHT, Image.SCALE_DEFAULT);
            }
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
        return new ImageIcon(image);
    }

    
    
    
    
    public static String getPseudo() {
        return NbPreferences.forModule(TreeSharingOptionsPanel.class).get("Pseudo", "").trim();
    }

    public static MemberProfile getProfile() {
        MemberProfile profile = new MemberProfile();
        profile.lastname = NbPreferences.forModule(TreeSharingOptionsPanel.class).get("Lastname", "").trim();
        profile.firstname = NbPreferences.forModule(TreeSharingOptionsPanel.class).get("Firstname", "").trim();
        profile.email = NbPreferences.forModule(TreeSharingOptionsPanel.class).get("Email", "").trim();
        profile.city = NbPreferences.forModule(TreeSharingOptionsPanel.class).get("City", "").trim();
        profile.country = NbPreferences.forModule(TreeSharingOptionsPanel.class).get("Country", "".trim());
        File f = new File(NbPreferences.forModule(TreeSharingOptionsPanel.class).get("Photo", ""));
        if (loadSavePhoto(f)) {
            profile.photoBytes = getPhotoBytes(f);
        }
        return profile;
    }


    public static String getProfileError() {
        MemberProfile myProfile = getProfile();

        if (myProfile.firstname.isEmpty() || myProfile.lastname.isEmpty()) {
            return NbBundle.getMessage(TreeSharingOptionsPanel.class, "ERR_NullName");
        }
        if (!isValidEmailAddress(myProfile.email)) {
            return NbBundle.getMessage(TreeSharingOptionsPanel.class, "ERR_NullEmail");
        }
        if (myProfile.city.isEmpty() || myProfile.country.isEmpty()) {
            return NbBundle.getMessage(TreeSharingOptionsPanel.class, "ERR_NullPlace");
        }
        if (myProfile.photoBytes == null || myProfile.photoBytes.length == 0) {
            return NbBundle.getMessage(TreeSharingOptionsPanel.class, "ERR_NullPhoto");
        }
        return "";
    }
    
    public static boolean isValidEmailAddress(String email) {
        String ePattern = "^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$";
        java.util.regex.Pattern p = java.util.regex.Pattern.compile(ePattern);
        java.util.regex.Matcher m = p.matcher(email);
        return m.matches();
    }


    
    public static int getMatchType() {
        int ret = EXACT_MATCH;
        String str = NbPreferences.forModule(TreeSharingOptionsPanel.class).get("MatchingType", "");
        try {
            ret = Integer.valueOf(str);
            if (ret < EXACT_MATCH || ret > MAX_MATCH) {
                ret = EXACT_MATCH;
            }
        } catch (Exception e) {
            ret = EXACT_MATCH;
        }
        return ret;
    }

    private static String removeExtension(String name) {
        String ret = name;
        int dotIndex = name.lastIndexOf('.');
        if (dotIndex >= 0) { // to prevent exception if there is no dot
            ret = name.substring(0, dotIndex);
        }
        return ret;
    }

    private void loadMembersLists() {
        
        jlist1 = new HashMap<String, Boolean>();
        jlist2 = new HashMap<String, Boolean>();
        
        String[] keys;
        try {
            keys = NbPreferences.forModule(TreeSharingOptionsPanel.class).keys();
        } catch (BackingStoreException ex) {
            return;
        }

        String key = "";
        for (int i = 0; i < keys.length; i++) {
            key = keys[i];
            if (key.startsWith("memberps-")) {
                jlist1.put(key.substring(9), NbPreferences.forModule(TreeSharingOptionsPanel.class).get(key, "1").equals("1"));
            }
            if (key.startsWith("memberip-")) {
                jlist2.put(key.substring(9), NbPreferences.forModule(TreeSharingOptionsPanel.class).get(key, "1").equals("1"));
            }
        }
        
        
    }

    private void saveMembersLists() {
        for (Iterator iterator = jlist1.keySet().iterator(); iterator.hasNext();) {
            String item = (String) iterator.next();
            NbPreferences.forModule(TreeSharingOptionsPanel.class).put("memberps-"+item, jlist1.get(item) ? "1" : "0");
        }
        for (Iterator iterator = jlist2.keySet().iterator(); iterator.hasNext();) {
            String item = (String) iterator.next();
            NbPreferences.forModule(TreeSharingOptionsPanel.class).put("memberip-"+item, jlist2.get(item) ? "1" : "0");
        }
    }
    
    
    

    // code below is same as in MembersPopup
    private void setTable(JTable table) {
        // Editable Table
        table.getModel().addTableModelListener(this);
        
        // Sortable columns
        table.setAutoCreateRowSorter(true);
        table.getTableHeader().setToolTipText(NbBundle.getMessage(MembersPopup.class, "TIP_SortHeader"));
        
        // Resize first column
        table.getColumnModel().getColumn(0).setPreferredWidth(20);
        
        // Set tooltip text for name column (is string and does not loose its format)
        DefaultTableCellRenderer rendererCol1 = new DefaultTableCellRenderer();
        rendererCol1.setToolTipText(NbBundle.getMessage(MembersPopup.class, "TIP_Allowed"));
        table.getColumnModel().getColumn(1).setCellRenderer(rendererCol1);        

        // Remove grid lines
        table.setShowHorizontalLines(false);
        table.setShowVerticalLines(false);

        // Set header icons
        Border headerBorder = UIManager.getBorder("TableHeader.cellBorder");
        JLabel allowedLabel = new JLabel("", ALLOWED_ICON, JLabel.CENTER);
        allowedLabel.setBorder(headerBorder);
        JLabel nameLabel = new JLabel("", MEMBER_ICON, JLabel.CENTER);
        nameLabel.setBorder(headerBorder);
        TableCellRenderer renderer = new JComponentTableCellRenderer();
        table.getColumnModel().getColumn(0).setHeaderRenderer(renderer);
        table.getColumnModel().getColumn(1).setHeaderRenderer(renderer);
        table.getColumnModel().getColumn(0).setHeaderValue(allowedLabel);
        table.getColumnModel().getColumn(1).setHeaderValue(nameLabel);
    }

    public void tableChanged(TableModelEvent e) {
        
        MyTableModel model = (MyTableModel) e.getSource();
        
        int row = e.getFirstRow();
        int column = e.getColumn();
        if (row >= 0 && row < model.getRowCount() && column >= 0 && column < model.getColumnCount()) {
            if (column == 0) {
                Boolean isAllowed = (Boolean) model.getValueAt(row, 0);
                String key = (String) model.getValueAt(row, 1);
                if (model == model1) {
                    jlist1.put(key, isAllowed);
                    jTable1.setRowSorter(new TableRowSorter<TableModel>(model));
                }
                if (model == model2) {
                    jlist2.put(key, isAllowed);
                    jTable2.setRowSorter(new TableRowSorter<TableModel>(model));
                }
            }
        }
    }

    class JComponentTableCellRenderer implements TableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected,
                boolean hasFocus, int row, int column) {
            return (JComponent) value;
        }
    }
    
    class MyTableModel extends AbstractTableModel {

        String[] columnNames = { "", "" };
        Object[][] data = new Object[0][2];
        
        private MyTableModel(Map<String, Boolean> map) {
            data = new Object[map.size()][2];
            int i = 0;
            for (Iterator iterator = map.keySet().iterator(); iterator.hasNext();) {
                String item = (String) iterator.next();
                data[i][0] = map.get(item);
                data[i][1] = item;
                i++;
            }
        }

        @Override
        public int getColumnCount() {
            return columnNames.length;
        }

        @Override
        public int getRowCount() {
            return data.length;
        }

        @Override
        public String getColumnName(int col) {
            return columnNames[col];
        }

        @Override
        public Object getValueAt(int row, int col) {
            return data[row][col];
        }

        @Override
        public Class getColumnClass(int c) {
            return getValueAt(0, c).getClass();
        }

        @Override
        public boolean isCellEditable(int row, int col) {
            return col == 0;
        }

        @Override
        public void setValueAt(Object value, int row, int col) {
            data[row][col] = value;
            fireTableCellUpdated(row, col);
        }

    }
}
