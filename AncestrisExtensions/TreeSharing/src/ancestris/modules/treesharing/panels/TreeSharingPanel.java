/*
 * Ancestris - http://www.ancestris.org
 * 
 * Copyright 2015 Ancestris
 * 
 * Author: Frédéric Lapeyre (frederic@ancestris.org).
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 */
package ancestris.modules.treesharing.panels;

import java.awt.Dimension;
import java.awt.Insets;
import java.awt.Point;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.beans.PropertyVetoException;
import java.util.List;
import javax.swing.JInternalFrame;
import org.openide.util.Exceptions;

/**
 *
 * @author frederic
 */
public class TreeSharingPanel extends javax.swing.JPanel {

    GraphicDesktopPane gDesktopPane;
        
    /**
     * Creates new form TreeSharingPanel
     */
    public TreeSharingPanel() {
        initComponents();
        gDesktopPane.setLayout(null);
        jScrollPane.getVerticalScrollBar().setUnitIncrement(12);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gDesktopPane = new GraphicDesktopPane();
        jScrollPane = new DesktopScrollPane(gDesktopPane);
        jDesktopPane = gDesktopPane;

        jDesktopPane.setToolTipText(org.openide.util.NbBundle.getMessage(TreeSharingPanel.class, "TreeSharingPanel.jDesktopPane.toolTipText")); // NOI18N
        jDesktopPane.setAutoscrolls(true);

        javax.swing.GroupLayout jDesktopPaneLayout = new javax.swing.GroupLayout(jDesktopPane);
        jDesktopPane.setLayout(jDesktopPaneLayout);
        jDesktopPaneLayout.setHorizontalGroup(
            jDesktopPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 645, Short.MAX_VALUE)
        );
        jDesktopPaneLayout.setVerticalGroup(
            jDesktopPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 472, Short.MAX_VALUE)
        );

        jScrollPane.setViewportView(jDesktopPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDesktopPane jDesktopPane;
    private javax.swing.JScrollPane jScrollPane;
    // End of variables declaration//GEN-END:variables

    
    
    
    
    public void setFrames(List<?> frames, int leftSpace, int topSpace, int verticalSpace, boolean add) {
        int i = 0;
        for (Object o : frames) {
            JInternalFrame frame = (JInternalFrame) o;
            Insets insets = gDesktopPane.getInsets();
            Dimension size = frame.getPreferredSize();
            if (add) {
                gDesktopPane.add(frame);
                frame.addComponentListener(new ComponentAdapter() {

                    @Override
                    public void componentMoved(ComponentEvent e) {
                        gDesktopPane.repaint();
                    }
                });
             }
            frame.setBounds(insets.left + leftSpace, insets.top + topSpace + i * (size.height + verticalSpace), size.width, size.height);
            i++;
        }
        gDesktopPane.revalidate();
        gDesktopPane.repaint();
    }
    
    public void addFrame(JInternalFrame frame, Point point) {
        gDesktopPane.add(frame);
        frame.addComponentListener(new ComponentAdapter() {

            @Override
            public void componentMoved(ComponentEvent e) {
                gDesktopPane.repaint();
            }
        });
        frame.setVisible(true);
        Insets insets = gDesktopPane.getInsets();
        Dimension size = frame.getPreferredSize();
        frame.setBounds(insets.left + point.x, insets.top + point.y, size.width, size.height);
        frame.moveToFront();
        try {
            frame.setSelected(true);
        } catch (PropertyVetoException ex) {
            Exceptions.printStackTrace(ex);
        }
        gDesktopPane.setSelectedFrame(frame);
        gDesktopPane.revalidate();
        gDesktopPane.repaint();
    }

    public void removeFrame(Object o) {
        gDesktopPane.remove((JInternalFrame) o);
        gDesktopPane.revalidate();
        gDesktopPane.repaint();
    }

    public void linkFrames(Object o1, Object o2) {
        gDesktopPane.addLink((JInternalFrame) o1, (JInternalFrame) o2);
    }

    
}
