/*
 * Ancestris - http://www.ancestris.org
 * 
 * Copyright 2015 Ancestris
 * 
 * Author: Frédéric Lapeyre (frederic@ancestris.org).
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 */
package ancestris.modules.treesharing.panels;

import ancestris.modules.treesharing.options.TreeSharingOptionsPanel;
import ancestris.view.SelectionDispatcher;
import genj.gedcom.Context;
import genj.gedcom.Entity;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.util.Set;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableCellRenderer;
import org.openide.util.NbBundle;

/**
 *
 * @author frederic
 */
public class ListEntitiesPanel extends javax.swing.JPanel {

    private final Set<MatchData> list;
    private Color COLOR_EXACT = Color.decode("#00641a");
    private Color COLOR_FLASH = Color.decode("#b87900");
    private Color COLOR_LOOSE = Color.DARK_GRAY;
    
    
    /**
     * Creates new form ListEntitiesPanel
     */
    public ListEntitiesPanel(String gedcomName, String friend, Set<MatchData> list) {
        this.list = list;
        initComponents();
        jLabel3.setText(gedcomName);
        jLabel4.setText(friend);
        jTable1.setAutoCreateRowSorter(true);
        jTable1.getColumnModel().getColumn(0).setPreferredWidth(150);
        jTable1.getColumnModel().getColumn(1).setPreferredWidth(320);
        jTable1.getColumnModel().getColumn(2).setPreferredWidth(130);
        jTable1.getColumnModel().getColumn(3).setPreferredWidth(150);
        jTable1.getColumnModel().getColumn(4).setPreferredWidth(100);
        jTable1.getColumnModel().getColumn(5).setPreferredWidth(0);
        jTable1.setFillsViewportHeight(true);
        
        Dimension preferredSize = jTable1.getPreferredSize();
        preferredSize.height = list.size()*jTable1.getRowHeight();
        jTable1.setPreferredSize(preferredSize);

        // Ability to click on my id to display entity in Ancestris editor
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mousePressed(java.awt.event.MouseEvent evt) {
                int col = jTable1.columnAtPoint(evt.getPoint());
                if (col != 1 || evt.getClickCount() != 2) {   // if column not the names and not double count, return
                    return;
                }
                int row = jTable1.rowAtPoint(evt.getPoint());
                String text = (String) jTable1.getModel().getValueAt(row, 1);
                Entity ent = getEntityFromString(text);
                if (ent != null) {
                    SelectionDispatcher.fireSelection(new Context(ent));
                }
            }
        });
        
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable() {
            public Component prepareRenderer(TableCellRenderer renderer, int row, int column) {
                Component c = super.prepareRenderer(renderer, row, column);
                int type = (Integer) getValueAt(row, 5);
                if (type == TreeSharingOptionsPanel.EXACT_MATCH) {
                    c.setForeground(COLOR_EXACT);
                } else if (type == TreeSharingOptionsPanel.FLASH_MATCH) {
                    c.setForeground(COLOR_FLASH);
                } else if (type == TreeSharingOptionsPanel.LOOSE_MATCH) {
                    c.setForeground(COLOR_LOOSE);
                }
                return c;
            }
        };

        setPreferredSize(new java.awt.Dimension(700, 212));

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(ListEntitiesPanel.class, "ListEntitiesPanel.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(ListEntitiesPanel.class, "ListEntitiesPanel.jLabel2.text")); // NOI18N

        jLabel3.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(ListEntitiesPanel.class, "ListEntitiesPanel.jLabel3.text")); // NOI18N

        jLabel4.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(ListEntitiesPanel.class, "ListEntitiesPanel.jLabel4.text")); // NOI18N

        jTable1.setModel(new MyTableModel(list));
        jTable1.setColumnSelectionAllowed(true);
        jTable1.setPreferredSize(new java.awt.Dimension(300, 150));
        jScrollPane2.setViewportView(jTable1);
        jTable1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(24, 24, 24)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    class MyTableModel extends AbstractTableModel {

        Set<MatchData> list = null;
        String[] columnNames = { 
            NbBundle.getMessage(MembersPopup.class, "COL_myGedcom"), 
            NbBundle.getMessage(MembersPopup.class, "COL_myEntity"), 
            NbBundle.getMessage(MembersPopup.class, "COL_FriendsEntity"),  
            NbBundle.getMessage(MembersPopup.class, "COL_FriendsGedcom"),
            NbBundle.getMessage(MembersPopup.class, "COL_Friend"),
            ""
        };
        Object[][] data;
        
        private MyTableModel(Set<MatchData> list) {
            this.list = list;
            data = new Object[list.size()][6];
            int i = 0;
            for (MatchData line : list) {
                data[i][0] = line.myEntity.getGedcom().getName();
                data[i][1] = line.myEntity.toString();
                data[i][2] = line.friendGedcomEntity.entityID;
                data[i][3] = line.friendGedcomEntity.gedcomName;
                data[i][4] = line.friendGedcomEntity.friend;
                data[i][5] = line.matchResult;
                i++;
            }
        }

        @Override
        public int getColumnCount() {
            return columnNames.length;
        }

        @Override
        public int getRowCount() {
            return data.length;
        }

        @Override
        public String getColumnName(int col) {
            return columnNames[col];
        }

        @Override
        public Object getValueAt(int row, int col) {
            return data[row][col];
        }

        @Override
        public Class getColumnClass(int c) {
            return getValueAt(0, c) != null ? getValueAt(0, c).getClass() : String.class;
        }

        @Override
        public boolean isCellEditable(int row, int col) {
            return false;
        }

        @Override
        public void setValueAt(Object value, int row, int col) {
            data[row][col] = value;
            fireTableCellUpdated(row, col);
        }


    }
    
   
    private final Entity getEntityFromString(String str) {
        for (MatchData item : list) {
            if (item.myEntity.toString().equals(str)) {
                return item.myEntity;
            }
        }
        return null;
    }
        
}
