/*
 * ReleveCompletionDialog.java
 *
 * Created on 9 déc. 2012, 11:57:25
 */

package ancestris.modules.releve.dnd;

import ancestris.modules.releve.editor.Java2sAutoTextField;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import javax.swing.AbstractCellEditor;
import javax.swing.JTable;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableCellEditor;
import org.openide.util.NbBundle;

/**
 * permet de decocher les noms ou prenom que l'on ne souhaite pas voir
 * apparaitre dans les listes de completion
 * @author Michel
 */
public class SimilarNameDialog extends javax.swing.JFrame {
     
    SimilarNameSet similarName;
    SimilarTableModel tableModel;

    
    /**
     * affiche la fenetre de des prénoms similaires
     */
    static public void  showSimilarFirstNamePanel() {
        SimilarNameDialog completionDialog = new SimilarNameDialog();
        completionDialog.initData(
                SimilarNameSet.getSimilarFirstName(),
                NbBundle.getMessage(SimilarNameDialog.class, "SimilarNameDialog.firstNameTitle"),
                NbBundle.getMessage(SimilarNameDialog.class, "SimilarNameDialog.firstNameColumn"),
                new NameCellEditor(false, true)
                );
        completionDialog.setVisible(true);
    }

    /**
     * affiche la fenetre des noms similaires
     */
    static public void  showSimilarLastNamePanel() {
        SimilarNameDialog completionDialog = new SimilarNameDialog();
        completionDialog.initData(
                SimilarNameSet.getSimilarLastName(),
                NbBundle.getMessage(SimilarNameDialog.class, "SimilarNameDialog.lastNameTitle"),
                NbBundle.getMessage(SimilarNameDialog.class, "SimilarNameDialog.lastNameColumn"),
                new NameCellEditor(true, false)
                );
        completionDialog.setVisible(true);
    }

    private SimilarNameDialog() {
        initComponents();
            
        // je configure la position de la fenetre
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screen.width - getWidth())/ 2, (screen.height -getHeight()) / 2, getWidth(), getHeight());
    }

    private void initData(SimilarNameSet similarName, String dialogTitle, String columnTitle1, NameCellEditor cellEditor) {

        setTitle(dialogTitle);

        String columnTitle2 = NbBundle.getMessage(SimilarNameDialog.class, "SimilarNameDialog.similarColumn");
        this.similarName = similarName;
        tableModel = new SimilarTableModel(similarName, columnTitle1, columnTitle2);

        jTableSimilar.setModel(tableModel);
        
        jTableSimilar.getColumnModel().getColumn(0).setCellEditor(cellEditor);
        jTableSimilar.getColumnModel().getColumn(1).setCellEditor(cellEditor);
        jTableSimilar.setRowHeight(jTableSimilar.getRowHeight()+4);


        // je trie la table
        jTableSimilar.setAutoCreateRowSorter(true);
        List<RowSorter.SortKey> sortKeys = new ArrayList<RowSorter.SortKey>();
        sortKeys.add(new RowSorter.SortKey(0, SortOrder.ASCENDING));
        sortKeys.add(new RowSorter.SortKey(1, SortOrder.ASCENDING));
        jTableSimilar.getRowSorter().setSortKeys(sortKeys);
        
    }


    /**
     * enregistre la liste des valeurs exlues
     */
    private void saveSimilar() {
        if (jTableSimilar.isEditing()) {
            jTableSimilar.getCellEditor().stopCellEditing();
        }
        int n = tableModel.getRowCount();
        HashMap<String,String> hashmap = new HashMap<String,String>();
        for(int i = 0; i <n ; i++) {
            if ( !tableModel.getValueAt(i, 0).toString().isEmpty() && !tableModel.getValueAt(i, 1).toString().isEmpty() ) {
                hashmap.put(tableModel.getValueAt(i, 0).toString(), tableModel.getValueAt(i, 1).toString());
            }
        }

        similarName.save(hashmap);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPaneTable = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableSimilar = new javax.swing.JTable();
        jPanelButton = new javax.swing.JPanel();
        jButtonOk = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();
        jPanelToolbar = new javax.swing.JPanel();
        jButtonAdd = new javax.swing.JButton();
        jButtonDelete = new javax.swing.JButton();
        jButtonCopyToClipboard = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jPaneTable.setPreferredSize(new java.awt.Dimension(300, 400));
        jPaneTable.setLayout(new java.awt.BorderLayout());

        jTableSimilar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTableSimilar.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane1.setViewportView(jTableSimilar);

        jPaneTable.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPaneTable, java.awt.BorderLayout.CENTER);

        jPanelButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jButtonOk.setText(org.openide.util.NbBundle.getMessage(SimilarNameDialog.class, "SimilarNameDialog.jButtonOk.text")); // NOI18N
        jButtonOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOkActionPerformed(evt);
            }
        });
        jPanelButton.add(jButtonOk);

        jButtonCancel.setText(org.openide.util.NbBundle.getMessage(SimilarNameDialog.class, "SimilarNameDialog.jButtonCancel.text")); // NOI18N
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });
        jPanelButton.add(jButtonCancel);

        getContentPane().add(jPanelButton, java.awt.BorderLayout.SOUTH);

        jButtonAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/releve/images/NewRecord.png"))); // NOI18N
        jButtonAdd.setToolTipText(org.openide.util.NbBundle.getMessage(SimilarNameDialog.class, "SimilarNameDialog.jButtonAdd.toolTipText")); // NOI18N
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });
        jPanelToolbar.add(jButtonAdd);

        jButtonDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/releve/images/DeleteRecord.png"))); // NOI18N
        jButtonDelete.setToolTipText(org.openide.util.NbBundle.getMessage(SimilarNameDialog.class, "SimilarNameDialog.jButtonDelete.toolTipText")); // NOI18N
        jButtonDelete.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });
        jPanelToolbar.add(jButtonDelete);

        jButtonCopyToClipboard.setText(org.openide.util.NbBundle.getMessage(SimilarNameDialog.class, "SimilarNameDialog.jButtonCopyToClipboard.text")); // NOI18N
        jButtonCopyToClipboard.setToolTipText(org.openide.util.NbBundle.getMessage(SimilarNameDialog.class, "SimilarNameDialog.jButtonCopyToClipboard.toolTipText")); // NOI18N
        jButtonCopyToClipboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCopyToClipboardActionPerformed(evt);
            }
        });
        jPanelToolbar.add(jButtonCopyToClipboard);

        getContentPane().add(jPanelToolbar, java.awt.BorderLayout.NORTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        //rien a faire        
    }//GEN-LAST:event_formWindowClosed

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
        int[] selectedRows = jTableSimilar.getSelectedRows();

        for (int row : selectedRows) {
            tableModel.remove(jTableSimilar.convertRowIndexToModel(row));
        }
	tableModel.fireTableDataChanged();
        jTableSimilar.clearSelection();

    }//GEN-LAST:event_jButtonDeleteActionPerformed

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonCancelActionPerformed

    private void jButtonOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOkActionPerformed
        saveSimilar();
        dispose();
    }//GEN-LAST:event_jButtonOkActionPerformed

    private void jButtonCopyToClipboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCopyToClipboardActionPerformed
        final char LINE_SEPARATOR = '\n';
        final char FIELD_SEPARATOR = '\t';
        Clipboard CLIPBOARD = Toolkit.getDefaultToolkit().getSystemClipboard();

        StringBuilder clipboardStr = new StringBuilder();

        clipboardStr.append(tableModel.getColumnName(0)).append(FIELD_SEPARATOR).append(tableModel.getColumnName(1)).append(LINE_SEPARATOR);
        // je copie les valeurs dans
        int n = tableModel.getRowCount();
        for(int i = 0; i <n ; i++) {
            clipboardStr.append(tableModel.getValueAt(i,0)).append(FIELD_SEPARATOR).append(tableModel.getValueAt(i,1)).append(LINE_SEPARATOR);
        }
        StringSelection sel = new StringSelection(clipboardStr.toString());
        CLIPBOARD.setContents(sel, sel);
    }//GEN-LAST:event_jButtonCopyToClipboardActionPerformed

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        tableModel.add();
	tableModel.fireTableDataChanged();
        int currentRow = jTableSimilar.convertRowIndexToView(0);
        jTableSimilar.setRowSelectionInterval(currentRow, currentRow);
        jTableSimilar.requestFocus();
        jTableSimilar.editCellAt(0,0);
    }//GEN-LAST:event_jButtonAddActionPerformed
   
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonCopyToClipboard;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonOk;
    private javax.swing.JPanel jPaneTable;
    private javax.swing.JPanel jPanelButton;
    private javax.swing.JPanel jPanelToolbar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableSimilar;
    // End of variables declaration//GEN-END:variables


    private class SimilarTableModel extends AbstractTableModel {
        private final Class columnClass[] = {String.class, String.class};
        private List<String> keys;
        private List<String> values;
        String[] columnName = { "",""};

        public SimilarTableModel( SimilarNameSet similarName, String columnName1, String columnName2) {
            keys = new ArrayList<String>(similarName.getKeys());
            values = new ArrayList<String>(similarName.getValues());
            this.columnName[0] = columnName1;
            this.columnName[1] = columnName2;
        }

        /**
         *
         * @param row
         */
        protected void add() {
            keys.add("");
            values.add("");
        }

        protected void remove(int row) {
            keys.remove(row);
            values.remove(row);
        }
        
        @Override
        public int getColumnCount() {
            return columnClass.length;
        }

        @Override
        public int getRowCount() {
            return values.size();
        }

        @Override
        public String getColumnName(int col) {
            return columnName[col];
        }

        @Override
        public Class<?> getColumnClass(int col) {
            return columnClass[col];
        }

        @Override
        public String getValueAt(int row, int col) {
            switch (col) {
                case 0:
                    return keys.get(row);
                case 1:
                    return values.get(row);
                default:
                    return null;
            }
        }

        @Override
        public boolean isCellEditable(int row, int col) {
            return true;
        }

        @Override
        public void setValueAt(Object value, int row, int col) {
            switch (col) {
                case 0:
                    if( keys.contains(value.toString())) {
                        Toolkit.getDefaultToolkit().beep();
                    } else {
                        keys.set(row, value.toString());
                    }
                    break;
                 case 1:
                    values.set(row,value.toString());
                    break;
            }
            fireTableCellUpdated(row, col);
        }


    }


    static private class NameCellEditor extends AbstractCellEditor implements TableCellEditor {

        Java2sAutoTextField jTextField = new Java2sAutoTextField(new ArrayList<String>());

        protected NameCellEditor(boolean setUpperAllChar, boolean setUpperAllFirstChar) {
            super();
            jTextField.setStrict(false);
            jTextField.setCaseSensitive(false);
            jTextField.setUpperAllFirstChar(setUpperAllFirstChar);
            jTextField.setUpperAllChar(setUpperAllChar);
        }

        @Override
        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected,
                int rowIndex, int vColIndex) {

            jTextField.setStrict(false);
            jTextField.setCaseSensitive(false);
            jTextField.setUpperAllFirstChar(true);

            jTextField.setText(value.toString());

            return jTextField;
        }

        @Override
        public Object getCellEditorValue() {
            return jTextField.getText();
        }
    }


}
