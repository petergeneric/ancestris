/*
 * MergePanel.java
 *
 */

package ancestris.modules.releve.dnd;

import genj.gedcom.Entity;
import java.awt.event.ActionListener;
import java.text.MessageFormat;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.JRadioButton;
import javax.swing.JToggleButton;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle;

/**
 *
 */
public class MergePanel extends javax.swing.JPanel {

    private MergeDialog mergeDialog = null;
    /**
     * le construteur initialise l'affichage
     */
    public MergePanel() {
        initComponents();
    }

    /**
     * affiche les modeles contenant les comparaisons du releve avec les entites
     * qui peuvent être concernées par le relevé,
     * et selectionne le premier modele de la liste classée par ordre decroissant de pertinence.
     *
     * @param models    liste des modeles
     * @param selectedEntity  entite selectonne
     * @param mergeDialog     fenetre principale
     */
    protected void initData (final List<MergeModel> models, Entity selectedEntity, final MergeDialog mergeDialog ) {
        this.mergeDialog = mergeDialog;
        // je vide le panneau
        jPanelChoice.removeAll();
        jToggleButtonShowAllParents.setSelected(mergeDialog.getShowAllParents());

        // j'affiche le titre
        jLabel1.setText(MessageFormat.format(NbBundle.getMessage(MergePanel.class, "MergePanel.title"), models.size())); // NOI18N

        // j'ajoute les modeles avec un radio bouton pour chaque modele
        buttonGroupChoiceModel=new javax.swing.ButtonGroup();
        for(int i= 0; i< models.size(); i++) {
            addRadioButton(i, models.get(i), selectedEntity, mergeDialog);
        }
        // j'ajoute un label pour occuper le bas du panel
        java.awt.GridBagConstraints gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = models.size();
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weighty = 1.0;
        JLabel jLabelEnd = new javax.swing.JLabel();
        jPanelChoice.add(jLabelEnd, gridBagConstraints);

        // je selectionne le premier modele
        if ( models.size() >0 ) {
            // je coche bouton associé au premier modele
            ((JRadioButton)buttonGroupChoiceModel.getElements().nextElement()).setSelected(true);
            mergeDialog.selectModel(models.get(0));
        }
        this.revalidate();
        this.repaint();
    }

    /**
     * affiche un radio bouton
     * @param entity
     * @param record
     * @param mergeDialog
     * @param selected
     */
    private void addRadioButton(int position, final MergeModel model, Entity selectedEntity, final MergeDialog mergeDialog) {
        //String radioButtonText;
        String labelText = Integer.toString(model.getNbMatch())+"/"+Integer.toString(model.getNbMatchMax());
        JLabel jLabelNbMatch =  new JLabel();
        jLabelNbMatch.setText(labelText);

        // je cree le radiobutton
        JRadioButton jRadioButton =  new JRadioButton();
        jRadioButton.setText(model.getSummary(selectedEntity));
        jRadioButton.setMargin(new java.awt.Insets(0, 2, 0, 2));
        jRadioButton.setPreferredSize(null);
        jRadioButton.setSelected(false);
        jRadioButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mergeDialog.selectModel(model);
            }
        });

        // j'ajoute le bouton dans le groupe de boutons pour activer la selection exlusive
        buttonGroupChoiceModel.add(jRadioButton);

        // j'affiche le radiobutton dans la premiere colonne
        java.awt.GridBagConstraints gridBagConstraints;
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = position;
        gridBagConstraints.weightx = 1;
        //gridBagConstraints.weighty = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.NONE;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelChoice.add(jRadioButton,gridBagConstraints);

        // j'affiche le nombre de champs egaux dans la deuxième colonne
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = position;
        gridBagConstraints.weightx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.NONE;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanelChoice.add(jLabelNbMatch, gridBagConstraints);

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroupChoiceModel = new javax.swing.ButtonGroup();
        jPanelToolbar = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jToggleButtonShowAllParents = new javax.swing.JToggleButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanelChoice = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        jPanelToolbar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanelToolbar.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText(org.openide.util.NbBundle.getMessage(MergePanel.class, "MergePanel.title")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanelToolbar.add(jLabel1, gridBagConstraints);

        jToggleButtonShowAllParents.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/releve/images/add-spouse24.png"))); // NOI18N
        jToggleButtonShowAllParents.setToolTipText(org.openide.util.NbBundle.getMessage(MergePanel.class, "MergePanel.jToggleButtonShowAllParents.toolTipText")); // NOI18N
        jToggleButtonShowAllParents.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jToggleButtonShowAllParents.setFocusable(false);
        jToggleButtonShowAllParents.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jToggleButtonShowAllParents.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jToggleButtonShowAllParents.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButtonShowAllParents.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonShowAllParentsActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jPanelToolbar.add(jToggleButtonShowAllParents, gridBagConstraints);

        add(jPanelToolbar, java.awt.BorderLayout.NORTH);

        jScrollPane1.setBorder(null);
        jScrollPane1.setHorizontalScrollBar(null);

        jPanelChoice.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanelChoice.setRequestFocusEnabled(false);
        jPanelChoice.setLayout(new java.awt.GridBagLayout());
        jScrollPane1.setViewportView(jPanelChoice);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void jToggleButtonShowAllParentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonShowAllParentsActionPerformed
        try {
            mergeDialog.updateData(((JToggleButton) (evt.getSource())).isSelected());
        } catch (Exception ex) {
            Exceptions.printStackTrace(ex);
        }
    }//GEN-LAST:event_jToggleButtonShowAllParentsActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupChoiceModel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanelChoice;
    private javax.swing.JPanel jPanelToolbar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToggleButton jToggleButtonShowAllParents;
    // End of variables declaration//GEN-END:variables

}
