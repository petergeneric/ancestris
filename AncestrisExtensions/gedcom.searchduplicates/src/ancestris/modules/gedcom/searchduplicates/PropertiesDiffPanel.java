package ancestris.modules.gedcom.searchduplicates;

import ancestris.modules.gedcom.utilities.PropertyTag2Name;
import genj.gedcom.Property;
import genj.gedcom.TagPath;
import java.util.ArrayList;
import java.util.Iterator;

/**
 *
 * @author lemovice
 */
public class PropertiesDiffPanel extends javax.swing.JPanel {

    PropertyListModel leftPropertyListModel = new PropertyListModel();
    PropertyListModel rightPropertyListModel = new PropertyListModel();

    /**
     * Creates new form PropertiesDiffPanel
     */
    public PropertiesDiffPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        propertyTagLabel = new javax.swing.JLabel();
        leftPropertyList = new javax.swing.JList();
        rightPropertyList = new javax.swing.JList();

        propertyTagLabel.setText(org.openide.util.NbBundle.getMessage(PropertiesDiffPanel.class, "PropertiesDiffPanel.propertyTagLabel.text")); // NOI18N
        propertyTagLabel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        leftPropertyList.setModel(leftPropertyListModel);

        rightPropertyList.setModel(rightPropertyListModel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(propertyTagLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(leftPropertyList, javax.swing.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rightPropertyList, javax.swing.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(propertyTagLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(leftPropertyList, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
                    .addComponent(rightPropertyList, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList leftPropertyList;
    private javax.swing.JLabel propertyTagLabel;
    private javax.swing.JList rightPropertyList;
    // End of variables declaration//GEN-END:variables

    public void set(Property leftProperty, Property rightProperty) {
        ArrayList<TagPath> PropertyTagPathArray = new ArrayList<TagPath>();

        if (leftProperty == null && rightProperty == null) {
            return;
        }

        PropertyTagPathArray.clear();
        leftPropertyListModel.clear();
        rightPropertyListModel.clear();
        propertyTagLabel.setText(PropertyTag2Name.getTagName(leftProperty != null ? leftProperty.getTag() : rightProperty.getTag()));
        PropertyTagPathArray.add(leftProperty != null ? leftProperty.getPath() : rightProperty.getPath());

        if (leftProperty != null) {
            for (Property property : leftProperty.getProperties(Property.class)) {
                PropertyTagPathArray.add(property.getPath());
            }
        }

        if (rightProperty != null) {
            for (Property property : rightProperty.getProperties(Property.class)) {
                if (!PropertyTagPathArray.contains(property.getPath())) {
                    PropertyTagPathArray.add(property.getPath());
                }
            }
        }

        for (Iterator<TagPath> it = PropertyTagPathArray.iterator(); it.hasNext();) {
            TagPath tagPath = it.next();
            if (leftProperty != null) {
                leftPropertyListModel.add(PropertyTagPathArray.indexOf(tagPath), leftProperty.getParent().getProperty(tagPath));
            }
            if (rightProperty != null) {
                rightPropertyListModel.add(PropertyTagPathArray.indexOf(tagPath), rightProperty.getParent().getProperty(tagPath));
            }
        }
    }
}
