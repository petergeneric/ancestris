package ancestris.modules.editors.genealogyeditor.panels;

import ancestris.modules.editors.genealogyeditor.models.EventsListModel;
import ancestris.modules.gedcom.utilities.PropertyTag2Name;
import ancestris.util.swing.DialogManager;
import genj.gedcom.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.openide.DialogDescriptor;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle;

/**
 *
 * @author dominique
 */

/*
 * n @XREF:INDI@ INDI
 * +1 RESN <RESTRICTION_NOTICE>
 * +1 <<PERSONAL_NAME_STRUCTURE>>
 * +1 SEX <SEX_VALUE>
 * +1 <<INDIVIDUAL_EVENT_STRUCTURE>>
 * +1 <<INDIVIDUAL_ATTRIBUTE_STRUCTURE>>
 * +1 <<LDS_INDIVIDUAL_ORDINANCE>>
 * +1 <<CHILD_TO_FAMILY_LINK>>
 * +1 <<SPOUSE_TO_FAMILY_LINK>>
 * +1 SUBM @<XREF:SUBM>@
 * +1 <<ASSOCIATION_STRUCTURE>>
 * +1 ALIA @<XREF:INDI>@
 * +1 ANCI @<XREF:SUBM>@
 * +1 DESI @<XREF:SUBM>@
 * +1 RFN <PERMANENT_RECORD_FILE_NUMBER>
 * +1 AFN <ANCESTRAL_FILE_NUMBER>
 * +1 REFN <USER_REFERENCE_NUMBER>
 * +2 TYPE <USER_REFERENCE_TYPE>
 * +1 RIN <AUTOMATED_RECORD_ID>
 * +1 <<CHANGE_DATE>>
 * +1 <<NOTE_STRUCTURE>>
 * +1 <<SOURCE_CITATION>>
 * +1 <<MULTIMEDIA_LINK>>
 */
public final class IndividualEditorPanel extends javax.swing.JPanel {

    private class EventsListSelectionHandler implements ListSelectionListener {

        @Override
        public void valueChanged(ListSelectionEvent lse) {
            ListSelectionModel lsm = (ListSelectionModel) lse.getSource();
            if (lse.getValueIsAdjusting() == false && lsm.isSelectionEmpty() == false) {
                individualEventEditorPanel.commit();
                if (lsm.getMinSelectionIndex() < mEventsListModel.getSize()) {
                    individualEventEditorPanel.set(mIndividual, mEventsListModel.getValueAt(lsm.getMinSelectionIndex()));
                }
            }
        }

    }
    private Indi mIndividual;
    private Property mEvent = null;
    private Property mMultiMediaObject;
    private boolean updateOnGoing = false;
    private EventsListModel mEventsListModel = new EventsListModel();

    private ArrayList<String> mIndividualEventsTags = new ArrayList<String>() {
        {
            /*
             * INDIVIDUAL_EVENT
             */
            add("BIRT");
            add("CHR");
            add("DEAT");
            add("BURI");
            add("CREM");
            add("ADOP");
            add("BAPM");
            add("BARM");
            add("BASM");
            add("BLES");
            add("CHRA");
            add("CONF");
            add("FCOM");
            add("ORDN");
            add("NATU");
            add("EMIG");
            add("IMMI");
            add("CENS");
            add("PROB");
            add("WILL");
            add("GRAD");
            add("RETI");
            add("EVEN");
            /*
             * INDIVIDUAL_ATTRIBUTE
             */
            add("CAST");
            add("DSCR");
            add("EDUC");
            add("IDNO");
            add("NATI");
            add("NCHI");
            add("NMR");
            add("OCCU");
            add("PROP");
            add("RELI");
            add("RESI");
            add("SSN");
            add("TITL");
            add("FACT");
        }
    };
    private DefaultComboBoxModel<String> mEventsModel = new DefaultComboBoxModel<String>(new String[]{});

    /**
     * Creates new form IndividualEditorPanel
     */
    public IndividualEditorPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        generalPanel = new javax.swing.JPanel();
        individualIDLabel = new javax.swing.JLabel();
        individualIDTextField = new javax.swing.JTextField();
        nameEditorPanel = new ancestris.modules.editors.genealogyeditor.panels.NameEditorPanel();
        sexBeanPanel = new ancestris.modules.editors.genealogyeditor.beans.SexBean();
        imageBean = new ancestris.modules.editors.genealogyeditor.beans.ImageBean();
        privateRecordToggleButton = new javax.swing.JToggleButton();
        individualInformationTabbedPane = new javax.swing.JTabbedPane();
        eventsPanel = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        jLabel1 = new javax.swing.JLabel();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(12, 12), new java.awt.Dimension(12, 12), new java.awt.Dimension(12, 12));
        eventTypeComboBox = new javax.swing.JComboBox<String>();
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(12, 12), new java.awt.Dimension(12, 12), new java.awt.Dimension(12, 12));
        deleteEventButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        eventsList = new javax.swing.JList();
        individualEventEditorPanel = new ancestris.modules.editors.genealogyeditor.panels.IndividualEventEditorPanel();
        familiesChildPanel = new javax.swing.JPanel();
        familiesChildTreeTablePanel = new ancestris.modules.editors.genealogyeditor.panels.FamiliesReferenceTreeTablePanel(FamiliesReferenceTreeTablePanel.EDIT_FAMC);
        familiesSpousePanel = new javax.swing.JPanel();
        familiesSpouseTreeTablePanel = new ancestris.modules.editors.genealogyeditor.panels.FamiliesReferenceTreeTablePanel(FamiliesReferenceTreeTablePanel.EDIT_FAMS);
        sourcesPanel = new javax.swing.JPanel();
        sourceCitationsListPanel = new ancestris.modules.editors.genealogyeditor.panels.SourceCitationsListPanel();
        namesPanel = new javax.swing.JPanel();
        namesListPanel = new ancestris.modules.editors.genealogyeditor.panels.NamesListPanel();
        notesPanel = new javax.swing.JPanel();
        noteCitationsListPanel = new ancestris.modules.editors.genealogyeditor.panels.NoteCitationsListPanel();
        referencesPanel = new javax.swing.JPanel();
        associationsListPanel = new ancestris.modules.editors.genealogyeditor.panels.AssociationsListPanel();
        galleryPanel = new javax.swing.JPanel();
        multimediaObjectCitationsListPanel = new ancestris.modules.editors.genealogyeditor.panels.MultimediaObjectCitationsListPanel();
        changeDateLabel = new javax.swing.JLabel();
        changeDateTextField = new javax.swing.JTextField();

        setMinimumSize(new java.awt.Dimension(758, 380));
        setName(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("IndividualEditorPanel.name"), new Object[] {})); // NOI18N

        individualIDLabel.setText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("IndividualEditorPanel.individualIDLabel.text"), new Object[] {})); // NOI18N

        individualIDTextField.setEditable(false);
        individualIDTextField.setColumns(8);
        individualIDTextField.setText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("IndividualEditorPanel.individualIDTextField.text"), new Object[] {})); // NOI18N
        individualIDTextField.setToolTipText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("IndividualEditorPanel.individualIDTextField.toolTipText"), new Object[] {})); // NOI18N

        imageBean.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                imageBeanMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout imageBeanLayout = new javax.swing.GroupLayout(imageBean);
        imageBean.setLayout(imageBeanLayout);
        imageBeanLayout.setHorizontalGroup(
            imageBeanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 150, Short.MAX_VALUE)
        );
        imageBeanLayout.setVerticalGroup(
            imageBeanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 200, Short.MAX_VALUE)
        );

        privateRecordToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/lock_open.png"))); // NOI18N
        privateRecordToggleButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/lock_open.png"))); // NOI18N
        privateRecordToggleButton.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/lock.png"))); // NOI18N
        privateRecordToggleButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/lock.png"))); // NOI18N

        javax.swing.GroupLayout generalPanelLayout = new javax.swing.GroupLayout(generalPanel);
        generalPanel.setLayout(generalPanelLayout);
        generalPanelLayout.setHorizontalGroup(
            generalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(generalPanelLayout.createSequentialGroup()
                .addComponent(imageBean, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(generalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(generalPanelLayout.createSequentialGroup()
                        .addComponent(sexBeanPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(individualIDLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(individualIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(privateRecordToggleButton))
                    .addComponent(nameEditorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        generalPanelLayout.setVerticalGroup(
            generalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(generalPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(generalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(sexBeanPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(generalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                        .addComponent(privateRecordToggleButton)
                        .addComponent(individualIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(individualIDLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nameEditorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(imageBean, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        individualInformationTabbedPane.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        jLabel1.setText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("IndividualEditorPanel.jLabel1.text"), new Object[] {})); // NOI18N
        jToolBar1.add(jLabel1);
        jToolBar1.add(filler2);

        eventTypeComboBox.setModel(mEventsModel);
        eventTypeComboBox.setToolTipText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("IndividualEditorPanel.eventTypeComboBox.toolTipText"), new Object[] {})); // NOI18N
        eventTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eventTypeComboBoxActionPerformed(evt);
            }
        });
        jToolBar1.add(eventTypeComboBox);
        jToolBar1.add(filler3);

        deleteEventButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/edit_delete.png"))); // NOI18N
        deleteEventButton.setToolTipText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("IndividualEditorPanel.deleteEventButton.toolTipText"), new Object[] {})); // NOI18N
        deleteEventButton.setFocusable(false);
        deleteEventButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        deleteEventButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        deleteEventButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteEventButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(deleteEventButton);

        eventsList.setModel(mEventsListModel);
        eventsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(eventsList);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1)
                .addGap(0, 0, 0))
        );

        jSplitPane1.setLeftComponent(jPanel1);

        individualEventEditorPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jSplitPane1.setRightComponent(individualEventEditorPanel);

        javax.swing.GroupLayout eventsPanelLayout = new javax.swing.GroupLayout(eventsPanel);
        eventsPanel.setLayout(eventsPanelLayout);
        eventsPanelLayout.setHorizontalGroup(
            eventsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(eventsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1144, Short.MAX_VALUE))
        );
        eventsPanelLayout.setVerticalGroup(
            eventsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, eventsPanelLayout.createSequentialGroup()
                .addComponent(jSplitPane1)
                .addGap(0, 0, 0))
        );

        individualInformationTabbedPane.addTab(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("IndividualEditorPanel.eventsPanel.TabConstraints.tabTitle"), new Object[] {}), new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/event.png")), eventsPanel); // NOI18N

        javax.swing.GroupLayout familiesChildPanelLayout = new javax.swing.GroupLayout(familiesChildPanel);
        familiesChildPanel.setLayout(familiesChildPanelLayout);
        familiesChildPanelLayout.setHorizontalGroup(
            familiesChildPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(familiesChildTreeTablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 1156, Short.MAX_VALUE)
        );
        familiesChildPanelLayout.setVerticalGroup(
            familiesChildPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, familiesChildPanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(familiesChildTreeTablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        individualInformationTabbedPane.addTab(org.openide.util.NbBundle.getMessage(IndividualEditorPanel.class, "IndividualEditorPanel.familiesChildPanel.TabConstraints.tabTitle"), new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/family.png")), familiesChildPanel); // NOI18N

        javax.swing.GroupLayout familiesSpousePanelLayout = new javax.swing.GroupLayout(familiesSpousePanel);
        familiesSpousePanel.setLayout(familiesSpousePanelLayout);
        familiesSpousePanelLayout.setHorizontalGroup(
            familiesSpousePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(familiesSpouseTreeTablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 1156, Short.MAX_VALUE)
        );
        familiesSpousePanelLayout.setVerticalGroup(
            familiesSpousePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, familiesSpousePanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(familiesSpouseTreeTablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        individualInformationTabbedPane.addTab(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("IndividualEditorPanel.familiesSpousePanel.TabConstraints.tabTitle"), new Object[] {}), familiesSpousePanel); // NOI18N

        javax.swing.GroupLayout sourcesPanelLayout = new javax.swing.GroupLayout(sourcesPanel);
        sourcesPanel.setLayout(sourcesPanelLayout);
        sourcesPanelLayout.setHorizontalGroup(
            sourcesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sourceCitationsListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 1156, Short.MAX_VALUE)
        );
        sourcesPanelLayout.setVerticalGroup(
            sourcesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sourceCitationsListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        individualInformationTabbedPane.addTab(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("IndividualEditorPanel.sourcesPanel.TabConstraints.tabTitle"), new Object[] {}), new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/source.png")), sourcesPanel); // NOI18N

        javax.swing.GroupLayout namesPanelLayout = new javax.swing.GroupLayout(namesPanel);
        namesPanel.setLayout(namesPanelLayout);
        namesPanelLayout.setHorizontalGroup(
            namesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(namesListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 1156, Short.MAX_VALUE)
        );
        namesPanelLayout.setVerticalGroup(
            namesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(namesListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        individualInformationTabbedPane.addTab(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("IndividualEditorPanel.namesPanel.TabConstraints.tabTitle"), new Object[] {}), new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/Name.png")), namesPanel); // NOI18N

        javax.swing.GroupLayout notesPanelLayout = new javax.swing.GroupLayout(notesPanel);
        notesPanel.setLayout(notesPanelLayout);
        notesPanelLayout.setHorizontalGroup(
            notesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(noteCitationsListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 1156, Short.MAX_VALUE)
        );
        notesPanelLayout.setVerticalGroup(
            notesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(noteCitationsListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        individualInformationTabbedPane.addTab(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("IndividualEditorPanel.notesPanel.TabConstraints.tabTitle"), new Object[] {}), new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/Note.png")), notesPanel); // NOI18N

        javax.swing.GroupLayout referencesPanelLayout = new javax.swing.GroupLayout(referencesPanel);
        referencesPanel.setLayout(referencesPanelLayout);
        referencesPanelLayout.setHorizontalGroup(
            referencesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(associationsListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 1156, Short.MAX_VALUE)
        );
        referencesPanelLayout.setVerticalGroup(
            referencesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(associationsListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        individualInformationTabbedPane.addTab(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("IndividualEditorPanel.referencesPanel.TabConstraints.tabTitle"), new Object[] {}), new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/association.png")), referencesPanel); // NOI18N

        javax.swing.GroupLayout galleryPanelLayout = new javax.swing.GroupLayout(galleryPanel);
        galleryPanel.setLayout(galleryPanelLayout);
        galleryPanelLayout.setHorizontalGroup(
            galleryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(multimediaObjectCitationsListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 1156, Short.MAX_VALUE)
        );
        galleryPanelLayout.setVerticalGroup(
            galleryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(multimediaObjectCitationsListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        individualInformationTabbedPane.addTab("Gallery", new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/Media.png")), galleryPanel); // NOI18N

        changeDateLabel.setText(org.openide.util.NbBundle.getMessage(IndividualEditorPanel.class, "IndividualEditorPanel.changeDateLabel.text")); // NOI18N

        changeDateTextField.setEditable(false);
        changeDateTextField.setText(org.openide.util.NbBundle.getMessage(IndividualEditorPanel.class, "IndividualEditorPanel.changeDateTextField.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(generalPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(individualInformationTabbedPane)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(changeDateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(changeDateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(858, 858, 858))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(generalPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(individualInformationTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(changeDateLabel)
                    .addComponent(changeDateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void imageBeanMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_imageBeanMouseClicked
        Gedcom gedcom = mIndividual.getGedcom();
        int undoNb = gedcom.getUndoNb();

        if ((mMultiMediaObject = mIndividual.getProperty("OBJE")) == null) {
            try {
                gedcom.doUnitOfWork(new UnitOfWork() {

                    @Override
                    public void perform(Gedcom gedcom) throws GedcomException {
                        if (gedcom.getGrammar().getVersion().equals("5.5.1")) {
                            mMultiMediaObject = mIndividual.getGedcom().createEntity("OBJE");
                        } else {
                            mMultiMediaObject = mIndividual.addProperty("OBJE", "");
                        }
                    }
                }); // end of doUnitOfWork

                MultiMediaObjectEditorPanel multiMediaObjectEditorPanel = new MultiMediaObjectEditorPanel();
                multiMediaObjectEditorPanel.set(mMultiMediaObject);

                DialogManager.ADialog multiMediaObjectEditorDialog = new DialogManager.ADialog(
                        NbBundle.getMessage(IndividualEditorPanel.class, "IndividualEditorPanel.edit.title"),
                        multiMediaObjectEditorPanel);
                multiMediaObjectEditorDialog.setDialogId(MultiMediaObjectEditorPanel.class
                        .getName());

                if (multiMediaObjectEditorDialog.show()
                        == DialogDescriptor.OK_OPTION) {
                    multiMediaObjectEditorPanel.commit();
                    if (mMultiMediaObject instanceof Media) {
                        mIndividual.addMedia((Media) mMultiMediaObject);
                    }
                    imageBean.setImage(mMultiMediaObject);
                    repaint();
                } else {
                    while (gedcom.getUndoNb() > undoNb && gedcom.canUndo()) {
                        gedcom.undoUnitOfWork(false);
                    }
                }
            } catch (GedcomException ex) {
                Exceptions.printStackTrace(ex);
            }
        } else {
            for (Property multiMediaObject : mIndividual.getProperties("OBJE")) {
                String objetFormat = null;
                if (mIndividual.getGedcom().getGrammar().getVersion().equals("5.5.1")) {
                    if (multiMediaObject instanceof PropertyMedia) {
                        Property propertyFormat = ((Media) ((PropertyMedia) multiMediaObject).getTargetEntity()).getPropertyByPath(".:FILE:FORM");
                        if (propertyFormat != null) {
                            objetFormat = propertyFormat.getValue();
                        }
                    } else {
                        Property propertyFormat = multiMediaObject.getPropertyByPath(".:FILE:FORM");
                        if (propertyFormat != null) {
                            objetFormat = propertyFormat.getValue();
                        }
                    }
                } else {
                    if (multiMediaObject instanceof PropertyMedia) {
                        Property propertyFormat = ((Media) ((PropertyMedia) multiMediaObject).getTargetEntity()).getProperty("FORM");
                        if (propertyFormat != null) {
                            objetFormat = propertyFormat.getValue();
                        }
                    } else {
                        Property propertyFormat = multiMediaObject.getProperty("FORM");
                        if (propertyFormat != null) {
                            objetFormat = propertyFormat.getValue();
                        }
                    }
                }

                // bmp | gif | jpeg
                if (objetFormat != null && (objetFormat.equals("bmp") || objetFormat.equals("gif") || objetFormat.equals("jpeg") || objetFormat.equals("jpg") || objetFormat.equals("png"))) {

                    MultiMediaObjectEditorPanel multiMediaObjectEditorPanel = new MultiMediaObjectEditorPanel();
                    multiMediaObjectEditorPanel.set(mMultiMediaObject);
                    String multiMediaObjectTitle;
                    if (mMultiMediaObject instanceof PropertyMedia) {
                        multiMediaObjectTitle = ((Media) ((PropertyMedia) mMultiMediaObject).getTargetEntity()).getTitle();
                    } else {
                        Property propertyTitle = mMultiMediaObject.getProperty("TITL");
                        multiMediaObjectTitle = propertyTitle != null ? propertyTitle.getValue() : "";

                    }
                    DialogManager.ADialog multiMediaObjectEditorDialog = new DialogManager.ADialog(
                            NbBundle.getMessage(IndividualEditorPanel.class, "IndividualEditorPanel.edit.title", multiMediaObjectTitle),
                            multiMediaObjectEditorPanel);
                    multiMediaObjectEditorDialog.setDialogId(MultiMediaObjectEditorPanel.class
                            .getName());

                    if (multiMediaObjectEditorDialog.show()
                            == DialogDescriptor.OK_OPTION) {
                        multiMediaObjectEditorPanel.commit();
                        if (mMultiMediaObject instanceof Media) {
                            mIndividual.addMedia((Media) mMultiMediaObject);
                        }
                        imageBean.setImage(mMultiMediaObject);
                        repaint();
                    } else {
                        while (gedcom.getUndoNb() > undoNb && gedcom.canUndo()) {
                            gedcom.undoUnitOfWork(false);
                        }
                    }

                    break;
                }
            }
        }
    }//GEN-LAST:event_imageBeanMouseClicked

    private void deleteEventButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteEventButtonActionPerformed
        final int index = eventsList.getSelectedIndex();
        Gedcom gedcom = mIndividual.getGedcom();

        if (index != -1) {
            Property event = mEventsListModel.getValueAt(index);

            DialogManager createYesNo = DialogManager.createYesNo(
                NbBundle.getMessage(
                    EventEditorPanel.class, "EventsListPanel.deleteEventConfirmation.title",
                    PropertyTag2Name.getTagName(event.getTag())),
                NbBundle.getMessage(
                    EventEditorPanel.class, "EventsListPanel.deleteEventConfirmation.text",
                    PropertyTag2Name.getTagName(event.getTag()),
                    mIndividual));
            if (createYesNo.show() == DialogManager.YES_OPTION) {
                try {
                    gedcom.doUnitOfWork(new UnitOfWork() {

                        @Override
                        public void perform(Gedcom gedcom) throws GedcomException {
                            mIndividual.delProperty(mEventsListModel.remove(index));
                        }
                    }); // end of doUnitOfWork
                    ArrayList<Property> eventsProperties = new ArrayList<Property>();
                    for (Property property : mIndividual.getProperties()) {
                        if (mIndividualEventsTags.contains(property.getTag())) {
                            eventsProperties.add(property);
                        }
                    }
                    seteventTypeComboBox(eventsProperties);
                    eventsList.setSelectedIndex(0);
                } catch (GedcomException ex) {
                    Exceptions.printStackTrace(ex);
                }
            }
        }
    }//GEN-LAST:event_deleteEventButtonActionPerformed

    private void eventTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eventTypeComboBoxActionPerformed
        if (!updateOnGoing) {
            Gedcom gedcom = mIndividual.getGedcom();
            mEvent = null;
            final String eventType = eventTypeComboBox.getSelectedItem().toString();
            try {
                gedcom.doUnitOfWork(new UnitOfWork() {

                    @Override
                    public void perform(Gedcom gedcom) throws GedcomException {
                        mEvent = mIndividual.addProperty(PropertyTag2Name.getPropertyTag(eventType), "");
                    }
                }); // end of doUnitOfWork

                if (mEvent != null) {
                    ArrayList<Property> eventsProperties = new ArrayList<Property>();
                    for (Property property : mIndividual.getProperties()) {
                        if (mIndividualEventsTags.contains(property.getTag())) {
                            eventsProperties.add(property);
                        }
                    }
                    seteventTypeComboBox(eventsProperties);
                    mEventsListModel.add(mEvent);
                    individualEventEditorPanel.set(mIndividual, mEvent);

                }
            } catch (GedcomException ex) {
                Exceptions.printStackTrace(ex);
            }
        }
    }//GEN-LAST:event_eventTypeComboBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private ancestris.modules.editors.genealogyeditor.panels.AssociationsListPanel associationsListPanel;
    private javax.swing.JLabel changeDateLabel;
    private javax.swing.JTextField changeDateTextField;
    private javax.swing.JButton deleteEventButton;
    private javax.swing.JComboBox<String> eventTypeComboBox;
    private javax.swing.JList eventsList;
    private javax.swing.JPanel eventsPanel;
    private javax.swing.JPanel familiesChildPanel;
    private ancestris.modules.editors.genealogyeditor.panels.FamiliesReferenceTreeTablePanel familiesChildTreeTablePanel;
    private javax.swing.JPanel familiesSpousePanel;
    private ancestris.modules.editors.genealogyeditor.panels.FamiliesReferenceTreeTablePanel familiesSpouseTreeTablePanel;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler3;
    private javax.swing.JPanel galleryPanel;
    private javax.swing.JPanel generalPanel;
    private ancestris.modules.editors.genealogyeditor.beans.ImageBean imageBean;
    private ancestris.modules.editors.genealogyeditor.panels.IndividualEventEditorPanel individualEventEditorPanel;
    private javax.swing.JLabel individualIDLabel;
    private javax.swing.JTextField individualIDTextField;
    private javax.swing.JTabbedPane individualInformationTabbedPane;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JToolBar jToolBar1;
    private ancestris.modules.editors.genealogyeditor.panels.MultimediaObjectCitationsListPanel multimediaObjectCitationsListPanel;
    private ancestris.modules.editors.genealogyeditor.panels.NameEditorPanel nameEditorPanel;
    private ancestris.modules.editors.genealogyeditor.panels.NamesListPanel namesListPanel;
    private javax.swing.JPanel namesPanel;
    private ancestris.modules.editors.genealogyeditor.panels.NoteCitationsListPanel noteCitationsListPanel;
    private javax.swing.JPanel notesPanel;
    private javax.swing.JToggleButton privateRecordToggleButton;
    private javax.swing.JPanel referencesPanel;
    private ancestris.modules.editors.genealogyeditor.beans.SexBean sexBeanPanel;
    private ancestris.modules.editors.genealogyeditor.panels.SourceCitationsListPanel sourceCitationsListPanel;
    private javax.swing.JPanel sourcesPanel;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the individual
     */
    public Indi getIndividual() {
        return mIndividual;
    }

    /**
     * @param individual the individual to set
     */
    public void set(Indi individual) {
        this.mIndividual = individual;
        String gedcomVersion = mIndividual.getGedcom().getGrammar().getVersion();
        if (!gedcomVersion.equals("5.5.1")) {
            privateRecordToggleButton.setVisible(false);
        }

        /*
         * n @XREF:INDI@ INDI
         */
        individualIDTextField.setText(individual.getId());

        /*
         * +1 RESN <RESTRICTION_NOTICE>
         * not used
         */
        Property restrictionNotice = individual.getProperty("RESN", true);
        if (restrictionNotice != null) {
            privateRecordToggleButton.setSelected(true);
        } else {
            privateRecordToggleButton.setSelected(false);
        }

        /*
         * +1 <<PERSONAL_NAME_STRUCTURE>>
         */
        List<PropertyName> namesList = individual.getProperties(PropertyName.class);
        if (namesList.size() > 0) {
            PropertyName name = namesList.remove(0);
            if (name != null) {
                nameEditorPanel.set(individual, name);
            }
        } else {
            nameEditorPanel.set(individual, null);
        }
        namesListPanel.set(individual, namesList);

        /*
         * +1 SEX <SEX_VALUE>
         */
        PropertySex sex = (PropertySex) individual.getProperty("SEX", true);
        if (sex == null) {
            individual.setSex(PropertySex.UNKNOWN);
            sex = (PropertySex) individual.getProperty("SEX", true);
        }
        sexBeanPanel.set(individual, sex);

        /*
         * +1 <<INDIVIDUAL_EVENT_STRUCTURE>>
         * +1 <<INDIVIDUAL_ATTRIBUTE_STRUCTURE>>
         */
        ArrayList<Property> individualEvents = new ArrayList<Property>();
        for (Property property : individual.getProperties()) {
            if (mIndividualEventsTags.contains(property.getTag())) {
                individualEvents.add(property);
            }
        }
        mEventsListModel.addAll(individualEvents);
        eventsList.getSelectionModel().addListSelectionListener(new EventsListSelectionHandler());
        eventsList.setSelectedIndex(0);
        seteventTypeComboBox(individualEvents);

        /*
         * +1 <<LDS_INDIVIDUAL_ORDINANCE>>
         * Not Used
         */

        /*
         * +1 <<CHILD_TO_FAMILY_LINK>>
         */
        familiesChildTreeTablePanel.setFamiliesList(individual, individual.getProperties(PropertyFamilyChild.class));

        /*
         * +1 <<SPOUSE_TO_FAMILY_LINK>>
         */
        familiesSpouseTreeTablePanel.setFamiliesList(individual, individual.getProperties(PropertyFamilySpouse.class));

        /*
         * +1 SUBM @<XREF:SUBM>@
         * Not used
         */

        /*
         * +1 <<ASSOCIATION_STRUCTURE>>
         */
        associationsListPanel.setAssociationsList(individual, individual.getProperties(PropertyAssociation.class));

        /*
         * +1 ALIA @<XREF:INDI>@
         * Not used
         *
         * +1 ANCI @<XREF:SUBM>@
         * Not used
         *
         * +1 DESI @<XREF:SUBM>@
         * Not used
         *
         * +1 RFN <PERMANENT_RECORD_FILE_NUMBER>
         * Not used
         *
         * +1 AFN <ANCESTRAL_FILE_NUMBER>
         * Not used
         *
         * +1 REFN <USER_REFERENCE_NUMBER>
         * Not used
         *
         * +2 TYPE <USER_REFERENCE_TYPE>
         * Not used
         *
         * +1 RIN <AUTOMATED_RECORD_ID>
         * Not used
         */
        /*
         * +1 <<CHANGE_DATE>>
         */
        Property changeDate = mIndividual.getProperty("CHAN");
        if (changeDate != null) {
            changeDateTextField.setText(((PropertyChange) changeDate).getDisplayValue());
        }

        /*
         * +1 <<NOTE_STRUCTURE>>
         */
        noteCitationsListPanel.set(individual, Arrays.asList(individual.getProperties("NOTE")));

        /*
         * +1 <<SOURCE_CITATION>>
         */
        sourceCitationsListPanel.set(individual, Arrays.asList(individual.getProperties("SOUR")));

        /*
         * +1 <<MULTIMEDIA_LINK>>
         */
        for (Property multiMediaObject : individual.getProperties("OBJE")) {
            String objetFormat = null;
            if (gedcomVersion.equals("5.5.1")) {
                if (multiMediaObject instanceof PropertyMedia) {
                    Property propertyFormat = ((Media) ((PropertyMedia) multiMediaObject).getTargetEntity()).getPropertyByPath(".:FILE:FORM");
                    if (propertyFormat != null) {
                        objetFormat = propertyFormat.getValue();
                    }
                } else {
                    Property propertyFormat = multiMediaObject.getPropertyByPath(".:FILE:FORM");
                    if (propertyFormat != null) {
                        objetFormat = propertyFormat.getValue();
                    }
                }
            } else {
                if (multiMediaObject instanceof PropertyMedia) {
                    Property propertyFormat = ((Media) ((PropertyMedia) multiMediaObject).getTargetEntity()).getProperty("FORM");
                    if (propertyFormat != null) {
                        objetFormat = propertyFormat.getValue();
                    }
                } else {
                    Property propertyFormat = multiMediaObject.getProperty("FORM");
                    if (propertyFormat != null) {
                        objetFormat = propertyFormat.getValue();
                    }
                }
            }

            // bmp | gif | jpeg
            if (objetFormat != null && (objetFormat.equals("bmp") || objetFormat.equals("gif") || objetFormat.equals("jpeg") || objetFormat.equals("jpg") || objetFormat.equals("png"))) {
                imageBean.setImage(multiMediaObject);
                break;
            }
        }

        multimediaObjectCitationsListPanel.set(individual, Arrays.asList(individual.getProperties("OBJE")));
    }

    public Indi commit() {
        try {
            mIndividual.getGedcom().doUnitOfWork(new UnitOfWork() {

                @Override
                public void perform(Gedcom gedcom) throws GedcomException {
                    Property restrictionNotice = mIndividual.getProperty("RESN", true);
                    if (privateRecordToggleButton.isSelected()) {
                        if (restrictionNotice == null) {
                            mIndividual.addProperty("RESN", "confidential");
                        }
                    } else {
                        if (restrictionNotice != null) {
                            mIndividual.delProperty(restrictionNotice);
                        }
                    }
                }
            }); // end of doUnitOfWork

            nameEditorPanel.commit();
            sexBeanPanel.commit();
            individualEventEditorPanel.commit();

            return mIndividual;
        } catch (GedcomException ex) {
            Exceptions.printStackTrace(ex);
            return null;
        }
    }

    private void seteventTypeComboBox(List<Property> eventsList) {
        updateOnGoing = true;
        mEventsModel.removeAllElements();

        for (String tag : mIndividualEventsTags) {
            mEventsModel.addElement(PropertyTag2Name.getTagName(tag));
        }
        for (Property event : eventsList) {
            /*
             * Filter by events already present
             */
            if (!event.getTag().equals("EVEN") && !event.getTag().equals("GRAD")) {
                mEventsModel.removeElement(PropertyTag2Name.getTagName(event.getTag()));
            }
        }
        updateOnGoing = false;
    }
}
