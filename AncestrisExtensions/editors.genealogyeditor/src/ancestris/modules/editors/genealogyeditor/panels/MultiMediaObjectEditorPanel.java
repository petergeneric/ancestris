package ancestris.modules.editors.genealogyeditor.panels;

import ancestris.modules.editors.genealogyeditor.beans.ImageBean;
import genj.gedcom.*;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle;

/**
 *
 * @author dominique
 */
public class MultiMediaObjectEditorPanel extends javax.swing.JPanel {

    private Property mRoot;
    private Property mMultiMediaObject;

    /**
     * Creates new form MultiMediaObjectEditorPanel
     */
    public MultiMediaObjectEditorPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 32767));
        multiMediaObjectIDLabel = new javax.swing.JLabel();
        multiMediaObjectIDTextField = new javax.swing.JTextField();
        multiMediaObjectTabbedPane = new javax.swing.JTabbedPane();
        noteTextPanel = new javax.swing.JPanel();
        noteTextToolBar = new javax.swing.JToolBar();
        noteTextScrollPane = new javax.swing.JScrollPane();
        noteTextTextArea = new javax.swing.JTextArea();
        noteReferencesPanel = new javax.swing.JPanel();
        referencesListPanel = new ancestris.modules.editors.genealogyeditor.panels.ReferencesListPanel();
        multiMediaObjectTitleLabel = new javax.swing.JLabel();
        multiMediaObjectTitleTextField = new javax.swing.JTextField();
        imageBean = new ancestris.modules.editors.genealogyeditor.beans.ImageBean();

        multiMediaObjectIDLabel.setText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("MultiMediaObjectEditorPanel.multiMediaObjectIDLabel.text"), new Object[] {})); // NOI18N

        multiMediaObjectIDTextField.setColumns(8);
        multiMediaObjectIDTextField.setEditable(false);
        multiMediaObjectIDTextField.setText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("MultiMediaObjectEditorPanel.multiMediaObjectIDTextField.text"), new Object[] {})); // NOI18N

        noteTextToolBar.setFloatable(false);
        noteTextToolBar.setRollover(true);

        noteTextTextArea.setColumns(20);
        noteTextTextArea.setRows(5);
        noteTextScrollPane.setViewportView(noteTextTextArea);

        javax.swing.GroupLayout noteTextPanelLayout = new javax.swing.GroupLayout(noteTextPanel);
        noteTextPanel.setLayout(noteTextPanelLayout);
        noteTextPanelLayout.setHorizontalGroup(
            noteTextPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(noteTextToolBar, javax.swing.GroupLayout.DEFAULT_SIZE, 371, Short.MAX_VALUE)
            .addComponent(noteTextScrollPane, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        noteTextPanelLayout.setVerticalGroup(
            noteTextPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(noteTextPanelLayout.createSequentialGroup()
                .addComponent(noteTextToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(noteTextScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE))
        );

        multiMediaObjectTabbedPane.addTab(org.openide.util.NbBundle.getMessage(MultiMediaObjectEditorPanel.class, "MultiMediaObjectEditorPanel.noteTextPanel.TabConstraints.tabTitle"), new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/Note.png")), noteTextPanel); // NOI18N

        javax.swing.GroupLayout noteReferencesPanelLayout = new javax.swing.GroupLayout(noteReferencesPanel);
        noteReferencesPanel.setLayout(noteReferencesPanelLayout);
        noteReferencesPanelLayout.setHorizontalGroup(
            noteReferencesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(referencesListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 371, Short.MAX_VALUE)
        );
        noteReferencesPanelLayout.setVerticalGroup(
            noteReferencesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(referencesListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)
        );

        multiMediaObjectTabbedPane.addTab(org.openide.util.NbBundle.getMessage(MultiMediaObjectEditorPanel.class, "MultiMediaObjectEditorPanel.noteReferencesPanel.TabConstraints.tabTitle"), new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/association.png")), noteReferencesPanel); // NOI18N

        multiMediaObjectTitleLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        multiMediaObjectTitleLabel.setText(org.openide.util.NbBundle.getMessage(MultiMediaObjectEditorPanel.class, "MultiMediaObjectEditorPanel.multiMediaObjectTitleLabel.text")); // NOI18N

        imageBean.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                imageBeanMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout imageBeanLayout = new javax.swing.GroupLayout(imageBean);
        imageBean.setLayout(imageBeanLayout);
        imageBeanLayout.setHorizontalGroup(
            imageBeanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 156, Short.MAX_VALUE)
        );
        imageBeanLayout.setVerticalGroup(
            imageBeanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(multiMediaObjectTitleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 49, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(multiMediaObjectTitleTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 316, Short.MAX_VALUE)
                        .addGap(10, 10, 10)
                        .addComponent(multiMediaObjectIDLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(multiMediaObjectIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(imageBean, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(multiMediaObjectTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(multiMediaObjectIDLabel)
                    .addComponent(multiMediaObjectIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(multiMediaObjectTitleLabel)
                    .addComponent(multiMediaObjectTitleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(multiMediaObjectTabbedPane)
                    .addComponent(imageBean, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void imageBeanMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_imageBeanMouseClicked
        FileNameExtensionFilter imageFileFilter = new FileNameExtensionFilter(NbBundle.getMessage(ImageBean.class, "ImageBean.fileType"), "jpg", "jpeg", "png", "gif");
        final JFileChooser imageFileChooser = new JFileChooser();

        imageFileChooser.setFileFilter(imageFileFilter);
        imageFileChooser.setAcceptAllFileFilterUsed(true);
//        if (mImageFile != null) {
//            imageFileChooser.setSelectedFile(mImageFile);
//        }
        if (imageFileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            try {
                mRoot.getGedcom().doUnitOfWork(new UnitOfWork() {

                    @Override
                    public void perform(Gedcom gedcom) throws GedcomException {
                        File imageFile = imageFileChooser.getSelectedFile();
                        Property file = mMultiMediaObject.getProperty("FILE", true);
                        if (file != null && file instanceof PropertyFile) {
                            ((PropertyFile) file).addFile(imageFile, imageFile.getName());
                        } else {
                            mMultiMediaObject.addFile(imageFile, imageFile.getName());
                        }
                    }
                }); // end of doUnitOfWork

                String objetFormat = null;
                if (mMultiMediaObject instanceof PropertyMedia) {
                    Property propertyFormat = ((Media) ((PropertyMedia) mMultiMediaObject).getTargetEntity()).getProperty("FORM");
                    if (propertyFormat != null) {
                        objetFormat = propertyFormat.getValue();
                    }
                } else {
                    Property propertyFormat = mMultiMediaObject.getProperty("FORM");
                    if (propertyFormat != null) {
                        objetFormat = propertyFormat.getValue();
                    }
                }

                // bmp | gif | jpeg
                if (objetFormat != null && (objetFormat.equals("bmp") || objetFormat.equals("gif") || objetFormat.equals("jpeg"))) {
                    imageBean.setImage(mMultiMediaObject);
                    repaint();
                }
            } catch (GedcomException ex) {
                Exceptions.printStackTrace(ex);
            }
        }
    }//GEN-LAST:event_imageBeanMouseClicked
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.Box.Filler filler1;
    private ancestris.modules.editors.genealogyeditor.beans.ImageBean imageBean;
    private javax.swing.JLabel multiMediaObjectIDLabel;
    private javax.swing.JTextField multiMediaObjectIDTextField;
    private javax.swing.JTabbedPane multiMediaObjectTabbedPane;
    private javax.swing.JLabel multiMediaObjectTitleLabel;
    private javax.swing.JTextField multiMediaObjectTitleTextField;
    private javax.swing.JPanel noteReferencesPanel;
    private javax.swing.JPanel noteTextPanel;
    private javax.swing.JScrollPane noteTextScrollPane;
    private javax.swing.JTextArea noteTextTextArea;
    private javax.swing.JToolBar noteTextToolBar;
    private ancestris.modules.editors.genealogyeditor.panels.ReferencesListPanel referencesListPanel;
    // End of variables declaration//GEN-END:variables

    public void set(Property multiMediaObject) {
        // if multiMediaObject.getParent() ==  null then Media
        if (multiMediaObject instanceof PropertyMedia) {
            mMultiMediaObject = ((PropertyMedia) multiMediaObject).getTargetEntity();
        } else {
            mMultiMediaObject = multiMediaObject;
        }
        mRoot = mMultiMediaObject.getParent() == null ? mMultiMediaObject : mMultiMediaObject.getParent();
        imageBean.setImage(mMultiMediaObject);
        if (mMultiMediaObject instanceof Media) {
            multiMediaObjectIDTextField.setText(((Media) mMultiMediaObject).getId());
            multiMediaObjectTitleTextField.setText(((Media) mMultiMediaObject).getTitle());

            List<Entity> entitiesList = new ArrayList<Entity>();
            for (PropertyXRef entityRef : mMultiMediaObject.getProperties(PropertyXRef.class)) {
                entitiesList.add(entityRef.getTargetEntity());
            }
            referencesListPanel.set((Media) mMultiMediaObject, entitiesList);

            Property propertyNote = mMultiMediaObject.getProperty("NOTE");
            if (propertyNote != null) {
                noteTextTextArea.setText(propertyNote.getValue());
            }
        } else {
            Property propertyTitle = mMultiMediaObject.getProperty("TITL");
            multiMediaObjectTitleTextField.setText(propertyTitle != null ? propertyTitle.getValue() : "");
            multiMediaObjectIDTextField.setVisible(false);
            multiMediaObjectIDLabel.setVisible(false);
            multiMediaObjectTabbedPane.setVisible(false);
        }
    }

    public Property commit() {
        try {
            mRoot.getGedcom().doUnitOfWork(new UnitOfWork() {

                @Override
                public void perform(Gedcom gedcom) throws GedcomException {
                    if (mMultiMediaObject instanceof Media) {
                        ((Media) mMultiMediaObject).setTitle(multiMediaObjectTitleTextField.getText());
                        Property propertyNote = mMultiMediaObject.getProperty("NOTE");
                        if (propertyNote == null) {
                            mMultiMediaObject.addProperty("NOTE", noteTextTextArea.getText());
                        } else {
                            propertyNote.setValue(noteTextTextArea.getText());
                        }
                    } else {
                        Property propertyTitle = mMultiMediaObject.getProperty("TITL");
                        if (propertyTitle == null) {
                            mMultiMediaObject.addProperty("TITL", multiMediaObjectTitleTextField.getText());
                        } else {
                            propertyTitle.setValue(multiMediaObjectTitleTextField.getText());
                        }
                    }
                }
            }); // end of doUnitOfWork
        } catch (GedcomException ex) {
            Exceptions.printStackTrace(ex);
        }
        return mMultiMediaObject;
    }
}
