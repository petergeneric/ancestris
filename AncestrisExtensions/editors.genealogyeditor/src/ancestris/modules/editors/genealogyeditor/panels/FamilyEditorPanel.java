package ancestris.modules.editors.genealogyeditor.panels;

import ancestris.util.swing.DialogManager;
import genj.gedcom.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openide.DialogDescriptor;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle;

/**
 *
 * @author dominique
 */

/*
 * n @<XREF:FAM>@ FAM
 * +1 RESN <RESTRICTION_NOTICE>
 * +1 <<FAMILY_EVENT_STRUCTURE>>
 * +1 HUSB @<XREF:INDI>@
 * +1 WIFE @<XREF:INDI>@
 * +1 CHIL @<XREF:INDI>@
 * +1 NCHI <COUNT_OF_CHILDREN>
 * +1 SUBM @<XREF:SUBM>@
 * +1 <<LDS_SPOUSE_SEALING>>
 * +1 REFN <USER_REFERENCE_NUMBER>
 * +2 TYPE <USER_REFERENCE_TYPE>
 * +1 RIN <AUTOMATED_RECORD_ID>
 * +1 <<CHANGE_DATE>>
 * +1 <<NOTE_STRUCTURE>>
 * +1 <<SOURCE_CITATION>>
 * +1 <<MULTIMEDIA_LINK>>
 *
 */
public class FamilyEditorPanel extends javax.swing.JPanel {

    final private ArrayList<String> mFamilyEventsTags = new ArrayList<String>() {
        {
            add("ANUL");
            add("CENS");
            add("DIV");
            add("DIVF");
            add("MARR");
            add("ENGA");
            add("MARB");
            add("MARC");
            add("MARL");
            add("MARS");
            add("RESI");
            add("EVEN");
        }
    };
    private Fam mFamily;
    private Indi mHusband;
    private Indi mWife;
    Entity mEntity;

    /**
     * Creates new form FamilyEditorPanel
     */
    public FamilyEditorPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        familyIDTextField = new javax.swing.JTextField();
        familyIDLabel = new javax.swing.JLabel();
        privateRecordToggleButton = new javax.swing.JToggleButton();
        fatherPanel = new javax.swing.JPanel();
        fatherToolBar = new javax.swing.JToolBar();
        addHusbandButton = new javax.swing.JButton();
        linkToHusbandButton = new javax.swing.JButton();
        removeHusbandButton = new javax.swing.JButton();
        editHusbandButton = new javax.swing.JButton();
        HusbandNameLabel = new javax.swing.JLabel();
        husbandNameTextField = new javax.swing.JTextField();
        husbandBirthDateLabel = new javax.swing.JLabel();
        husbandBirthDateTextField = new javax.swing.JTextField();
        husbandDeathDateLabel = new javax.swing.JLabel();
        husbandDeathDateTextField = new javax.swing.JTextField();
        motherPanel = new javax.swing.JPanel();
        motherToolBar = new javax.swing.JToolBar();
        addWifeButton = new javax.swing.JButton();
        linkToWifeButton = new javax.swing.JButton();
        removeWifeButton = new javax.swing.JButton();
        editWifeButton = new javax.swing.JButton();
        wifeLabel = new javax.swing.JLabel();
        wifeNameTextField = new javax.swing.JTextField();
        wifeBirthDateLabel = new javax.swing.JLabel();
        wifeBirthDateTextField = new javax.swing.JTextField();
        wifeDeathDateLabel = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        wifeDeathDateTextField = new javax.swing.JTextField();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        childrensPanel = new javax.swing.JPanel();
        childrensListPanel = new ancestris.modules.editors.genealogyeditor.panels.ChildrenListPanel();
        eventsPanel = new javax.swing.JPanel();
        eventsListPanel = new ancestris.modules.editors.genealogyeditor.panels.EventsListPanel(EventsListPanel.FAMILY_EVENT_TYPE_LIST);
        sourcesPanel = new javax.swing.JPanel();
        sourceCitationsListPanel = new ancestris.modules.editors.genealogyeditor.panels.SourceCitationsListPanel();
        notesPanel = new javax.swing.JPanel();
        noteCitationsListPanel = new ancestris.modules.editors.genealogyeditor.panels.NoteCitationsListPanel();
        galleryPanel = new javax.swing.JPanel();
        multimediaObjectCitationsListPanel = new ancestris.modules.editors.genealogyeditor.panels.MultimediaObjectCitationsListPanel();

        familyIDTextField.setColumns(8);
        familyIDTextField.setEditable(false);
        familyIDTextField.setText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("FamilyEditorPanel.familyIDTextField.text"), new Object[] {})); // NOI18N

        familyIDLabel.setText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("FamilyEditorPanel.familyIDLabel.text"), new Object[] {})); // NOI18N

        privateRecordToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/lock_open.png"))); // NOI18N
        privateRecordToggleButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/lock_open.png"))); // NOI18N
        privateRecordToggleButton.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/lock.png"))); // NOI18N
        privateRecordToggleButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/lock.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(505, Short.MAX_VALUE)
                .addComponent(familyIDLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(familyIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(privateRecordToggleButton)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(familyIDLabel)
                .addComponent(familyIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(privateRecordToggleButton))
        );

        fatherPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("FamilyEditorPanel.fatherPanel.border.title"), new Object[] {}))); // NOI18N

        fatherToolBar.setFloatable(false);
        fatherToolBar.setRollover(true);

        addHusbandButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/edit_add.png"))); // NOI18N
        addHusbandButton.setToolTipText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("FamilyEditorPanel.addHusbandButton.toolTipText"), new Object[] {})); // NOI18N
        addHusbandButton.setFocusable(false);
        addHusbandButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addHusbandButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        addHusbandButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addHusbandButtonActionPerformed(evt);
            }
        });
        fatherToolBar.add(addHusbandButton);

        linkToHusbandButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/link_add.png"))); // NOI18N
        linkToHusbandButton.setText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("FamilyEditorPanel.linkToHusbandButton.text"), new Object[] {})); // NOI18N
        linkToHusbandButton.setFocusable(false);
        linkToHusbandButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        linkToHusbandButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        linkToHusbandButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linkToHusbandButtonActionPerformed(evt);
            }
        });
        fatherToolBar.add(linkToHusbandButton);

        removeHusbandButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/edit_delete.png"))); // NOI18N
        removeHusbandButton.setFocusable(false);
        removeHusbandButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        removeHusbandButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        removeHusbandButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeHusbandButtonActionPerformed(evt);
            }
        });
        fatherToolBar.add(removeHusbandButton);

        editHusbandButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/edit.png"))); // NOI18N
        editHusbandButton.setFocusable(false);
        editHusbandButton.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        editHusbandButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        editHusbandButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editHusbandButtonActionPerformed(evt);
            }
        });
        fatherToolBar.add(editHusbandButton);

        HusbandNameLabel.setText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("FamilyEditorPanel.HusbandNameLabel.text"), new Object[] {})); // NOI18N

        husbandNameTextField.setEditable(false);
        husbandNameTextField.setText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("FamilyEditorPanel.husbandNameTextField.text"), new Object[] {})); // NOI18N

        husbandBirthDateLabel.setText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("FamilyEditorPanel.husbandBirthDateLabel.text"), new Object[] {})); // NOI18N

        husbandBirthDateTextField.setEditable(false);
        husbandBirthDateTextField.setText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("FamilyEditorPanel.husbandBirthDateTextField.text"), new Object[] {})); // NOI18N

        husbandDeathDateLabel.setText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("FamilyEditorPanel.husbandDeathDateLabel.text"), new Object[] {})); // NOI18N

        husbandDeathDateTextField.setEditable(false);
        husbandDeathDateTextField.setText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("FamilyEditorPanel.husbandDeathDateTextField.text"), new Object[] {})); // NOI18N

        javax.swing.GroupLayout fatherPanelLayout = new javax.swing.GroupLayout(fatherPanel);
        fatherPanel.setLayout(fatherPanelLayout);
        fatherPanelLayout.setHorizontalGroup(
            fatherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fatherPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(fatherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(husbandBirthDateLabel)
                    .addComponent(HusbandNameLabel)
                    .addComponent(husbandDeathDateLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fatherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(husbandNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE)
                    .addComponent(husbandBirthDateTextField)
                    .addComponent(husbandDeathDateTextField))
                .addContainerGap())
            .addComponent(fatherToolBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        fatherPanelLayout.setVerticalGroup(
            fatherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fatherPanelLayout.createSequentialGroup()
                .addComponent(fatherToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fatherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(HusbandNameLabel)
                    .addComponent(husbandNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fatherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(husbandBirthDateLabel)
                    .addComponent(husbandBirthDateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fatherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(husbandDeathDateLabel)
                    .addComponent(husbandDeathDateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        motherPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("FamilyEditorPanel.motherPanel.border.title"), new Object[] {}))); // NOI18N

        motherToolBar.setFloatable(false);
        motherToolBar.setRollover(true);

        addWifeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/edit_add.png"))); // NOI18N
        addWifeButton.setFocusable(false);
        addWifeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addWifeButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        addWifeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addWifeButtonActionPerformed(evt);
            }
        });
        motherToolBar.add(addWifeButton);

        linkToWifeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/link_add.png"))); // NOI18N
        linkToWifeButton.setText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("FamilyEditorPanel.linkToWifeButton.text"), new Object[] {})); // NOI18N
        linkToWifeButton.setFocusable(false);
        linkToWifeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        linkToWifeButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        linkToWifeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linkToWifeButtonActionPerformed(evt);
            }
        });
        motherToolBar.add(linkToWifeButton);

        removeWifeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/edit_delete.png"))); // NOI18N
        removeWifeButton.setFocusable(false);
        removeWifeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        removeWifeButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        removeWifeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeWifeButtonActionPerformed(evt);
            }
        });
        motherToolBar.add(removeWifeButton);

        editWifeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/edit.png"))); // NOI18N
        editWifeButton.setFocusable(false);
        editWifeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        editWifeButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        editWifeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editWifeButtonActionPerformed(evt);
            }
        });
        motherToolBar.add(editWifeButton);

        wifeLabel.setText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("FamilyEditorPanel.wifeLabel.text"), new Object[] {})); // NOI18N

        wifeNameTextField.setEditable(false);
        wifeNameTextField.setText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("FamilyEditorPanel.wifeNameTextField.text"), new Object[] {})); // NOI18N

        wifeBirthDateLabel.setText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("FamilyEditorPanel.wifeBirthDateLabel.text"), new Object[] {})); // NOI18N

        wifeBirthDateTextField.setEditable(false);
        wifeBirthDateTextField.setText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("FamilyEditorPanel.wifeBirthDateTextField.text"), new Object[] {})); // NOI18N

        wifeDeathDateLabel.setText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("FamilyEditorPanel.wifeDeathDateLabel.text"), new Object[] {})); // NOI18N

        jTextField6.setText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("FamilyEditorPanel.jTextField6.text"), new Object[] {})); // NOI18N

        wifeDeathDateTextField.setEditable(false);
        wifeDeathDateTextField.setText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("FamilyEditorPanel.wifeDeathDateTextField.text"), new Object[] {})); // NOI18N

        javax.swing.GroupLayout motherPanelLayout = new javax.swing.GroupLayout(motherPanel);
        motherPanel.setLayout(motherPanelLayout);
        motherPanelLayout.setHorizontalGroup(
            motherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(motherPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(motherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(wifeBirthDateLabel)
                    .addComponent(wifeLabel)
                    .addComponent(wifeDeathDateLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(motherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(wifeNameTextField)
                    .addComponent(wifeBirthDateTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
                    .addComponent(wifeDeathDateTextField))
                .addContainerGap())
            .addComponent(motherToolBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        motherPanelLayout.setVerticalGroup(
            motherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(motherPanelLayout.createSequentialGroup()
                .addComponent(motherToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(motherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(wifeLabel)
                    .addComponent(wifeNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(motherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(wifeBirthDateLabel)
                    .addComponent(wifeBirthDateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(motherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(wifeDeathDateLabel)
                    .addComponent(wifeDeathDateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jTabbedPane1.setPreferredSize(new java.awt.Dimension(0, 0));

        javax.swing.GroupLayout childrensPanelLayout = new javax.swing.GroupLayout(childrensPanel);
        childrensPanel.setLayout(childrensPanelLayout);
        childrensPanelLayout.setHorizontalGroup(
            childrensPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(childrensListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 662, Short.MAX_VALUE)
        );
        childrensPanelLayout.setVerticalGroup(
            childrensPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(childrensListPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("FamilyEditorPanel.childrensPanel.TabConstraints.tabTitle"), new Object[] {}), new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/child.png")), childrensPanel); // NOI18N

        eventsListPanel.setPreferredSize(null);

        javax.swing.GroupLayout eventsPanelLayout = new javax.swing.GroupLayout(eventsPanel);
        eventsPanel.setLayout(eventsPanelLayout);
        eventsPanelLayout.setHorizontalGroup(
            eventsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(eventsListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 662, Short.MAX_VALUE)
        );
        eventsPanelLayout.setVerticalGroup(
            eventsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(eventsListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("FamilyEditorPanel.eventsPanel.TabConstraints.tabTitle"), new Object[] {}), new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/event.png")), eventsPanel); // NOI18N

        sourceCitationsListPanel.setPreferredSize(null);

        javax.swing.GroupLayout sourcesPanelLayout = new javax.swing.GroupLayout(sourcesPanel);
        sourcesPanel.setLayout(sourcesPanelLayout);
        sourcesPanelLayout.setHorizontalGroup(
            sourcesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sourceCitationsListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 662, Short.MAX_VALUE)
        );
        sourcesPanelLayout.setVerticalGroup(
            sourcesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sourceCitationsListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Sources", new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/source.png")), sourcesPanel); // NOI18N

        javax.swing.GroupLayout notesPanelLayout = new javax.swing.GroupLayout(notesPanel);
        notesPanel.setLayout(notesPanelLayout);
        notesPanelLayout.setHorizontalGroup(
            notesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(noteCitationsListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 662, Short.MAX_VALUE)
        );
        notesPanelLayout.setVerticalGroup(
            notesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(noteCitationsListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("FamilyEditorPanel.notesPanel.TabConstraints.tabTitle"), new Object[] {}), new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/Note.png")), notesPanel); // NOI18N

        javax.swing.GroupLayout galleryPanelLayout = new javax.swing.GroupLayout(galleryPanel);
        galleryPanel.setLayout(galleryPanelLayout);
        galleryPanelLayout.setHorizontalGroup(
            galleryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(multimediaObjectCitationsListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 662, Short.MAX_VALUE)
        );
        galleryPanelLayout.setVerticalGroup(
            galleryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(multimediaObjectCitationsListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("FamilyEditorPanel.galleryPanel.TabConstraints.tabTitle"), new Object[] {}), new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/Media.png")), galleryPanel); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(fatherPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(motherPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(motherPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fatherPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addHusbandButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addHusbandButtonActionPerformed
        try {
            mFamily.getGedcom().doUnitOfWork(new UnitOfWork() {

                @Override
                public void perform(Gedcom gedcom) throws GedcomException {
                    mEntity = gedcom.createEntity(Gedcom.INDI);
                    ((Indi) mEntity).setSex(PropertySex.MALE);
                }
            }); // end of doUnitOfWork
            IndividualEditorPanel individualEditorPanel = new IndividualEditorPanel();
            individualEditorPanel.set((Indi) mEntity);

            DialogManager.ADialog individualEditorDialog = new DialogManager.ADialog(
                    NbBundle.getMessage(IndividualEditorPanel.class, "IndividualEditorPanel.create.husband.title"),
                    individualEditorPanel);
            individualEditorDialog.setDialogId(IndividualEditorPanel.class.getName());

            if (individualEditorDialog.show() == DialogDescriptor.OK_OPTION) {
                mHusband = individualEditorPanel.commit();
                mFamily.getGedcom().doUnitOfWork(new UnitOfWork() {

                    @Override
                    public void perform(Gedcom gedcom) throws GedcomException {
                        mFamily.setHusband(mHusband);
                    }
                }); // end of doUnitOfWork
                husbandNameTextField.setText(mHusband.getName());
                husbandBirthDateTextField.setText(mHusband.getBirthAsString());
                husbandDeathDateTextField.setText(mHusband.getDeathAsString());
                addHusbandButton.setVisible(false);
                linkToHusbandButton.setVisible(false);
                removeHusbandButton.setVisible(true);
                editHusbandButton.setVisible(true);
            } else {
                mFamily.getGedcom().undoUnitOfWork(false);
            }
        } catch (GedcomException ex) {
            Exceptions.printStackTrace(ex);
        }
    }//GEN-LAST:event_addHusbandButtonActionPerformed

    private void addWifeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addWifeButtonActionPerformed
        try {
            mFamily.getGedcom().doUnitOfWork(new UnitOfWork() {

                @Override
                public void perform(Gedcom gedcom) throws GedcomException {
                    mEntity = gedcom.createEntity(Gedcom.INDI);
                    ((Indi) mEntity).setSex(PropertySex.FEMALE);
                }
            }); // end of doUnitOfWork
            IndividualEditorPanel individualEditorPanel = new IndividualEditorPanel();
            individualEditorPanel.set((Indi) mEntity);

            DialogManager.ADialog individualEditorDialog = new DialogManager.ADialog(
                    NbBundle.getMessage(IndividualEditorPanel.class, "IndividualEditorPanel.create.wife.title"),
                    individualEditorPanel);
            individualEditorDialog.setDialogId(IndividualEditorPanel.class.getName());

            if (individualEditorDialog.show() == DialogDescriptor.OK_OPTION) {
                mWife = individualEditorPanel.commit();
                mFamily.getGedcom().doUnitOfWork(new UnitOfWork() {

                    @Override
                    public void perform(Gedcom gedcom) throws GedcomException {
                        mFamily.setWife(mWife);
                    }
                }); // end of doUnitOfWork
                wifeNameTextField.setText(mWife.getName());
                wifeBirthDateTextField.setText(mWife.getBirthAsString());
                wifeDeathDateTextField.setText(mWife.getDeathAsString());
                addWifeButton.setVisible(false);
                linkToWifeButton.setVisible(false);
                removeWifeButton.setVisible(true);
                editWifeButton.setVisible(true);
            } else {
                mFamily.getGedcom().undoUnitOfWork(false);
            }
        } catch (GedcomException ex) {
            Exceptions.printStackTrace(ex);
        }
    }//GEN-LAST:event_addWifeButtonActionPerformed

    private void linkToHusbandButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linkToHusbandButtonActionPerformed
        IndividualsListPanel individualsListPanel = new IndividualsListPanel();
        List<Indi> individualsList = new ArrayList<Indi>();
        for (Indi individual : mFamily.getGedcom().getIndis()) {
            if (individual.getSex() == PropertySex.MALE || individual.getSex() == PropertySex.UNKNOWN) {
                individualsList.add(individual);
            }
        }

        individualsListPanel.set(mFamily, individualsList);
        individualsListPanel.setToolBarVisible(false);
        DialogManager.ADialog individualsListDialog = new DialogManager.ADialog(
                NbBundle.getMessage(IndividualsListPanel.class, "IndividualsListPanel.title.select.husband"),
                individualsListPanel);
        individualsListDialog.setDialogId(IndividualsListPanel.class.getName());

        if (individualsListDialog.show() == DialogDescriptor.OK_OPTION) {
            mHusband = individualsListPanel.getSelectedIndividual();
            try {
                mFamily.getGedcom().doUnitOfWork(new UnitOfWork() {

                    @Override
                    public void perform(Gedcom gedcom) throws GedcomException {
                        mFamily.setHusband(mHusband);
                    }
                }); // end of doUnitOfWork
                husbandNameTextField.setText(mHusband.getName());
                husbandBirthDateTextField.setText(mHusband.getBirthAsString());
                husbandDeathDateTextField.setText(mHusband.getDeathAsString());
                addHusbandButton.setVisible(false);
                linkToHusbandButton.setVisible(false);
                removeHusbandButton.setVisible(true);
                editHusbandButton.setVisible(true);
            } catch (GedcomException ex) {
                Exceptions.printStackTrace(ex);
            }
        }
    }//GEN-LAST:event_linkToHusbandButtonActionPerformed

    private void linkToWifeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linkToWifeButtonActionPerformed
        IndividualsListPanel individualsListPanel = new IndividualsListPanel();
        List<Indi> individualsList = new ArrayList<Indi>();

        for (Indi individual : mFamily.getGedcom().getIndis()) {
            if (individual.getSex() == PropertySex.FEMALE || individual.getSex() == PropertySex.UNKNOWN) {
                individualsList.add(individual);
            }
        }
        individualsListPanel.set(mFamily, individualsList);
        individualsListPanel.setToolBarVisible(false);

        DialogManager.ADialog individualsListDialog = new DialogManager.ADialog(
                NbBundle.getMessage(IndividualsListPanel.class, "IndividualsListPanel.title.select.wife"),
                individualsListPanel);
        individualsListDialog.setDialogId(IndividualsListPanel.class.getName());

        if (individualsListDialog.show() == DialogDescriptor.OK_OPTION) {
            mWife = individualsListPanel.getSelectedIndividual();
            try {
                mFamily.getGedcom().doUnitOfWork(new UnitOfWork() {

                    @Override
                    public void perform(Gedcom gedcom) throws GedcomException {
                        mFamily.setWife(mWife);
                    }
                }); // end of doUnitOfWork
                wifeNameTextField.setText(mWife.getName());
                wifeBirthDateTextField.setText(mWife.getBirthAsString());
                wifeDeathDateTextField.setText(mWife.getDeathAsString());
                addWifeButton.setVisible(false);
                linkToWifeButton.setVisible(false);
                removeWifeButton.setVisible(true);
                editWifeButton.setVisible(true);
            } catch (GedcomException ex) {
                Exceptions.printStackTrace(ex);
            }
        }
    }//GEN-LAST:event_linkToWifeButtonActionPerformed

    private void editHusbandButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editHusbandButtonActionPerformed
        Indi individual = mFamily.getHusband();
        Gedcom gedcom = mFamily.getGedcom();
        int undoNb = gedcom.getUndoNb();
        IndividualEditorPanel individualEditorPanel = new IndividualEditorPanel();
        individualEditorPanel.set(individual);

        DialogManager.ADialog individualEditorDialog = new DialogManager.ADialog(
                NbBundle.getMessage(IndividualEditorPanel.class, "IndividualEditorPanel.edit.title", individual),
                individualEditorPanel);
        individualEditorDialog.setDialogId(IndividualEditorPanel.class.getName());

        if (individualEditorDialog.show() == DialogDescriptor.OK_OPTION) {
            individualEditorPanel.commit();
        } else {
            while (gedcom.getUndoNb() > undoNb && gedcom.canUndo()) {
                gedcom.undoUnitOfWork(false);
            }
        }
    }//GEN-LAST:event_editHusbandButtonActionPerformed

    private void editWifeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editWifeButtonActionPerformed
        Indi individual = mFamily.getWife();
        Gedcom gedcom = mFamily.getGedcom();
        int undoNb = gedcom.getUndoNb();
        IndividualEditorPanel individualEditorPanel = new IndividualEditorPanel();
        individualEditorPanel.set(individual);

        DialogManager.ADialog individualEditorDialog = new DialogManager.ADialog(
                NbBundle.getMessage(IndividualEditorPanel.class, "IndividualEditorPanel.edit.title", individual),
                individualEditorPanel);
        individualEditorDialog.setDialogId(IndividualEditorPanel.class.getName());

        if (individualEditorDialog.show() == DialogDescriptor.OK_OPTION) {
            individualEditorPanel.commit();
        } else {
            while (gedcom.getUndoNb() > undoNb && gedcom.canUndo()) {
                gedcom.undoUnitOfWork(false);
            }
        }
    }//GEN-LAST:event_editWifeButtonActionPerformed

    private void removeHusbandButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeHusbandButtonActionPerformed
        DialogManager createYesNo = DialogManager.createYesNo(
                NbBundle.getMessage(
                        EventEditorPanel.class, "FamilyEditorPanel.deleteHusbandConfirmation.title"),
                NbBundle.getMessage(
                        EventEditorPanel.class, "FamilyEditorPanel.deleteHusbandConfirmation.text",
                        mFamily.getHusband(),
                        mFamily));
        if (createYesNo.show() == DialogManager.YES_OPTION) {
            try {
                mFamily.getGedcom().doUnitOfWork(new UnitOfWork() {

                    @Override
                    public void perform(Gedcom gedcom) throws GedcomException {
                        mFamily.setHusband(null);
                    }
                }); // end of doUnitOfWork

                addHusbandButton.setVisible(true);
                linkToHusbandButton.setVisible(true);
                removeHusbandButton.setVisible(false);
                editHusbandButton.setVisible(false);
            } catch (GedcomException ex) {
                Exceptions.printStackTrace(ex);
            }
        }
    }//GEN-LAST:event_removeHusbandButtonActionPerformed

    private void removeWifeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeWifeButtonActionPerformed
        DialogManager createYesNo = DialogManager.createYesNo(
                NbBundle.getMessage(
                        EventEditorPanel.class, "FamilyEditorPanel.deleteWifeConfirmation.title"),
                NbBundle.getMessage(
                        EventEditorPanel.class, "FamilyEditorPanel.deleteWifeConfirmation.text",
                        mFamily.getHusband(),
                        mFamily));
        if (createYesNo.show() == DialogManager.YES_OPTION) {
            try {
                mFamily.getGedcom().doUnitOfWork(new UnitOfWork() {

                    @Override
                    public void perform(Gedcom gedcom) throws GedcomException {
                        mFamily.setWife(null);
                    }
                }); // end of doUnitOfWork

                addWifeButton.setVisible(true);
                linkToWifeButton.setVisible(true);
                removeWifeButton.setVisible(false);
                editWifeButton.setVisible(false);
            } catch (GedcomException ex) {
                Exceptions.printStackTrace(ex);
            }
        }
    }//GEN-LAST:event_removeWifeButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel HusbandNameLabel;
    private javax.swing.JButton addHusbandButton;
    private javax.swing.JButton addWifeButton;
    private ancestris.modules.editors.genealogyeditor.panels.ChildrenListPanel childrensListPanel;
    private javax.swing.JPanel childrensPanel;
    private javax.swing.JButton editHusbandButton;
    private javax.swing.JButton editWifeButton;
    private ancestris.modules.editors.genealogyeditor.panels.EventsListPanel eventsListPanel;
    private javax.swing.JPanel eventsPanel;
    private javax.swing.JLabel familyIDLabel;
    private javax.swing.JTextField familyIDTextField;
    private javax.swing.JPanel fatherPanel;
    private javax.swing.JToolBar fatherToolBar;
    private javax.swing.JPanel galleryPanel;
    private javax.swing.JLabel husbandBirthDateLabel;
    private javax.swing.JTextField husbandBirthDateTextField;
    private javax.swing.JLabel husbandDeathDateLabel;
    private javax.swing.JTextField husbandDeathDateTextField;
    private javax.swing.JTextField husbandNameTextField;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JButton linkToHusbandButton;
    private javax.swing.JButton linkToWifeButton;
    private javax.swing.JPanel motherPanel;
    private javax.swing.JToolBar motherToolBar;
    private ancestris.modules.editors.genealogyeditor.panels.MultimediaObjectCitationsListPanel multimediaObjectCitationsListPanel;
    private ancestris.modules.editors.genealogyeditor.panels.NoteCitationsListPanel noteCitationsListPanel;
    private javax.swing.JPanel notesPanel;
    private javax.swing.JToggleButton privateRecordToggleButton;
    private javax.swing.JButton removeHusbandButton;
    private javax.swing.JButton removeWifeButton;
    private ancestris.modules.editors.genealogyeditor.panels.SourceCitationsListPanel sourceCitationsListPanel;
    private javax.swing.JPanel sourcesPanel;
    private javax.swing.JLabel wifeBirthDateLabel;
    private javax.swing.JTextField wifeBirthDateTextField;
    private javax.swing.JLabel wifeDeathDateLabel;
    private javax.swing.JTextField wifeDeathDateTextField;
    private javax.swing.JLabel wifeLabel;
    private javax.swing.JTextField wifeNameTextField;
    // End of variables declaration//GEN-END:variables

    /**
     * @param family the family to set
     */
    public void set(Fam family) {
        this.mFamily = family;

        if (!mFamily.getGedcom().getGrammar().getVersion().equals("5.5.1")) {
            privateRecordToggleButton.setVisible(false);
        }

        /*
         * n @<XREF:FAM>@ FAM
         */
        familyIDTextField.setText(mFamily.getId());

        /*
         * +1 RESN <RESTRICTION_NOTICE>
         */
        Property restrictionNotice = mFamily.getProperty("RESN", true);
        if (restrictionNotice != null) {
            privateRecordToggleButton.setSelected(true);
        }

        /*
         * +1 <<FAMILY_EVENT_STRUCTURE>>
         */
        ArrayList<Property> eventsList = new ArrayList<Property>();
        for (Property property : mFamily.getProperties()) {
            if (mFamilyEventsTags.contains(property.getTag())) {
                eventsList.add(property);
            }
        }
        eventsListPanel.set(mFamily, eventsList);

        /*
         * +1 HUSB @<XREF:INDI>@
         */
        mHusband = mFamily.getHusband();
        if (mHusband != null) {
            husbandNameTextField.setText(mHusband.getName());
            husbandBirthDateTextField.setText(mHusband.getBirthAsString());
            husbandDeathDateTextField.setText(mHusband.getDeathAsString());
            addHusbandButton.setVisible(false);
            linkToHusbandButton.setVisible(false);
            removeHusbandButton.setVisible(true);
            editHusbandButton.setVisible(true);
        } else {
            addHusbandButton.setVisible(true);
            linkToHusbandButton.setVisible(true);
            removeHusbandButton.setVisible(false);
            editHusbandButton.setVisible(false);
        }

        /*
         * +1 WIFE @<XREF:INDI>@
         */
        mWife = mFamily.getWife();
        if (mWife != null) {
            wifeNameTextField.setText(mWife.getName());
            wifeBirthDateTextField.setText(mWife.getBirthAsString());
            wifeDeathDateTextField.setText(mWife.getDeathAsString());
            addWifeButton.setVisible(false);
            linkToWifeButton.setVisible(false);
            removeWifeButton.setVisible(true);
            editWifeButton.setVisible(true);
        } else {
            addWifeButton.setVisible(true);
            linkToWifeButton.setVisible(true);
            removeWifeButton.setVisible(false);
            editWifeButton.setVisible(false);
        }

        /*
         * +1 CHIL @<XREF:INDI>@
         */
        childrensListPanel.set(mFamily, mFamily.getProperties(PropertyChild.class));

        /*
         * +1 NCHI <COUNT_OF_CHILDREN>
         * not used
         *
         * +1 SUBM @<XREF:SUBM>@
         * not used
         *
         * +1 <<LDS_SPOUSE_SEALING>>
         * not used
         *
         * +1 REFN <USER_REFERENCE_NUMBER>
         * not used
         *
         * +2 TYPE <USER_REFERENCE_TYPE>
         * not used
         *
         * +1 RIN <AUTOMATED_RECORD_ID>
         * not used
         *
         * +1 <<CHANGE_DATE>>
         * Handle by gedcom doUnitOfWork
         */

        /*
         * +1 <<SOURCE_CITATION>>
         */
        sourceCitationsListPanel.set(mFamily, Arrays.asList(mFamily.getProperties("SOUR")));

        /*
         * +1 <<NOTE_STRUCTURE>>
         */
        noteCitationsListPanel.set(mFamily, Arrays.asList(mFamily.getProperties("NOTE")));

        /*
         * +1 <<MULTIMEDIA_LINK>>
         */
        multimediaObjectCitationsListPanel.set(mFamily, Arrays.asList(mFamily.getProperties("OBJE")));
    }

    public Fam commit() {
        try {
            mFamily.getGedcom().doUnitOfWork(new UnitOfWork() {

                @Override
                public void perform(Gedcom gedcom) throws GedcomException {
                    Property restrictionNotice = mFamily.getProperty("RESN", true);
                    if (privateRecordToggleButton.isSelected()) {
                        if (restrictionNotice == null) {
                            mFamily.addProperty("RESN", "confidential");
                        }
                    } else {
                        if (restrictionNotice != null) {
                            mFamily.delProperty(restrictionNotice);
                        }
                    }
                }
            }); // end of doUnitOfWork

            return mFamily;
        } catch (GedcomException ex) {
            Exceptions.printStackTrace(ex);
            return null;
        }
    }
}
