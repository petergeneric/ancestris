package ancestris.modules.editors.genealogyeditor.panels;

import ancestris.modules.editors.genealogyeditor.models.ConfidenceLevelComboBoxModel;
import ancestris.modules.editors.genealogyeditor.models.EventsRoleComboBoxModel;
import ancestris.modules.gedcom.utilities.PropertyTag2Name;
import ancestris.util.swing.DialogManager.ADialog;
import genj.gedcom.*;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.openide.DialogDescriptor;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle;

/**
 *
 * @author dominique
 *
 * SOURCE_CITATION:=
 * [ pointer to source record (preferred)
 * n SOUR @<XREF:SOUR>@
 * +1 PAGE <WHERE_WITHIN_SOURCE>
 * +1 EVEN <EVENT_TYPE_CITED_FROM>
 * +2 ROLE <ROLE_IN_EVENT>
 * +1 DATA
 * +2 DATE <ENTRY_RECORDING_DATE>
 * +2 TEXT <TEXT_FROM_SOURCE>
 * +3 [CONC|CONT] <TEXT_FROM_SOURCE>
 * +1 <<MULTIMEDIA_LINK>>
 * +1 <<NOTE_STRUCTURE>>
 * +1 QUAY <CERTAINTY_ASSESSMENT>
 * | Systems not using source records
 * n SOUR <SOURCE_DESCRIPTION>
 * +1 [CONC|CONT] <SOURCE_DESCRIPTION>
 * +1 TEXT <TEXT_FROM_SOURCE>
 * +2 [CONC|CONT] <TEXT_FROM_SOURCE>
 * +1 <<MULTIMEDIA_LINK>>
 * +1 <<NOTE_STRUCTURE>>
 * +1 QUAY <CERTAINTY_ASSESSMENT>
 * ]
 */
public class SourceCitationEditorPanel extends javax.swing.JPanel {

    private Property mRoot;
    private Source mReferencedSource = null;
    private Property mSourceCitation = null;
    private boolean mEventTypeModified = false;
    private boolean mEventRoleModified = false;
    private boolean mDataQualityModified = false;
    private boolean mSourceTextModified = false;
    private boolean mSourceReferencedTitleModified = false;
    private boolean mPageModified = false;
    private String[] mEventsType = {
        "",
        // Individual Events
        PropertyTag2Name.getTagName("ADOP"),
        PropertyTag2Name.getTagName("BIRT"),
        PropertyTag2Name.getTagName("BAPM"),
        PropertyTag2Name.getTagName("BARM"),
        PropertyTag2Name.getTagName("BASM"),
        PropertyTag2Name.getTagName("BLES"),
        PropertyTag2Name.getTagName("BURI"),
        PropertyTag2Name.getTagName("CENS"),
        PropertyTag2Name.getTagName("CHR"),
        PropertyTag2Name.getTagName("CHRA"),
        PropertyTag2Name.getTagName("CONF"),
        PropertyTag2Name.getTagName("CREM"),
        PropertyTag2Name.getTagName("DEAT"),
        PropertyTag2Name.getTagName("EMIG"),
        PropertyTag2Name.getTagName("FCOM"),
        PropertyTag2Name.getTagName("GRAD"),
        PropertyTag2Name.getTagName("IMMI"),
        PropertyTag2Name.getTagName("NATU"),
        PropertyTag2Name.getTagName("ORDN"),
        PropertyTag2Name.getTagName("RETI"),
        PropertyTag2Name.getTagName("PROB"),
        PropertyTag2Name.getTagName("WILL"),
        PropertyTag2Name.getTagName("EVEN"),
        // Family Events
        PropertyTag2Name.getTagName("ANUL"),
        PropertyTag2Name.getTagName("CENS"),
        PropertyTag2Name.getTagName("DIV"),
        PropertyTag2Name.getTagName("DIVF"),
        PropertyTag2Name.getTagName("ENGA"),
        PropertyTag2Name.getTagName("MARR"),
        PropertyTag2Name.getTagName("MARB"),
        PropertyTag2Name.getTagName("MARC"),
        PropertyTag2Name.getTagName("MARL"),
        PropertyTag2Name.getTagName("MARS"),
        PropertyTag2Name.getTagName("EVEN")
    };

    /**
     * Creates new form SourceCitationEditorPanel
     */
    public SourceCitationEditorPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SourceReferencePanel = new javax.swing.JPanel();
        editSourceButton = new javax.swing.JButton();
        deleteSourceButton = new javax.swing.JButton();
        linkToSourceButton = new javax.swing.JButton();
        addSourceButton = new javax.swing.JButton();
        SourceReferencedTitleTextField = new javax.swing.JTextField();
        ReferencedEventTypeLabel = new javax.swing.JLabel();
        ReferencedEventTypeComboBox = new javax.swing.JComboBox<String>(mEventsType);
        eventRoleLabel = new javax.swing.JLabel();
        eventRoleComboBox = new javax.swing.JComboBox<String>();
        sourceCitationTabbedPane = new javax.swing.JTabbedPane();
        SourceDataPanel = new javax.swing.JPanel();
        sourceDataScrollPane = new javax.swing.JScrollPane();
        sourceDataTextArea = new javax.swing.JTextArea();
        notesPanel = new javax.swing.JPanel();
        noteCitationsListPanel = new ancestris.modules.editors.genealogyeditor.panels.NoteCitationsListPanel();
        multiMediaPanel = new javax.swing.JPanel();
        multimediaObjectCitationsListPanel = new ancestris.modules.editors.genealogyeditor.panels.MultimediaObjectCitationsListPanel();
        jLabel5 = new javax.swing.JLabel();
        dataQualityComboBox = new javax.swing.JComboBox<String>();
        recordingDateLabel = new javax.swing.JLabel();
        recordingDate = new ancestris.modules.beans.ADateBean();
        pageLabel = new javax.swing.JLabel();
        pageTextField = new javax.swing.JTextField();

        editSourceButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/edit.png"))); // NOI18N
        editSourceButton.setToolTipText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("SourceCitationEditorPanel.editSourceButton.toolTipText"), new Object[] {})); // NOI18N
        editSourceButton.setFocusable(false);
        editSourceButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        editSourceButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        editSourceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editSourceButtonActionPerformed(evt);
            }
        });

        deleteSourceButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/edit_delete.png"))); // NOI18N
        deleteSourceButton.setToolTipText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("SourceCitationEditorPanel.deleteSourceButton.toolTipText"), new Object[] {})); // NOI18N
        deleteSourceButton.setFocusable(false);
        deleteSourceButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        deleteSourceButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        deleteSourceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteSourceButtonActionPerformed(evt);
            }
        });

        linkToSourceButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/link_add.png"))); // NOI18N
        linkToSourceButton.setToolTipText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("SourceCitationEditorPanel.linkToSourceButton.toolTipText"), new Object[] {})); // NOI18N
        linkToSourceButton.setFocusable(false);
        linkToSourceButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        linkToSourceButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        linkToSourceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linkToSourceButtonActionPerformed(evt);
            }
        });

        addSourceButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/edit_add.png"))); // NOI18N
        addSourceButton.setToolTipText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("SourceCitationEditorPanel.addSourceButton.toolTipText"), new Object[] {})); // NOI18N
        addSourceButton.setFocusable(false);
        addSourceButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addSourceButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        addSourceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSourceButtonActionPerformed(evt);
            }
        });

        SourceReferencedTitleTextField.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void changedUpdate(DocumentEvent e) {
                mSourceReferencedTitleModified = true;
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                mSourceReferencedTitleModified = true;
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                mSourceReferencedTitleModified = true;
            }
        });

        javax.swing.GroupLayout SourceReferencePanelLayout = new javax.swing.GroupLayout(SourceReferencePanel);
        SourceReferencePanel.setLayout(SourceReferencePanelLayout);
        SourceReferencePanelLayout.setHorizontalGroup(
            SourceReferencePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SourceReferencePanelLayout.createSequentialGroup()
                .addComponent(linkToSourceButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editSourceButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addSourceButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteSourceButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SourceReferencedTitleTextField))
        );
        SourceReferencePanelLayout.setVerticalGroup(
            SourceReferencePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SourceReferencePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                .addComponent(linkToSourceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(deleteSourceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(SourceReferencedTitleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(editSourceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(addSourceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        ReferencedEventTypeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        ReferencedEventTypeLabel.setText(org.openide.util.NbBundle.getMessage(SourceCitationEditorPanel.class, "SourceCitationEditorPanel.ReferencedEventTypeLabel.text")); // NOI18N

        ReferencedEventTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReferencedEventTypeComboBoxActionPerformed(evt);
            }
        });

        eventRoleLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        eventRoleLabel.setText(org.openide.util.NbBundle.getMessage(SourceCitationEditorPanel.class, "SourceCitationEditorPanel.eventRoleLabel.text")); // NOI18N

        eventRoleComboBox.setModel(new EventsRoleComboBoxModel());
        eventRoleComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eventRoleComboBoxActionPerformed(evt);
            }
        });

        sourceDataTextArea.setColumns(20);
        sourceDataTextArea.setRows(5);
        sourceDataTextArea.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void changedUpdate(DocumentEvent e) {
                mSourceTextModified = true;
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                mSourceTextModified = true;
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                mSourceTextModified = true;
            }
        });
        sourceDataScrollPane.setViewportView(sourceDataTextArea);

        javax.swing.GroupLayout SourceDataPanelLayout = new javax.swing.GroupLayout(SourceDataPanel);
        SourceDataPanel.setLayout(SourceDataPanelLayout);
        SourceDataPanelLayout.setHorizontalGroup(
            SourceDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sourceDataScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 656, Short.MAX_VALUE)
        );
        SourceDataPanelLayout.setVerticalGroup(
            SourceDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sourceDataScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
        );

        sourceCitationTabbedPane.addTab(org.openide.util.NbBundle.getMessage(SourceCitationEditorPanel.class, "SourceCitationEditorPanel.SourceDataPanel.TabConstraints.tabTitle"), new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/source.png")), SourceDataPanel); // NOI18N

        javax.swing.GroupLayout notesPanelLayout = new javax.swing.GroupLayout(notesPanel);
        notesPanel.setLayout(notesPanelLayout);
        notesPanelLayout.setHorizontalGroup(
            notesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(noteCitationsListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 656, Short.MAX_VALUE)
        );
        notesPanelLayout.setVerticalGroup(
            notesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(noteCitationsListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
        );

        sourceCitationTabbedPane.addTab(org.openide.util.NbBundle.getMessage(SourceCitationEditorPanel.class, "SourceCitationEditorPanel.notesPanel.TabConstraints.tabTitle"), new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/Note.png")), notesPanel); // NOI18N

        javax.swing.GroupLayout multiMediaPanelLayout = new javax.swing.GroupLayout(multiMediaPanel);
        multiMediaPanel.setLayout(multiMediaPanelLayout);
        multiMediaPanelLayout.setHorizontalGroup(
            multiMediaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(multimediaObjectCitationsListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 656, Short.MAX_VALUE)
        );
        multiMediaPanelLayout.setVerticalGroup(
            multiMediaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(multimediaObjectCitationsListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
        );

        sourceCitationTabbedPane.addTab(org.openide.util.NbBundle.getMessage(SourceCitationEditorPanel.class, "SourceCitationEditorPanel.multiMediaPanel.TabConstraints.tabTitle"), new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/Media.png")), multiMediaPanel); // NOI18N

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText(org.openide.util.NbBundle.getMessage(SourceCitationEditorPanel.class, "SourceCitationEditorPanel.jLabel5.text")); // NOI18N

        dataQualityComboBox.setEditable(true);
        dataQualityComboBox.setModel(new ConfidenceLevelComboBoxModel ());
        dataQualityComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dataQualityComboBoxActionPerformed(evt);
            }
        });

        recordingDateLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        recordingDateLabel.setText(org.openide.util.NbBundle.getMessage(SourceCitationEditorPanel.class, "SourceCitationEditorPanel.recordingDateLabel.text")); // NOI18N

        pageLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        pageLabel.setText(org.openide.util.NbBundle.getMessage(SourceCitationEditorPanel.class, "SourceCitationEditorPanel.pageLabel.text")); // NOI18N

        pageTextField.setColumns(4);
        pageTextField.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void changedUpdate(DocumentEvent e) {
                mPageModified = true;
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                mPageModified = true;
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                mPageModified = true;
            }
        });
        pageTextField.setToolTipText(org.openide.util.NbBundle.getMessage(SourceCitationEditorPanel.class, "SourceCitationEditorPanel.pageTextField.toolTipText")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sourceCitationTabbedPane)
                    .addComponent(SourceReferencePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                            .addComponent(ReferencedEventTypeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(eventRoleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dataQualityComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(eventRoleComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ReferencedEventTypeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(recordingDateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                            .addComponent(pageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(recordingDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pageTextField))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(SourceReferencePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(ReferencedEventTypeLabel)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(pageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(pageLabel)
                        .addComponent(ReferencedEventTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(eventRoleLabel)
                            .addComponent(eventRoleComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(recordingDateLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(dataQualityComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(recordingDate, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sourceCitationTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addSourceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSourceButtonActionPerformed
        Gedcom gedcom = mRoot.getGedcom();
        int undoNb = gedcom.getUndoNb();

        try {
            gedcom.doUnitOfWork(new UnitOfWork() {

                @Override
                public void perform(Gedcom gedcom) throws GedcomException {
                    mReferencedSource = (Source) gedcom.createEntity(Gedcom.SOUR);
                }
            }); // end of doUnitOfWork

            SourceEditorPanel sourceEditorPanel = new SourceEditorPanel();
            sourceEditorPanel.setSource(mReferencedSource);

            ADialog sourceEditorDialog = new ADialog(
                    NbBundle.getMessage(SourceEditorPanel.class, "SourceEditorPanel.create.title"),
                    sourceEditorPanel);
            sourceEditorDialog.setDialogId(SourceEditorPanel.class.getName());

            if (sourceEditorDialog.show() == DialogDescriptor.OK_OPTION) {
                mReferencedSource = sourceEditorPanel.commit();
                mSourceCitation.setValue('@' + mReferencedSource.getId() + '@');
                ((PropertySource) mSourceCitation).link();
                SourceReferencedTitleTextField.setText(mReferencedSource.getTitle());
                addSourceButton.setVisible(false);
                deleteSourceButton.setVisible(true);
                editSourceButton.setVisible(true);
            } else {
                mReferencedSource = null;
                while (gedcom.getUndoNb() > undoNb && gedcom.canUndo()) {
                    gedcom.undoUnitOfWork(false);
                }
            }
        } catch (GedcomException ex) {
            Exceptions.printStackTrace(ex);
        }
    }//GEN-LAST:event_addSourceButtonActionPerformed

    private void editSourceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editSourceButtonActionPerformed
        if (mReferencedSource != null) {
            Gedcom gedcom = mRoot.getGedcom();
            int undoNb = gedcom.getUndoNb();
            SourceEditorPanel sourceEditorPanel = new SourceEditorPanel();
            sourceEditorPanel.setSource(mReferencedSource);
            ADialog sourceEditorDialog = new ADialog(
                    NbBundle.getMessage(SourceEditorPanel.class, "SourceEditorPanel.edit.title"),
                    sourceEditorPanel);
            sourceEditorDialog.setDialogId(SourceEditorPanel.class.getName());

            if (sourceEditorDialog.show() == DialogDescriptor.OK_OPTION) {
                sourceEditorPanel.commit();
            } else {
                while (gedcom.getUndoNb() > undoNb && gedcom.canUndo()) {
                    gedcom.undoUnitOfWork(false);
                }
            }
        }
    }//GEN-LAST:event_editSourceButtonActionPerformed

    private void deleteSourceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteSourceButtonActionPerformed
        Gedcom gedcom = mRoot.getGedcom();

        if (mReferencedSource != null) {
            try {
                gedcom.doUnitOfWork(new UnitOfWork() {

                    @Override
                    public void perform(Gedcom gedcom) throws GedcomException {
                        mSourceCitation.delProperty(mReferencedSource);
                    }
                }); // end of doUnitOfWork
            } catch (GedcomException ex) {
                Exceptions.printStackTrace(ex);
            }
            mReferencedSource = null;
        }
    }//GEN-LAST:event_deleteSourceButtonActionPerformed

    private void linkToSourceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linkToSourceButtonActionPerformed

        SourcesListPanel sourcesListPanel = new SourcesListPanel(mRoot.getGedcom());
        sourcesListPanel.setToolBarVisible(false);

        ADialog sourcesListDialog = new ADialog(NbBundle.getMessage(PlacesListPanel.class,
                "SourcesListPanel.linkTo.title"), sourcesListPanel);
        sourcesListDialog.setDialogId(SourcesListPanel.class.getName());

        if (sourcesListDialog.show() == DialogDescriptor.OK_OPTION) {
            if (mReferencedSource != null) {
                ((PropertySource) mSourceCitation).unlink();
            }
            mReferencedSource = sourcesListPanel.getSelectedSource();
            SourceReferencedTitleTextField.setText(mReferencedSource.getTitle());
            mSourceCitation.setValue('@' + mReferencedSource.getId() + '@');
            try {
                ((PropertySource) mSourceCitation).link();
            } catch (GedcomException ex) {
                Exceptions.printStackTrace(ex);
            }

            addSourceButton.setVisible(false);
            deleteSourceButton.setVisible(true);
            editSourceButton.setVisible(true);
        }
    }//GEN-LAST:event_linkToSourceButtonActionPerformed

    private void ReferencedEventTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReferencedEventTypeComboBoxActionPerformed
        mEventTypeModified = true;
    }//GEN-LAST:event_ReferencedEventTypeComboBoxActionPerformed

    private void eventRoleComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eventRoleComboBoxActionPerformed
        mEventRoleModified = true;
    }//GEN-LAST:event_eventRoleComboBoxActionPerformed

    private void dataQualityComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dataQualityComboBoxActionPerformed
        mDataQualityModified = true;
    }//GEN-LAST:event_dataQualityComboBoxActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ReferencedEventTypeComboBox;
    private javax.swing.JLabel ReferencedEventTypeLabel;
    private javax.swing.JPanel SourceDataPanel;
    private javax.swing.JPanel SourceReferencePanel;
    private javax.swing.JTextField SourceReferencedTitleTextField;
    private javax.swing.JButton addSourceButton;
    private javax.swing.JComboBox<String> dataQualityComboBox;
    private javax.swing.JButton deleteSourceButton;
    private javax.swing.JButton editSourceButton;
    private javax.swing.JComboBox<String> eventRoleComboBox;
    private javax.swing.JLabel eventRoleLabel;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JButton linkToSourceButton;
    private javax.swing.JPanel multiMediaPanel;
    private ancestris.modules.editors.genealogyeditor.panels.MultimediaObjectCitationsListPanel multimediaObjectCitationsListPanel;
    private ancestris.modules.editors.genealogyeditor.panels.NoteCitationsListPanel noteCitationsListPanel;
    private javax.swing.JPanel notesPanel;
    private javax.swing.JLabel pageLabel;
    private javax.swing.JTextField pageTextField;
    private ancestris.modules.beans.ADateBean recordingDate;
    private javax.swing.JLabel recordingDateLabel;
    private javax.swing.JTabbedPane sourceCitationTabbedPane;
    private javax.swing.JScrollPane sourceDataScrollPane;
    private javax.swing.JTextArea sourceDataTextArea;
    // End of variables declaration//GEN-END:variables
    // SOURCE_CITATION:=
    // [ pointer to source record (preferred)
    // n SOUR @<XREF:SOUR>@ {1:1} (pointer to source record)
    // +1 PAGE <WHERE_WITHIN_SOURCE> {0:1}
    // +1 EVEN <EVENT_TYPE_CITED_FROM> {0:1}
    // +2 ROLE <ROLE_IN_EVENT> {0:1}
    // +1 DATA {0:1}
    // +2 DATE <ENTRY_RECORDING_DATE> {0:1}
    // +2 TEXT <TEXT_FROM_SOURCE> {0:M}
    // +3 [ CONC | CONT ] <TEXT_FROM_SOURCE> {0:M}
    // +1 QUAY <CERTAINTY_ASSESSMENT> {0:1}
    // +1 <<MULTIMEDIA_LINK>> {0:M}
    // +1 <<NOTE_STRUCTURE>> {0:M}
    // | Systems not using source records
    // n SOUR <SOURCE_DESCRIPTION>
    // +1 [CONC|CONT] <SOURCE_DESCRIPTION>
    // +1 TEXT <TEXT_FROM_SOURCE>
    // +2 [CONC|CONT] <TEXT_FROM_SOURCE>
    // +1 QUAY <CERTAINTY_ASSESSMENT>ecords
    // +1 <<MULTIMEDIA_LINK>>
    // +1 <<NOTE_STRUCTURE>>
    //]

    void setSource(Property root, final Property sourceCitation) {

        mRoot = root;
        mSourceCitation = sourceCitation;
        if (sourceCitation instanceof PropertySource) {
            mReferencedSource = (Source) ((PropertySource) sourceCitation).getTargetEntity();
            if (mReferencedSource != null) {
                addSourceButton.setVisible(false);

                SourceReferencedTitleTextField.setText(mReferencedSource.getTitle());
                mSourceReferencedTitleModified = false;
            } else {
                deleteSourceButton.setVisible(false);
                editSourceButton.setVisible(false);
            }

            Property page = sourceCitation.getProperty("PAGE");
            if (page != null) {
                pageTextField.setText(page.getValue());
            }

            Property eventType = sourceCitation.getProperty("EVEN");
            if (eventType != null) {
                ReferencedEventTypeComboBox.setSelectedItem(PropertyTag2Name.getTagName(eventType.getValue()));
            } else {
                ReferencedEventTypeComboBox.setSelectedIndex(0);
            }
            mEventTypeModified = false;

            Property eventRole = sourceCitation.getProperty("ROLE");
            if (eventRole != null) {
                eventRoleComboBox.setSelectedItem(PropertyTag2Name.getTagName(eventRole.getValue()));
            } else {
                eventRoleComboBox.setSelectedIndex(0);
            }
            mEventRoleModified = false;

            final Property sourceData = sourceCitation.getProperty("DATA");
            if (sourceData != null) {
                PropertyDate date = (PropertyDate) sourceData.getProperty("DATE");
                if (date == null) {
                    try {
                        mRoot.getGedcom().doUnitOfWork(new UnitOfWork() {

                            @Override
                            public void perform(Gedcom gedcom) throws GedcomException {
                                recordingDate.setContext((PropertyDate) sourceData.addProperty("DATE", ""));
                            }
                        }); // end of doUnitOfWork
                    } catch (GedcomException ex) {
                        Exceptions.printStackTrace(ex);
                    }
                } else {
                    recordingDate.setContext(date);
                }

                Property sourceText = sourceData.getProperty("TEXT");
                if (sourceText != null) {
                    sourceDataTextArea.setText(sourceText.getValue());
                    mSourceTextModified = false;
                }
            } else {
                try {
                    mRoot.getGedcom().doUnitOfWork(new UnitOfWork() {

                        @Override
                        public void perform(Gedcom gedcom) throws GedcomException {
                            Property sourceData = sourceCitation.addProperty("DATA", "");
                            recordingDate.setContext((PropertyDate) sourceData.addProperty("DATE", ""));
                        }
                    }); // end of doUnitOfWork
                } catch (GedcomException ex) {
                    Exceptions.printStackTrace(ex);
                }
            }
        } else {
            addSourceButton.setVisible(false);
            deleteSourceButton.setVisible(false);
            editSourceButton.setVisible(false);
            linkToSourceButton.setVisible(false);

            pageLabel.setVisible(false);
            pageTextField.setVisible(false);

            ReferencedEventTypeLabel.setVisible(false);
            ReferencedEventTypeComboBox.setVisible(false);

            eventRoleLabel.setVisible(false);
            eventRoleComboBox.setVisible(false);

            recordingDateLabel.setVisible(false);
            recordingDate.setVisible(false);

            SourceReferencedTitleTextField.setText(sourceCitation.getValue());
            mSourceReferencedTitleModified = false;

            Property sourceText = sourceCitation.getProperty("TEXT");
            if (sourceText != null) {
                sourceDataTextArea.setText(sourceText.getValue());
                mSourceTextModified = false;
            }
        }

        Property dataQuality = sourceCitation.getProperty("QUAY");
        if (dataQuality != null) {
            dataQualityComboBox.setSelectedItem(dataQuality.getValue());
        } else {
            dataQualityComboBox.setSelectedIndex(0);
        }
        mDataQualityModified = false;

        ArrayList<Property> notes = new <Property> ArrayList();
        if (mSourceCitation instanceof PropertySource) {
            Source targetEntity = (Source) ((PropertySource) mSourceCitation).getTargetEntity();
            if (targetEntity != null) {
                notes.addAll(Arrays.asList(targetEntity.getProperties("NOTE")));
            }
        }
        noteCitationsListPanel.setNotesList(mSourceCitation, notes);

        ArrayList<Property> multimediaObjects = new ArrayList(Arrays.asList(mSourceCitation.getProperties("OBJE")));
        if (mSourceCitation instanceof PropertySource) {
            Source targetEntity = (Source) ((PropertySource) mSourceCitation).getTargetEntity();
            if (targetEntity != null) {
                multimediaObjects.addAll(Arrays.asList(targetEntity.getProperties("OBJE")));
            }
        }
        multimediaObjectCitationsListPanel.set(mSourceCitation, multimediaObjects);
    }

    public Property commit() {
        try {
            mRoot.getGedcom().doUnitOfWork(new UnitOfWork() {

                @Override
                public void perform(Gedcom gedcom) throws GedcomException {
                    if (mSourceCitation instanceof PropertySource) {
                        if (mEventTypeModified) {
                            mEventTypeModified = false;
                            Property eventType = mSourceCitation.getProperty("EVEN");
                            if (eventType == null) {
                                mSourceCitation.addProperty("EVEN", PropertyTag2Name.getPropertyTag(ReferencedEventTypeComboBox.getSelectedItem().toString()));
                            } else {
                                mSourceCitation.setValue(ReferencedEventTypeComboBox.getSelectedItem().toString());
                            }
                        }

                        if (mEventRoleModified) {
                            mEventRoleModified = false;
                            Property eventRole = mSourceCitation.getProperty("ROLE");
                            if (eventRole == null) {
                                mSourceCitation.addProperty("ROLE", PropertyTag2Name.getPropertyTag(eventRoleComboBox.getSelectedItem().toString()));
                            } else {
                                eventRole.setValue(PropertyTag2Name.getPropertyTag(eventRoleComboBox.getSelectedItem().toString()));
                            }
                        }

                        if (mPageModified) {
                            mPageModified = false;
                            Property eventRole = mSourceCitation.getProperty("PAGE");
                            if (eventRole == null) {
                                mSourceCitation.addProperty("PAGE", pageTextField.getText());
                            } else {
                                eventRole.setValue(pageTextField.getText());
                            }
                        }

                        if (mSourceTextModified) {
                            mSourceTextModified = false;

                            Property sourceData = mSourceCitation.getProperty("DATA");
                            if (sourceData == null) {
                                sourceData = mSourceCitation.addProperty("DATA", "");
                                sourceData.addProperty("TEXT", sourceDataTextArea.getText());
                            } else {
                                Property sourceText = sourceData.getProperty("TEXT");
                                if (sourceText == null) {
                                    sourceData.addProperty("TEXT", sourceDataTextArea.getText());
                                } else {
                                    sourceData.setValue(sourceDataTextArea.getText());
                                }
                            }
                        }

                        recordingDate.commit();
                    } else {
                        if (mSourceReferencedTitleModified) {
                            mSourceReferencedTitleModified = false;
                            mSourceCitation.setValue(SourceReferencedTitleTextField.getText());
                        }
                        if (mSourceTextModified) {
                            mSourceTextModified = false;

                            Property sourceText = mSourceCitation.getProperty("TEXT");
                            if (sourceText == null) {
                                mSourceCitation.addProperty("TEXT", sourceDataTextArea.getText());
                            } else {
                                sourceText.setValue(sourceDataTextArea.getText());
                            }
                        }
                    }

                    if (mDataQualityModified) {
                        mDataQualityModified = false;
                        Property dataQuality = mSourceCitation.getProperty("QUAY");
                        if (dataQuality == null) {
                            mSourceCitation.addProperty("QUAY", dataQualityComboBox.getSelectedItem().toString());
                        } else {
                            dataQuality.setValue(dataQualityComboBox.getSelectedItem().toString());
                        }
                    }
                }
            }); // end of doUnitOfWork
        } catch (GedcomException ex) {
            Exceptions.printStackTrace(ex);
        }
        return mSourceCitation;
    }
}
