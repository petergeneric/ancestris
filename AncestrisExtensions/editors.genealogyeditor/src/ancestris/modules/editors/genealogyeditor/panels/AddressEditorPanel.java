package ancestris.modules.editors.genealogyeditor.panels;

import genj.gedcom.Gedcom;
import genj.gedcom.GedcomException;
import genj.gedcom.Property;
import genj.gedcom.UnitOfWork;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.openide.util.Exceptions;

/**
 *
 * @author dominique
 */

/*
 * ADDRESS_STRUCTURE
 * n ADDR <ADDRESS_LINE>
 * +1 CONT <ADDRESS_LINE>
 * +1 ADR1 <ADDRESS_LINE1>
 * +1 ADR2 <ADDRESS_LINE2>
 * +1 ADR3 <ADDRESS_LINE3>
 * +1 CITY <ADDRESS_CITY>
 * +1 STAE <ADDRESS_STATE>
 * +1 POST <ADDRESS_POSTAL_CODE>
 * +1 CTRY <ADDRESS_COUNTRY>
 * n PHON <PHONE_NUMBER>
 * n EMAIL <ADDRESS_EMAIL>
 * n FAX <ADDRESS_FAX>
 * n WWW <ADDRESS_WEB_PAGE>
 */
public class AddressEditorPanel extends javax.swing.JPanel {

    private Property mRoot = null;
    private Property mAddress = null;
    private boolean mAddressModified = false;
    private boolean mAddrLineModified = false;
    private boolean mAddrLine1Modified = false;
    private boolean mAddrLine2Modified = false;
    private boolean mAddrLine3Modified = false;
    private boolean mCityModified = false;
    private boolean mStateModified = false;
    private boolean mPostalCodeModified = false;
    private boolean mCountryModified = false;
    private boolean mPhoneModified = false;
    private boolean mFaxModified = false;
    private boolean meMailAddrModified = false;
    private boolean mHttpAddrModified = false;
    private boolean updateOnGoing = false;

    /**
     * Creates new form AddressEditorPanel
     */
    public AddressEditorPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        phoneLabel = new javax.swing.JLabel();
        phoneTextField = new javax.swing.JTextField();
        addrLine2TextField = new javax.swing.JTextField();
        cityLabel = new javax.swing.JLabel();
        addrLine3TextField = new javax.swing.JTextField();
        cityTextField = new javax.swing.JTextField();
        countryTextField = new javax.swing.JTextField();
        countryLabel = new javax.swing.JLabel();
        eMailAddrTextField = new javax.swing.JTextField();
        eMailAddrLabel = new javax.swing.JLabel();
        httpAddrTextField = new javax.swing.JTextField();
        postalCodeTextField = new javax.swing.JTextField();
        httpAddrLabel = new javax.swing.JLabel();
        addrLine1TextField = new javax.swing.JTextField();
        postalCodeLabel = new javax.swing.JLabel();
        faxTextField = new javax.swing.JTextField();
        stateTextField = new javax.swing.JTextField();
        faxLabel = new javax.swing.JLabel();
        AddrLineTextField = new javax.swing.JTextField();
        stateLabel = new javax.swing.JLabel();

        phoneLabel.setText(org.openide.util.NbBundle.getMessage(AddressEditorPanel.class, "AddressEditorPanel.phoneLabel.text")); // NOI18N

        phoneTextField.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void changedUpdate(DocumentEvent e) {
                if (!updateOnGoing) {
                    mAddressModified = true;
                    mPhoneModified = true;
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                mAddressModified = true;
                mPhoneModified = true;
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                if (!updateOnGoing) {
                    mAddressModified = true;
                    mPhoneModified = true;
                }
            }
        });

        addrLine2TextField.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void changedUpdate(DocumentEvent e) {
                if (!updateOnGoing) {
                    mAddressModified = true;
                    mAddrLine2Modified = true;
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                mAddressModified = true;
                mAddrLine2Modified = true;
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                if (!updateOnGoing) {
                    mAddressModified = true;
                    mAddrLine2Modified = true;
                }
            }
        });

        cityLabel.setText(org.openide.util.NbBundle.getMessage(AddressEditorPanel.class, "AddressEditorPanel.cityLabel.text")); // NOI18N

        addrLine3TextField.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void changedUpdate(DocumentEvent e) {
                if (!updateOnGoing) {
                    mAddressModified = true;
                    mAddrLine3Modified = true;
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                mAddressModified = true;
                mAddrLine3Modified = true;
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                if (!updateOnGoing) {
                    mAddressModified = true;
                    mAddrLine3Modified = true;
                }
            }
        });

        cityTextField.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void changedUpdate(DocumentEvent e) {
                if (!updateOnGoing) {
                    mAddressModified = true;
                    mCityModified = true;
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                mAddressModified = true;
                mCityModified = true;
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                if (!updateOnGoing) {
                    mAddressModified = true;
                    mCityModified = true;
                }
            }
        });

        countryTextField.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void changedUpdate(DocumentEvent e) {
                if (!updateOnGoing) {
                    mAddressModified = true;
                    mCountryModified = true;
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                mAddressModified = true;
                mCountryModified = true;
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                if (!updateOnGoing) {
                    mAddressModified = true;
                    mCountryModified = true;
                }
            }
        });

        countryLabel.setText(org.openide.util.NbBundle.getMessage(AddressEditorPanel.class, "AddressEditorPanel.countryLabel.text")); // NOI18N

        eMailAddrTextField.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void changedUpdate(DocumentEvent e) {
                if (!updateOnGoing) {
                    mAddressModified = true;
                    meMailAddrModified = true;
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                mAddressModified = true;
                meMailAddrModified = true;
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                if (!updateOnGoing) {
                    mAddressModified = true;
                    meMailAddrModified = true;
                }
            }
        });

        eMailAddrLabel.setText(org.openide.util.NbBundle.getMessage(AddressEditorPanel.class, "AddressEditorPanel.eMailAddrLabel.text")); // NOI18N

        httpAddrTextField.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void changedUpdate(DocumentEvent e) {
                if (!updateOnGoing) {
                    mAddressModified = true;
                    mHttpAddrModified = true;
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                mAddressModified = true;
                mHttpAddrModified = true;
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                if (!updateOnGoing) {
                    mAddressModified = true;
                    mHttpAddrModified = true;
                }
            }
        });

        postalCodeTextField.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void changedUpdate(DocumentEvent e) {
                if (!updateOnGoing) {
                    mAddressModified = true;
                    mPostalCodeModified = true;
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                mAddressModified = true;
                mPostalCodeModified = true;
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                if (!updateOnGoing) {
                    mAddressModified = true;
                    mPostalCodeModified = true;
                }
            }
        });

        httpAddrLabel.setText(org.openide.util.NbBundle.getMessage(AddressEditorPanel.class, "AddressEditorPanel.httpAddrLabel.text")); // NOI18N

        addrLine1TextField.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void changedUpdate(DocumentEvent e) {
                if (!updateOnGoing) {
                    mAddressModified = true;
                    mAddrLine1Modified = true;
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                mAddressModified = true;
                mAddrLine1Modified = true;
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                if (!updateOnGoing) {
                    mAddressModified = true;
                    mAddrLine1Modified = true;
                }
            }
        });

        postalCodeLabel.setText(org.openide.util.NbBundle.getMessage(AddressEditorPanel.class, "AddressEditorPanel.postalCodeLabel.text")); // NOI18N

        faxTextField.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void changedUpdate(DocumentEvent e) {
                if (!updateOnGoing) {
                    mAddressModified = true;
                    mFaxModified = true;
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                mAddressModified = true;
                mFaxModified = true;
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                if (!updateOnGoing) {
                    mAddressModified = true;
                    mFaxModified = true;
                }
            }
        });

        stateTextField.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void changedUpdate(DocumentEvent e) {
                if (!updateOnGoing) {
                    mAddressModified = true;
                    mStateModified = true;
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                mAddressModified = true;
                mStateModified = true;
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                if (!updateOnGoing) {
                    mAddressModified = true;
                    mStateModified = true;
                }
            }
        });

        faxLabel.setText(org.openide.util.NbBundle.getMessage(AddressEditorPanel.class, "AddressEditorPanel.faxLabel.text")); // NOI18N

        AddrLineTextField.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void changedUpdate(DocumentEvent e) {
                if (!updateOnGoing) {
                    mAddressModified = true;
                    mAddrLineModified = true;
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                mAddressModified = true;
                mAddrLineModified = true;
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                if (!updateOnGoing) {
                    mAddressModified = true;
                    mAddrLineModified = true;
                }
            }
        });

        stateLabel.setText(org.openide.util.NbBundle.getMessage(AddressEditorPanel.class, "AddressEditorPanel.stateLabel.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(httpAddrLabel)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(phoneLabel)
                        .addComponent(stateLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(cityLabel, javax.swing.GroupLayout.Alignment.TRAILING)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(addrLine1TextField, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addrLine2TextField, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addrLine3TextField, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(AddrLineTextField)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cityTextField)
                            .addComponent(stateTextField)
                            .addComponent(phoneTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                            .addComponent(httpAddrTextField))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(postalCodeLabel)
                            .addComponent(countryLabel)
                            .addComponent(faxLabel)
                            .addComponent(eMailAddrLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(faxTextField)
                            .addComponent(countryTextField)
                            .addComponent(postalCodeTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
                            .addComponent(eMailAddrTextField))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(AddrLineTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addrLine1TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addrLine2TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addrLine3TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cityLabel)
                    .addComponent(cityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(postalCodeLabel)
                    .addComponent(postalCodeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stateLabel)
                    .addComponent(stateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(countryLabel)
                    .addComponent(countryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(phoneLabel)
                    .addComponent(phoneTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(faxLabel)
                    .addComponent(faxTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(httpAddrLabel)
                    .addComponent(httpAddrTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eMailAddrLabel)
                    .addComponent(eMailAddrTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField AddrLineTextField;
    private javax.swing.JTextField addrLine1TextField;
    private javax.swing.JTextField addrLine2TextField;
    private javax.swing.JTextField addrLine3TextField;
    private javax.swing.JLabel cityLabel;
    private javax.swing.JTextField cityTextField;
    private javax.swing.JLabel countryLabel;
    private javax.swing.JTextField countryTextField;
    private javax.swing.JLabel eMailAddrLabel;
    private javax.swing.JTextField eMailAddrTextField;
    private javax.swing.JLabel faxLabel;
    private javax.swing.JTextField faxTextField;
    private javax.swing.JLabel httpAddrLabel;
    private javax.swing.JTextField httpAddrTextField;
    private javax.swing.JLabel phoneLabel;
    private javax.swing.JTextField phoneTextField;
    private javax.swing.JLabel postalCodeLabel;
    private javax.swing.JTextField postalCodeTextField;
    private javax.swing.JLabel stateLabel;
    private javax.swing.JTextField stateTextField;
    // End of variables declaration//GEN-END:variables

    /**
     * @param root the parent property
     *
     * n ADDR <ADDRESS_LINE>
     * +1 CONT <ADDRESS_LINE>
     * +1 ADR1 <ADDRESS_LINE1>
     * +1 ADR2 <ADDRESS_LINE2>
     * +1 ADR3 <ADDRESS_LINE3>
     * +1 CITY <ADDRESS_CITY>
     * +1 STAE <ADDRESS_STATE>
     * +1 POST <ADDRESS_POSTAL_CODE>
     * +1 CTRY <ADDRESS_COUNTRY>
     * n PHON <PHONE_NUMBER>
     * n EMAIL <ADDRESS_EMAIL>
     * n FAX <ADDRESS_FAX>
     * n WWW <ADDRESS_WEB_PAGE>
     */
    public void set(Property root, Property address) {
        mAddress = address;
        mRoot = root;
        updateOnGoing = true;
        if (mAddress != null) {
            AddrLineTextField.setText(address.getValue());
            Property propertyAdr1 = mAddress.getProperty("ADR1");
            addrLine1TextField.setText(propertyAdr1 != null ? propertyAdr1.getValue() : "");

            Property propertyAdr2 = mAddress.getProperty("ADR2");
            addrLine2TextField.setText(propertyAdr2 != null ? propertyAdr2.getValue() : "");

            Property propertyAdr3 = mAddress.getProperty("ADR3");
            addrLine3TextField.setText(propertyAdr3 != null ? propertyAdr3.getValue() : "");

            Property propertyCity = mAddress.getProperty("CITY");
            cityTextField.setText(propertyCity != null ? propertyCity.getValue() : "");

            Property propertyState = mAddress.getProperty("STAE");
            stateTextField.setText(propertyState != null ? propertyState.getValue() : "");

            Property propertyPostalCode = mAddress.getProperty("POST");
            postalCodeTextField.setText(propertyPostalCode != null ? propertyPostalCode.getValue() : "");

            Property propertyCountry = mAddress.getProperty("CTRY");
            countryTextField.setText(propertyCountry != null ? propertyCountry.getValue() : "");

            Property propertyPhone;
            propertyPhone = mAddress.getProperty("PHON");
            phoneTextField.setText(propertyPhone != null ? propertyPhone.getValue() : "");

            Property propertyFax;
            if (!mRoot.getGedcom().getGrammar().getVersion().equals("5.5.1")) {
                propertyFax = mAddress.getProperty("FAX");
            } else {
                propertyFax = mAddress.getProperty("_FAX");
            }
            faxTextField.setText(propertyFax != null ? propertyFax.getValue() : "");

            Property propertyeMailAddr;
            if (!mRoot.getGedcom().getGrammar().getVersion().equals("5.5.1")) {

                propertyeMailAddr = mAddress.getProperty("EMAIL");
            } else {
                propertyeMailAddr = mAddress.getProperty("_EMAIL");
            }
            eMailAddrTextField.setText(propertyeMailAddr != null ? propertyeMailAddr.getValue() : "");

            Property propertyhttpAddr;
            if (!mRoot.getGedcom().getGrammar().getVersion().equals("5.5.1")) {
                propertyhttpAddr = mAddress.getProperty("WWW");
            } else {
                propertyhttpAddr = mAddress.getProperty("_WWW");
            }
            httpAddrTextField.setText(propertyhttpAddr != null ? propertyhttpAddr.getValue() : "");
        }
        updateOnGoing = false;
    }

    public Property commit() {
        if (mAddressModified) {
            try {
                mRoot.getGedcom().doUnitOfWork(new UnitOfWork() {

                    @Override
                    public void perform(Gedcom gedcom) throws GedcomException {
                        if (mAddress == null) {
                            mAddress = mRoot.addProperty("ADDR", AddrLineTextField.getText());
                        } else {
                            if (mAddrLineModified) {
                                mAddress.setValue(AddrLineTextField.getText());
                            }
                        }

                        if (mAddrLine1Modified) {
                            Property propertyAdr1 = mAddress.getProperty("ADR1");
                            if (propertyAdr1 == null) {
                                mAddress.addProperty("ADR1", addrLine1TextField.getText());
                            } else {
                                propertyAdr1.setValue(addrLine1TextField.getText());
                            }
                        }

                        if (mAddrLine2Modified) {
                            Property propertyAdr2 = mAddress.getProperty("ADR2");
                            if (propertyAdr2 == null) {
                                mAddress.addProperty("ADR2", addrLine2TextField.getText());
                            } else {
                                propertyAdr2.setValue(addrLine2TextField.getText());
                            }
                        }

                        if (mAddrLine3Modified) {
                            Property propertyAdr3 = mAddress.getProperty("ADR3");
                            if (propertyAdr3 == null) {
                                mAddress.addProperty("ADR3", addrLine3TextField.getText());
                            } else {
                                propertyAdr3.setValue(addrLine3TextField.getText());
                            }
                        }

                        if (mCityModified) {

                            Property propertyCity = mAddress.getProperty("CITY");
                            if (propertyCity == null) {
                                mAddress.addProperty("CITY", cityTextField.getText());
                            } else {
                                propertyCity.setValue(cityTextField.getText());
                            }
                        }
                        if (mStateModified) {
                            Property propertyState = mAddress.getProperty("STAE");
                            if (propertyState == null) {
                                mAddress.addProperty("STAE", stateTextField.getText());
                            } else {
                                propertyState.setValue(stateTextField.getText());
                            }
                        }
                        if (mPostalCodeModified) {
                            Property propertyPostalCode = mAddress.getProperty("POST");
                            if (propertyPostalCode == null) {
                                mAddress.addProperty("POST", postalCodeTextField.getText());
                            } else {
                                propertyPostalCode.setValue(postalCodeTextField.getText());
                            }
                        }

                        if (mCountryModified) {
                            Property propertyCountry = mAddress.getProperty("CTRY");
                            if (propertyCountry == null) {
                                mAddress.addProperty("CTRY", countryTextField.getText());
                            } else {
                                propertyCountry.setValue(countryTextField.getText());
                            }
                        }

                        if (mPhoneModified) {
                            Property propertyPhone = mAddress.getProperty("PHON");
                            if (propertyPhone == null) {
                                mAddress.addProperty("PHON", phoneTextField.getText());
                            } else {
                                propertyPhone.setValue(phoneTextField.getText());
                            }
                        }

                        if (mFaxModified) {
                            if (!mRoot.getGedcom().getGrammar().getVersion().equals("5.5.1")) {
                                Property propertyFax = mAddress.getProperty("FAX");
                                if (propertyFax == null) {
                                    mAddress.addProperty("FAX", faxTextField.getText());
                                } else {
                                    propertyFax.setValue(faxTextField.getText());
                                }
                            } else {
                                Property propertyFax = mAddress.getProperty("_FAX");
                                if (propertyFax == null) {
                                    mAddress.addProperty("_FAX", faxTextField.getText());
                                } else {
                                    propertyFax.setValue(faxTextField.getText());
                                }
                            }
                        }

                        if (meMailAddrModified) {
                            if (!mRoot.getGedcom().getGrammar().getVersion().equals("5.5.1")) {
                                Property propertyeMailAddr = mAddress.getProperty("EMAIL");
                                if (propertyeMailAddr == null) {
                                    mAddress.addProperty("EMAIL", eMailAddrTextField.getText());
                                } else {
                                    propertyeMailAddr.setValue(eMailAddrTextField.getText());
                                }
                            } else {
                                Property propertyeMailAddr = mAddress.getProperty("_EMAIL");
                                if (propertyeMailAddr == null) {
                                    mAddress.addProperty("_EMAIL", eMailAddrTextField.getText());
                                } else {
                                    propertyeMailAddr.setValue(eMailAddrTextField.getText());
                                }
                            }
                        }

                        if (mHttpAddrModified) {
                            if (!mRoot.getGedcom().getGrammar().getVersion().equals("5.5.1")) {
                                Property propertyhttpAddr = mAddress.getProperty("WWW");
                                if (propertyhttpAddr == null) {
                                    mAddress.addProperty("WWW", httpAddrTextField.getText());
                                } else {
                                    propertyhttpAddr.setValue(httpAddrTextField.getText());
                                }
                            } else {
                                Property propertyhttpAddr = mAddress.getProperty("_WWW");
                                if (propertyhttpAddr == null) {
                                    mAddress.addProperty("_WWW", httpAddrTextField.getText());
                                } else {
                                    propertyhttpAddr.setValue(httpAddrTextField.getText());
                                }
                            }
                        }
                    }
                });

            } catch (GedcomException ex) {
                Exceptions.printStackTrace(ex);
                return null;
            }
        }

        return mAddress;
    }
}
