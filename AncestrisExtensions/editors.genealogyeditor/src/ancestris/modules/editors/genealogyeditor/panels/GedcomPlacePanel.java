package ancestris.modules.editors.genealogyeditor.panels;

import ancestris.util.swing.DialogManager;
import genj.gedcom.*;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.BackingStoreException;
import java.util.prefs.Preferences;
import javax.swing.JComponent;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;
import org.openide.DialogDescriptor;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle;
import org.openide.util.NbPreferences;

/**
 *
 * @author dominique
 */
public class GedcomPlacePanel extends javax.swing.JPanel {

    private final static Logger logger = Logger.getLogger(GedcomPlacePanel.class.getName(), null);
    private Property mRoot;
    private PropertyPlace mPlace;
    private String mPlaceFormat[];
    private int mPlaceOrder[] = {
        0, // hamlet
        -1, // parish
        1, // city,
        2, // zip Code
        -1, // geo ID,
        3, // county,
        4, // state
        5 // country
    };
    JComponent mGedcomFields[][];
    boolean mPlaceModified = false;
    boolean updateOnGoing = false;

    /**
     * Creates new form GedcomPlacePanel
     */
    public GedcomPlacePanel() {
        initComponents();
        mGedcomFields = new JComponent[][]{
            {gedcomHamletLabel, gedcomHamletTextField}, // hamlet
            {gedcomParishLabel, gedcomParishTextField}, // parish
            {gedcomCityLabel, gedcomCityTextField}, // city,
            {gedcomZipCodeLabel, gedcomZipCodeTextField},// zip Code
            {gedcomGeoIdLabel, gedcomGeoIDTextField}, // geo ID,
            {gedcomCountyLabel, gedcomCountyTextField}, // county,
            {gedcomStateLabel, gedcomStateTextField}, // state
            {gedcomCountryLabel, gedcomCountryTextField} // country
        };
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gedcomLatitudeLabel = new javax.swing.JLabel();
        gedcomParishLabel = new javax.swing.JLabel();
        gedcomLongitudeTextField = new javax.swing.JTextField();
        gedcomCountyTextField = new javax.swing.JTextField();
        gedcomCityLabel = new javax.swing.JLabel();
        gedcomHamletLabel = new javax.swing.JLabel();
        gedcomLongitudeLabel = new javax.swing.JLabel();
        gedcomStateLabel = new javax.swing.JLabel();
        gedcomHamletTextField = new javax.swing.JTextField();
        gedcomGeoIDTextField = new javax.swing.JTextField();
        gedcomCountyLabel = new javax.swing.JLabel();
        gedcomGeoIdLabel = new javax.swing.JLabel();
        gedcomZipCodeTextField = new javax.swing.JTextField();
        gedcomLatitudeTextField = new javax.swing.JTextField();
        gedcomCityTextField = new javax.swing.JTextField();
        gedcomZipCodeLabel = new javax.swing.JLabel();
        gedcomCountryLabel = new javax.swing.JLabel();
        gedcomStateTextField = new javax.swing.JTextField();
        gedcomCountryTextField = new javax.swing.JTextField();
        gedcomParishTextField = new javax.swing.JTextField();
        jToolBar1 = new javax.swing.JToolBar();
        linkToPlaceButton = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        parametersButton = new javax.swing.JButton();

        gedcomLatitudeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        gedcomLatitudeLabel.setText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("GedcomPlacePanel.gedcomLatitudeLabel.text"), new Object[] {})); // NOI18N

        gedcomParishLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        gedcomParishLabel.setText("Parish"); // NOI18N

        gedcomLongitudeTextField.setColumns(16);

        gedcomCountyTextField.setColumns(16);

        gedcomCityLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        gedcomCityLabel.setText("City"); // NOI18N

        gedcomHamletLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        gedcomHamletLabel.setText("Hamlet"); // NOI18N

        gedcomLongitudeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        gedcomLongitudeLabel.setText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("GedcomPlacePanel.gedcomLongitudeLabel.text"), new Object[] {})); // NOI18N

        gedcomStateLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        gedcomStateLabel.setText("State"); // NOI18N

        gedcomHamletTextField.setColumns(16);

        gedcomGeoIDTextField.setColumns(16);

        gedcomCountyLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        gedcomCountyLabel.setText("County"); // NOI18N

        gedcomGeoIdLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        gedcomGeoIdLabel.setText("Geo ID"); // NOI18N

        gedcomZipCodeTextField.setColumns(16);

        gedcomLatitudeTextField.setColumns(16);

        gedcomCityTextField.setColumns(16);

        gedcomZipCodeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        gedcomZipCodeLabel.setText("Zip Code "); // NOI18N

        gedcomCountryLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        gedcomCountryLabel.setText("Country"); // NOI18N

        gedcomStateTextField.setColumns(16);

        gedcomCountryTextField.setColumns(16);

        gedcomParishTextField.setColumns(16);

        jToolBar1.setRollover(true);

        linkToPlaceButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/link_add.png"))); // NOI18N
        linkToPlaceButton.setToolTipText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("GedcomPlacePanel.linkToPlaceButton.toolTipText"), new Object[] {})); // NOI18N
        linkToPlaceButton.setFocusable(false);
        linkToPlaceButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        linkToPlaceButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        linkToPlaceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linkToPlaceButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(linkToPlaceButton);
        jToolBar1.add(filler1);

        parametersButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/parameters.png"))); // NOI18N
        parametersButton.setText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("GedcomPlacePanel.parametersButton.text"), new Object[] {})); // NOI18N
        parametersButton.setToolTipText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("GedcomPlacePanel.parametersButton.toolTipText"), new Object[] {})); // NOI18N
        parametersButton.setFocusable(false);
        parametersButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        parametersButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        parametersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                parametersButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(parametersButton);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(gedcomHamletLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE)
                    .addComponent(gedcomCityLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE)
                    .addComponent(gedcomCountyLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE)
                    .addComponent(gedcomStateLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE)
                    .addComponent(gedcomLatitudeLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(gedcomLatitudeTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                            .addComponent(gedcomStateTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                            .addComponent(gedcomCityTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                            .addComponent(gedcomCountyTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE))
                        .addGap(16, 16, 16))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(gedcomHamletTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(gedcomCountryLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                    .addComponent(gedcomGeoIdLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                    .addComponent(gedcomZipCodeLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                    .addComponent(gedcomParishLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                    .addComponent(gedcomLongitudeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(gedcomCountryTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                    .addComponent(gedcomGeoIDTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                    .addComponent(gedcomZipCodeTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                    .addComponent(gedcomParishTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                    .addComponent(gedcomLongitudeTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE))
                .addContainerGap())
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(gedcomParishLabel)
                        .addComponent(gedcomParishTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(gedcomHamletLabel)
                        .addComponent(gedcomHamletTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gedcomZipCodeLabel)
                    .addComponent(gedcomZipCodeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gedcomCityLabel)
                    .addComponent(gedcomCityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gedcomGeoIdLabel)
                    .addComponent(gedcomGeoIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gedcomCountyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gedcomCountyLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gedcomCountryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gedcomCountryLabel)
                    .addComponent(gedcomStateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gedcomStateLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gedcomLongitudeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gedcomLongitudeLabel)
                    .addComponent(gedcomLatitudeLabel)
                    .addComponent(gedcomLatitudeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void linkToPlaceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linkToPlaceButtonActionPerformed
        PlacesListPanel placesListPanel = new PlacesListPanel(mRoot.getGedcom());
        DialogManager.ADialog placesListPanelDialog = new DialogManager.ADialog(
                NbBundle.getMessage(PlacesListPanel.class, "NoteEditorPanel.title"),
                placesListPanel);
        placesListPanelDialog.setDialogId(PlacesListPanel.class.getName());

        if (placesListPanelDialog.show() == DialogDescriptor.OK_OPTION) {
            final PropertyPlace selectedPlace = placesListPanel.getSelectedPlace();

            try {
                mRoot.getGedcom().doUnitOfWork(new UnitOfWork() {

                    @Override
                    public void perform(Gedcom gedcom) throws GedcomException {
                        mPlace = (PropertyPlace) mRoot.addProperty("PLAC", selectedPlace.format("all"));
                    }
                }); // end of doUnitOfWork

                set(mRoot, mPlace);
            } catch (GedcomException ex) {
                Exceptions.printStackTrace(ex);
            }
        }
    }//GEN-LAST:event_linkToPlaceButtonActionPerformed

    private void parametersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_parametersButtonActionPerformed
        PlaceFormatEditorOptionsPanel gedcomPlaceFormatEditorPanel = new PlaceFormatEditorOptionsPanel(mPlaceFormat, mPlaceOrder);

        DialogManager.ADialog gedcomPlaceFormatEditorDialog = new DialogManager.ADialog(
                NbBundle.getMessage(PlaceFormatEditorOptionsPanel.class, "PlaceFormatEditorOptionsPanel.title"),
                gedcomPlaceFormatEditorPanel);
        gedcomPlaceFormatEditorDialog.setDialogId(PlaceFormatEditorOptionsPanel.class.getName());

        if (gedcomPlaceFormatEditorDialog.show() == DialogDescriptor.OK_OPTION) {
            Preferences modulePreferences = NbPreferences.forModule(PlaceEditorPanel.class);
            Preferences node;
            mPlaceOrder = gedcomPlaceFormatEditorPanel.getPlaceOrder();
            node = modulePreferences.node(mPlace.getGedcom().getName());
            node.putInt("placeOrder.index.hamlet", mPlaceOrder[0]);
            node.putInt("placeOrder.index.parish", mPlaceOrder[1]);
            node.putInt("placeOrder.index.city", mPlaceOrder[2]);
            node.putInt("placeOrder.index.zipCode", mPlaceOrder[3]);
            node.putInt("placeOrder.index.geoID", mPlaceOrder[4]);
            node.putInt("placeOrder.index.county", mPlaceOrder[5]);
            node.putInt("placeOrder.index.state", mPlaceOrder[6]);
            node.putInt("placeOrder.index.Country", mPlaceOrder[7]);

            for (int index = 0; index < mPlaceOrder.length; index++) {
                if (mPlaceOrder[index] != -1) {
                    ((javax.swing.JLabel) (mGedcomFields[index][0])).setText(mPlaceFormat[mPlaceOrder[index]]);
                    ((javax.swing.JTextField) (mGedcomFields[index][1])).setText(mPlace.getJurisdiction(mPlaceOrder[index]));
                    List<String> jurisdictions = Arrays.asList(mPlace.getAllJurisdictions(mPlaceOrder[index], true));
                    if (jurisdictions != null) {
                        AutoCompleteDecorator.decorate((javax.swing.JTextField) mGedcomFields[index][1], jurisdictions, false);
                    }
                } else {
                    ((javax.swing.JLabel) (mGedcomFields[index][0])).setText("");
                    ((javax.swing.JTextField) (mGedcomFields[index][1])).setText("");
                    mGedcomFields[index][1].setVisible(false);
                }
            }
        }
    }//GEN-LAST:event_parametersButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.Box.Filler filler1;
    private javax.swing.JLabel gedcomCityLabel;
    private javax.swing.JTextField gedcomCityTextField;
    private javax.swing.JLabel gedcomCountryLabel;
    private javax.swing.JTextField gedcomCountryTextField;
    private javax.swing.JLabel gedcomCountyLabel;
    private javax.swing.JTextField gedcomCountyTextField;
    private javax.swing.JTextField gedcomGeoIDTextField;
    private javax.swing.JLabel gedcomGeoIdLabel;
    private javax.swing.JLabel gedcomHamletLabel;
    private javax.swing.JTextField gedcomHamletTextField;
    private javax.swing.JLabel gedcomLatitudeLabel;
    private javax.swing.JTextField gedcomLatitudeTextField;
    private javax.swing.JLabel gedcomLongitudeLabel;
    private javax.swing.JTextField gedcomLongitudeTextField;
    private javax.swing.JLabel gedcomParishLabel;
    private javax.swing.JTextField gedcomParishTextField;
    private javax.swing.JLabel gedcomStateLabel;
    private javax.swing.JTextField gedcomStateTextField;
    private javax.swing.JLabel gedcomZipCodeLabel;
    private javax.swing.JTextField gedcomZipCodeTextField;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton linkToPlaceButton;
    private javax.swing.JButton parametersButton;
    // End of variables declaration//GEN-END:variables

    /**
     * @param place the place to set
     */
    public void set(Property root, PropertyPlace place) {
        Preferences modulePreferences = NbPreferences.forModule(PlaceEditorPanel.class);
        Preferences node;

        this.mPlace = place;
        this.mRoot = root;

        if (place != null) {
            mPlaceFormat = PropertyPlace.getFormat(place.getGedcom());

            try {
                if (!modulePreferences.nodeExists(place.getGedcom().getName())) {

                    PlaceFormatEditorOptionsPanel gedcomPlaceFormatEditorPanel = new PlaceFormatEditorOptionsPanel(mPlaceFormat, mPlaceOrder);

                    DialogManager.ADialog gedcomPlaceFormatEditorDialog = new DialogManager.ADialog(
                            NbBundle.getMessage(PlaceFormatEditorOptionsPanel.class, "PlaceFormatEditorOptionsPanel.title"),
                            gedcomPlaceFormatEditorPanel);
                    gedcomPlaceFormatEditorDialog.setDialogId(PlaceFormatEditorOptionsPanel.class.getName());
                    node = modulePreferences.node(place.getGedcom().getName());
                    if (gedcomPlaceFormatEditorDialog.show() == DialogDescriptor.OK_OPTION) {
                        mPlaceOrder = gedcomPlaceFormatEditorPanel.getPlaceOrder();
                        node.putInt("placeOrder.index.hamlet", mPlaceOrder[0]);
                        node.putInt("placeOrder.index.parish", mPlaceOrder[1]);
                        node.putInt("placeOrder.index.city", mPlaceOrder[2]);
                        node.putInt("placeOrder.index.zipCode", mPlaceOrder[3]);
                        node.putInt("placeOrder.index.geoID", mPlaceOrder[4]);
                        node.putInt("placeOrder.index.county", mPlaceOrder[5]);
                        node.putInt("placeOrder.index.state", mPlaceOrder[6]);
                        node.putInt("placeOrder.index.Country", mPlaceOrder[7]);
                    }
                } else {
                    node = modulePreferences.node(place.getGedcom().getName());
                    mPlaceOrder[0] = node.getInt("placeOrder.index.hamlet", mPlaceOrder[0]);
                    mPlaceOrder[1] = node.getInt("placeOrder.index.parish", mPlaceOrder[1]);
                    mPlaceOrder[2] = node.getInt("placeOrder.index.city", mPlaceOrder[2]);
                    mPlaceOrder[3] = node.getInt("placeOrder.index.zipCode", mPlaceOrder[3]);
                    mPlaceOrder[4] = node.getInt("placeOrder.index.geoID", mPlaceOrder[4]);
                    mPlaceOrder[5] = node.getInt("placeOrder.index.county", mPlaceOrder[5]);
                    mPlaceOrder[6] = node.getInt("placeOrder.index.state", mPlaceOrder[6]);
                    mPlaceOrder[7] = node.getInt("placeOrder.index.Country", mPlaceOrder[7]);
                }
            } catch (BackingStoreException ex) {
                Exceptions.printStackTrace(ex);
            }

            for (int index = 0; index < mPlaceOrder.length; index++) {
                if (mPlaceOrder[index] != -1) {
                    if (mPlaceOrder[index] < mPlaceFormat.length) {
                        ((javax.swing.JLabel) (mGedcomFields[index][0])).setText(mPlaceFormat[mPlaceOrder[index]]);
                        List<String> jurisdictions = Arrays.asList(place.getAllJurisdictions(mPlaceOrder[index], true));
                        if (jurisdictions != null) {
                            AutoCompleteDecorator.decorate((javax.swing.JTextField) mGedcomFields[index][1], jurisdictions, false);
                        }
                    }
                } else {
                    ((javax.swing.JLabel) (mGedcomFields[index][0])).setText("");
                    ((javax.swing.JTextField) (mGedcomFields[index][1])).setText("");
                    mGedcomFields[index][1].setVisible(false);
                }
            }
            updatePlace(place, 0);
        }

        gedcomHamletTextField.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void changedUpdate(DocumentEvent e) {
                if (!updateOnGoing) {
                    mPlaceModified = true;
                    PropertyPlace[] sameChoices = mPlace.getSameChoices(mPlaceOrder[0], gedcomHamletTextField.getText());
                    if (sameChoices.length > 0) {
                        updatePlace(sameChoices[0], 1);
                    } else {
                        updatePlace(null, 1);
                    }
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                mPlaceModified = true;
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                if (!updateOnGoing) {
                    mPlaceModified = true;
                    PropertyPlace[] sameChoices = mPlace.getSameChoices(mPlaceOrder[0], gedcomHamletTextField.getText());
                    if (sameChoices.length > 0) {
                        updatePlace(sameChoices[0], 1);
                    } else {
                        updatePlace(null, 1);
                    }
                }
            }
        });
        gedcomCityTextField.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void changedUpdate(DocumentEvent e) {
                if (!updateOnGoing) {
                    mPlaceModified = true;
                    PropertyPlace[] sameChoices = mPlace.getSameChoices(mPlaceOrder[2], gedcomCityTextField.getText());
                    if (sameChoices.length > 0) {
                        updatePlace(sameChoices[0], 3);
                    } else {
                        updatePlace(null, 3);
                    }
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                mPlaceModified = true;
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                if (!updateOnGoing) {
                    mPlaceModified = true;
                    PropertyPlace[] sameChoices = mPlace.getSameChoices(mPlaceOrder[2], gedcomCityTextField.getText());
                    if (sameChoices.length > 0) {
                        updatePlace(sameChoices[0], 3);
                    } else {
                        updatePlace(null, 3);
                    }
                }
            }
        });
        gedcomCountyTextField.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void changedUpdate(DocumentEvent e) {
                if (!updateOnGoing) {
                    mPlaceModified = true;
                    PropertyPlace[] sameChoices = mPlace.getSameChoices(mPlaceOrder[5], gedcomCityTextField.getText());
                    if (sameChoices.length > 0) {
                        updatePlace(sameChoices[0], 6);
                    } else {
                        updatePlace(null, 6);
                    }
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                mPlaceModified = true;
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                if (!updateOnGoing) {
                    mPlaceModified = true;
                    PropertyPlace[] sameChoices = mPlace.getSameChoices(mPlaceOrder[5], gedcomCityTextField.getText());
                    if (sameChoices.length > 0) {
                        updatePlace(sameChoices[0], 6);
                    } else {
                        updatePlace(null, 6);
                    }
                }
            }
        });
    }

    private void updatePlace(PropertyPlace place, int startIndex) {

        updateOnGoing = true;

        if (place != null) {
            logger.log(Level.INFO, "startIndex {0}", new Object[]{startIndex});

            for (int index = startIndex; index < mPlaceOrder.length; index++) {
                if (mPlaceOrder[index] != -1) {
                    if (mPlaceOrder[index] < mPlaceFormat.length) {
                        String jurisdiction = place.getJurisdiction(mPlaceOrder[index]);
                        ((javax.swing.JTextField) (mGedcomFields[index][1])).setText(jurisdiction != null ? jurisdiction : "");
                    }
                } else {
                    ((javax.swing.JLabel) (mGedcomFields[index][0])).setText("");
                }
            }

            Property latitude = null;
            Property longitude = null;

            if (place.getGedcom().getGrammar().getVersion().equals("5.5.1")) {
                Property map = mPlace.getProperty("MAP");
                if (map != null) {
                    latitude = map.getProperty("LATI");
                    longitude = map.getProperty("LONG");
                }
            } else {
                Property map = mPlace.getProperty("_MAP");
                if (map != null) {
                    latitude = map.getProperty("_LATI");
                    longitude = map.getProperty("_LONG");
                }
            }

            if (latitude != null && longitude != null) {
                gedcomLatitudeTextField.setText(latitude.getValue());
                gedcomLongitudeTextField.setText(longitude.getValue());

            } else {
                gedcomLatitudeTextField.setText("");
                gedcomLongitudeTextField.setText("");
            }
        } else {
            logger.log(Level.INFO, "No place found startIndex {0}", new Object[]{startIndex});

            for (int index = startIndex; index < mPlaceOrder.length; index++) {
                ((javax.swing.JTextField) (mGedcomFields[index][1])).setText("");
            }
            gedcomLatitudeTextField.setText("");
            gedcomLongitudeTextField.setText("");
        }
        updateOnGoing = false;
    }

    public String getPlaceString() {

        String placeString = "";

        javax.swing.JTextField gedcomFieldsOrder[] = new javax.swing.JTextField[mPlaceFormat.length];
        for (int placeOrderindex = 0; placeOrderindex < mPlaceOrder.length; placeOrderindex++) {
            if (mPlaceOrder[placeOrderindex] != -1) {
                gedcomFieldsOrder[mPlaceOrder[placeOrderindex]] = (javax.swing.JTextField) mGedcomFields[placeOrderindex][1];
            }
        }

        for (int index = 0; index < mPlaceFormat.length; index++) {
            if (index > 0) {
                placeString += PropertyPlace.JURISDICTION_SEPARATOR;
            }
            if (gedcomFieldsOrder[index] != null) {
                placeString += gedcomFieldsOrder[index].getText();
            }
        }

        return placeString;
    }

    public PropertyPlace commit() {
        if (mPlaceModified) {
            try {
                mRoot.getGedcom().doUnitOfWork(new UnitOfWork() {

                    @Override
                    public void perform(Gedcom gedcom) throws GedcomException {
                        mPlace.setValue(getPlaceString());

                        if (!gedcomLatitudeTextField.getText().isEmpty() && !gedcomLongitudeTextField.getText().isEmpty()) {
                            Property map;
                            if (mPlace.getGedcom().getGrammar().getVersion().equals("5.5.1") == true) {
                                map = mPlace.getProperty("MAP");
                                if (map == null) {
                                    map = mPlace.addProperty("MAP", "");
                                    map.addProperty("LATI", gedcomLatitudeTextField.getText());
                                    map.addProperty("LONG", gedcomLongitudeTextField.getText());
                                } else {
                                    Property latitude = map.getProperty("LATI");
                                    if (latitude == null) {
                                        map.addProperty("LATI", gedcomLatitudeTextField.getText());
                                    } else {
                                        latitude.setValue(gedcomLatitudeTextField.getText());
                                    }
                                    Property longitude = map.getProperty("LONG");
                                    if (longitude == null) {
                                        map.addProperty("LONG", gedcomLongitudeTextField.getText());
                                    } else {
                                        longitude.setValue(gedcomLongitudeTextField.getText());
                                    }
                                }
                            } else {
                                map = mPlace.getProperty("_MAP");
                                if (map == null) {
                                    map = mPlace.addProperty("_MAP", "");
                                    map.addProperty("_LATI", gedcomLatitudeTextField.getText());
                                    map.addProperty("_LONG", gedcomLatitudeTextField.getText());
                                } else {
                                    Property latitude = map.getProperty("_LATI");
                                    if (latitude == null) {
                                        map.addProperty("_LATI", gedcomLatitudeTextField.getText());
                                    } else {
                                        latitude.setValue(gedcomLatitudeTextField.getText());
                                    }
                                    Property longitude = map.getProperty("_LONG");
                                    if (longitude == null) {
                                        map.addProperty("_LONG", gedcomLongitudeTextField.getText());
                                    } else {
                                        longitude.setValue(gedcomLongitudeTextField.getText());
                                    }
                                }
                            }
                        }
                    }
                }); // end of doUnitOfWork
                return mPlace;

            } catch (GedcomException ex) {
                Exceptions.printStackTrace(ex);
                return null;
            }
        } else {
            return mPlace;
        }
    }
}