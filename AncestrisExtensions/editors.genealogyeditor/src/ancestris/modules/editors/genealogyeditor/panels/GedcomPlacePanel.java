package ancestris.modules.editors.genealogyeditor.panels;

import ancestris.util.swing.DialogManager;
import genj.gedcom.*;
import java.util.prefs.BackingStoreException;
import java.util.prefs.Preferences;
import javax.swing.JComponent;
import org.openide.DialogDescriptor;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle;
import org.openide.util.NbPreferences;

/**
 *
 * @author dominique
 */
public class GedcomPlacePanel extends javax.swing.JPanel {

    private Property mRoot;
    private PropertyPlace mPlace;
    private String mPlaceFormat[];
    private int mPlaceOrder[] = {
        0, // hamlet
        -1, // parish
        1, // town,
        2, // zip Code
        -1, // geo ID,
        3, // county,
        4, // state
        5 // country
    };

    /**
     * Creates new form GedcomPlacePanel
     */
    public GedcomPlacePanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gedcomLatitudeLabel = new javax.swing.JLabel();
        gedcomParishLabel = new javax.swing.JLabel();
        gedcomLongitudeTextField = new javax.swing.JTextField();
        gedcomCountyTextField = new javax.swing.JTextField();
        gedcomTownLabel = new javax.swing.JLabel();
        gedcomHamletLabel = new javax.swing.JLabel();
        gedcomLongitudeLabel = new javax.swing.JLabel();
        gedcomStateLabel = new javax.swing.JLabel();
        gedcomHamletTextField = new javax.swing.JTextField();
        gedcomGeoIDTextField = new javax.swing.JTextField();
        gedcomCountyLabel = new javax.swing.JLabel();
        gedcomGeoIdLabel = new javax.swing.JLabel();
        gedcomZipCodeTextField = new javax.swing.JTextField();
        gedcomLatitudeTextField = new javax.swing.JTextField();
        gedcomTownTextField = new javax.swing.JTextField();
        gedcomZipCodeLabel = new javax.swing.JLabel();
        gedcomCountryLabel = new javax.swing.JLabel();
        gedcomStateTextField = new javax.swing.JTextField();
        gedcomCountryTextField = new javax.swing.JTextField();
        gedcomParishTextField = new javax.swing.JTextField();
        jToolBar1 = new javax.swing.JToolBar();
        linkToPlaceButton = new javax.swing.JButton();
        editPlaceButton = new javax.swing.JButton();
        addPlaceButton = new javax.swing.JButton();

        gedcomLatitudeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        gedcomLatitudeLabel.setText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("GedcomPlacePanel.gedcomLatitudeLabel.text"), new Object[] {})); // NOI18N

        gedcomParishLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        gedcomParishLabel.setText("Parish"); // NOI18N

        gedcomLongitudeTextField.setColumns(16);
        gedcomLongitudeTextField.setEditable(false);

        gedcomCountyTextField.setColumns(16);
        gedcomCountyTextField.setEditable(false);

        gedcomTownLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        gedcomTownLabel.setText("Town"); // NOI18N

        gedcomHamletLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        gedcomHamletLabel.setText("Hamlet"); // NOI18N

        gedcomLongitudeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        gedcomLongitudeLabel.setText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("GedcomPlacePanel.gedcomLongitudeLabel.text"), new Object[] {})); // NOI18N

        gedcomStateLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        gedcomStateLabel.setText("State"); // NOI18N

        gedcomHamletTextField.setColumns(16);
        gedcomHamletTextField.setEditable(false);

        gedcomGeoIDTextField.setColumns(16);
        gedcomGeoIDTextField.setEditable(false);

        gedcomCountyLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        gedcomCountyLabel.setText("County"); // NOI18N

        gedcomGeoIdLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        gedcomGeoIdLabel.setText("Geo ID"); // NOI18N

        gedcomZipCodeTextField.setColumns(16);
        gedcomZipCodeTextField.setEditable(false);

        gedcomLatitudeTextField.setColumns(16);
        gedcomLatitudeTextField.setEditable(false);

        gedcomTownTextField.setColumns(16);
        gedcomTownTextField.setEditable(false);

        gedcomZipCodeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        gedcomZipCodeLabel.setText("Zip Code "); // NOI18N

        gedcomCountryLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        gedcomCountryLabel.setText("Country"); // NOI18N

        gedcomStateTextField.setColumns(16);
        gedcomStateTextField.setEditable(false);

        gedcomCountryTextField.setColumns(16);
        gedcomCountryTextField.setEditable(false);

        gedcomParishTextField.setColumns(16);
        gedcomParishTextField.setEditable(false);

        jToolBar1.setRollover(true);

        linkToPlaceButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/link_add.png"))); // NOI18N
        linkToPlaceButton.setToolTipText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("GedcomPlacePanel.linkToPlaceButton.toolTipText"), new Object[] {})); // NOI18N
        linkToPlaceButton.setFocusable(false);
        linkToPlaceButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        linkToPlaceButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        linkToPlaceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linkToPlaceButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(linkToPlaceButton);

        editPlaceButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/edit.png"))); // NOI18N
        editPlaceButton.setText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("GedcomPlacePanel.editPlaceButton.text"), new Object[] {})); // NOI18N
        editPlaceButton.setToolTipText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("GedcomPlacePanel.editPlaceButton.toolTipText"), new Object[] {})); // NOI18N
        editPlaceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editPlaceButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(editPlaceButton);

        addPlaceButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/edit_add.png"))); // NOI18N
        addPlaceButton.setText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("GedcomPlacePanel.addPlaceButton.text"), new Object[] {})); // NOI18N
        addPlaceButton.setToolTipText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("GedcomPlacePanel.addPlaceButton.toolTipText"), new Object[] {})); // NOI18N
        addPlaceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPlaceButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(addPlaceButton);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(gedcomHamletLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE)
                    .addComponent(gedcomTownLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE)
                    .addComponent(gedcomCountyLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE)
                    .addComponent(gedcomStateLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE)
                    .addComponent(gedcomLatitudeLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(gedcomLatitudeTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                            .addComponent(gedcomStateTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                            .addComponent(gedcomTownTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                            .addComponent(gedcomCountyTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE))
                        .addGap(16, 16, 16))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(gedcomHamletTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(gedcomCountryLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                    .addComponent(gedcomGeoIdLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                    .addComponent(gedcomZipCodeLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                    .addComponent(gedcomParishLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                    .addComponent(gedcomLongitudeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(gedcomCountryTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                    .addComponent(gedcomGeoIDTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                    .addComponent(gedcomZipCodeTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                    .addComponent(gedcomParishTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                    .addComponent(gedcomLongitudeTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE))
                .addContainerGap())
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(gedcomParishLabel)
                        .addComponent(gedcomParishTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(gedcomHamletLabel)
                        .addComponent(gedcomHamletTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gedcomZipCodeLabel)
                    .addComponent(gedcomZipCodeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gedcomTownLabel)
                    .addComponent(gedcomTownTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gedcomGeoIdLabel)
                    .addComponent(gedcomGeoIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gedcomCountyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gedcomCountyLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gedcomCountryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gedcomCountryLabel)
                    .addComponent(gedcomStateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gedcomStateLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gedcomLongitudeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gedcomLongitudeLabel)
                    .addComponent(gedcomLatitudeLabel)
                    .addComponent(gedcomLatitudeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void linkToPlaceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linkToPlaceButtonActionPerformed
        PlacesListPanel placesListPanel = new PlacesListPanel(mRoot.getGedcom());
        DialogManager.ADialog placesListPanelDialog = new DialogManager.ADialog(
                NbBundle.getMessage(PlacesListPanel.class, "NoteEditorPanel.title"),
                placesListPanel);
        placesListPanelDialog.setDialogId(PlacesListPanel.class.getName());

        if (placesListPanelDialog.show() == DialogDescriptor.OK_OPTION) {
            final PropertyPlace selectedPlace = placesListPanel.getSelectedPlace();

            try {
                mRoot.getGedcom().doUnitOfWork(new UnitOfWork() {

                    @Override
                    public void perform(Gedcom gedcom) throws GedcomException {
                        mPlace = (PropertyPlace) mRoot.addProperty("PLAC", selectedPlace.format("all"));
                    }
                }); // end of doUnitOfWork

                addPlaceButton.setVisible(false);
                linkToPlaceButton.setVisible(false);
                editPlaceButton.setVisible(true);
                set(mRoot, mPlace);
            } catch (GedcomException ex) {
                Exceptions.printStackTrace(ex);
            }
        }
    }//GEN-LAST:event_linkToPlaceButtonActionPerformed

    private void editPlaceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editPlaceButtonActionPerformed
        PlaceEditorPanel placeEditorPanel = new PlaceEditorPanel();
        PropertyPlace place = (PropertyPlace) mRoot.getProperty(PropertyPlace.TAG);
        placeEditorPanel.set(place);
        DialogManager.ADialog placeEditorDialog = new DialogManager.ADialog(
                NbBundle.getMessage(PlaceEditorPanel.class, "PlaceEditorPanel.edit.title"),
                placeEditorPanel);
        placeEditorDialog.setDialogId(PlaceEditorPanel.class.getName());
        if (placeEditorDialog.show() == DialogDescriptor.OK_OPTION) {
            mPlace = placeEditorPanel.commit();
            set(mRoot, mPlace);
        }
    }//GEN-LAST:event_editPlaceButtonActionPerformed

    private void addPlaceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPlaceButtonActionPerformed
        try {
            mRoot.getGedcom().doUnitOfWork(new UnitOfWork() {

                @Override
                public void perform(Gedcom gedcom) throws GedcomException {
                    mPlace = (PropertyPlace) mRoot.addProperty("PLAC", "");
                }
            }); // end of doUnitOfWork
        } catch (GedcomException ex) {
            Exceptions.printStackTrace(ex);
        } finally {
            PlaceEditorPanel placeEditorPanel = new PlaceEditorPanel();
            placeEditorPanel.set(mPlace);

            DialogManager.ADialog placeEditorDialog = new DialogManager.ADialog(
                    NbBundle.getMessage(PlaceEditorPanel.class, "PlaceEditorPanel.create.title"),
                    placeEditorPanel);
            placeEditorDialog.setDialogId(PlaceEditorPanel.class.getName());

            if (placeEditorDialog.show() == DialogDescriptor.OK_OPTION) {
                mPlace = placeEditorPanel.commit();
                set(mRoot, mPlace);
            }
        }
    }//GEN-LAST:event_addPlaceButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addPlaceButton;
    private javax.swing.JButton editPlaceButton;
    private javax.swing.JLabel gedcomCountryLabel;
    private javax.swing.JTextField gedcomCountryTextField;
    private javax.swing.JLabel gedcomCountyLabel;
    private javax.swing.JTextField gedcomCountyTextField;
    private javax.swing.JTextField gedcomGeoIDTextField;
    private javax.swing.JLabel gedcomGeoIdLabel;
    private javax.swing.JLabel gedcomHamletLabel;
    private javax.swing.JTextField gedcomHamletTextField;
    private javax.swing.JLabel gedcomLatitudeLabel;
    private javax.swing.JTextField gedcomLatitudeTextField;
    private javax.swing.JLabel gedcomLongitudeLabel;
    private javax.swing.JTextField gedcomLongitudeTextField;
    private javax.swing.JLabel gedcomParishLabel;
    private javax.swing.JTextField gedcomParishTextField;
    private javax.swing.JLabel gedcomStateLabel;
    private javax.swing.JTextField gedcomStateTextField;
    private javax.swing.JLabel gedcomTownLabel;
    private javax.swing.JTextField gedcomTownTextField;
    private javax.swing.JLabel gedcomZipCodeLabel;
    private javax.swing.JTextField gedcomZipCodeTextField;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton linkToPlaceButton;
    // End of variables declaration//GEN-END:variables

    /**
     * @param place the place to set
     */
    public void set(Property root, PropertyPlace place) {
        Preferences modulePreferences = NbPreferences.forModule(PlaceEditorPanel.class);
        Preferences node;

        this.mPlace = place;
        this.mRoot = root;

        if (place != null) {
            mPlaceFormat = PropertyPlace.getFormat(place.getGedcom());

            addPlaceButton.setVisible(false);
            linkToPlaceButton.setVisible(false);
            editPlaceButton.setVisible(true);

            try {
                if (!modulePreferences.nodeExists(place.getGedcom().getName())) {

                    PlaceFormatEditorOptionsPanel gedcomPlaceFormatEditorPanel = new PlaceFormatEditorOptionsPanel(mPlaceFormat, mPlaceOrder);

                    DialogManager.ADialog gedcomPlaceFormatEditorDialog = new DialogManager.ADialog(
                            NbBundle.getMessage(PlaceFormatEditorOptionsPanel.class, "PlaceFormatEditorOptionsPanel.title"),
                            gedcomPlaceFormatEditorPanel);
                    gedcomPlaceFormatEditorDialog.setDialogId(PlaceFormatEditorOptionsPanel.class.getName());
                    node = modulePreferences.node(place.getGedcom().getName());
                    if (gedcomPlaceFormatEditorDialog.show() == DialogDescriptor.OK_OPTION) {
                        mPlaceOrder = gedcomPlaceFormatEditorPanel.getPlaceOrder();
                        node.putInt("placeOrder.index.hamlet", mPlaceOrder[0]);
                        node.putInt("placeOrder.index.parish", mPlaceOrder[1]);
                        node.putInt("placeOrder.index.town", mPlaceOrder[2]);
                        node.putInt("placeOrder.index.zipCode", mPlaceOrder[3]);
                        node.putInt("placeOrder.index.townCode", mPlaceOrder[4]);
                        node.putInt("placeOrder.index.county", mPlaceOrder[5]);
                        node.putInt("placeOrder.index.state", mPlaceOrder[6]);
                        node.putInt("placeOrder.index.Country", mPlaceOrder[7]);
                    }
                } else {
                    node = modulePreferences.node(place.getGedcom().getName());
                    mPlaceOrder[0] = node.getInt("placeOrder.index.hamlet", mPlaceOrder[0]);
                    mPlaceOrder[1] = node.getInt("placeOrder.index.parish", mPlaceOrder[1]);
                    mPlaceOrder[2] = node.getInt("placeOrder.index.town", mPlaceOrder[2]);
                    mPlaceOrder[3] = node.getInt("placeOrder.index.zipCode", mPlaceOrder[3]);
                    mPlaceOrder[4] = node.getInt("placeOrder.index.townCode", mPlaceOrder[4]);
                    mPlaceOrder[5] = node.getInt("placeOrder.index.county", mPlaceOrder[5]);
                    mPlaceOrder[6] = node.getInt("placeOrder.index.state", mPlaceOrder[6]);
                    mPlaceOrder[7] = node.getInt("placeOrder.index.Country", mPlaceOrder[7]);
                }
            } catch (BackingStoreException ex) {
                Exceptions.printStackTrace(ex);
            }

            JComponent gedcomFields[][] = {
                {gedcomHamletLabel, gedcomHamletTextField},
                {gedcomParishLabel, gedcomParishTextField},
                {gedcomTownLabel, gedcomTownTextField},
                {gedcomZipCodeLabel, gedcomZipCodeTextField},
                {gedcomGeoIdLabel, gedcomGeoIDTextField},
                {gedcomCountyLabel, gedcomCountyTextField},
                {gedcomStateLabel, gedcomStateTextField},
                {gedcomCountryLabel, gedcomCountryTextField}
            };

            for (int index = 0; index < mPlaceOrder.length; index++) {
                if (mPlaceOrder[index] != -1) {
                    if (mPlaceOrder[index] < mPlaceFormat.length) {
                        ((javax.swing.JLabel) (gedcomFields[index][0])).setText(mPlaceFormat[mPlaceOrder[index]]);
                        ((javax.swing.JTextField) (gedcomFields[index][1])).setText(mPlace.getJurisdiction(mPlaceOrder[index]));
                    }
                } else {
                    ((javax.swing.JLabel) (gedcomFields[index][0])).setText("");
                    gedcomFields[index][1].setVisible(false);
                }
            }

            Property latitude = null;
            Property longitude = null;

            if (mPlace.getGedcom().getGrammar().getVersion().equals("5.5.1")) {
                Property map = mPlace.getProperty("MAP");
                if (map != null) {
                    latitude = map.getProperty("LATI");
                    longitude = map.getProperty("LONG");
                }
            } else {
                Property map = mPlace.getProperty("_MAP");
                if (map != null) {
                    latitude = map.getProperty("_LATI");
                    longitude = map.getProperty("_LONG");
                }
            }

            if (latitude != null && longitude != null) {
                gedcomLatitudeTextField.setText(latitude.getValue());
                gedcomLongitudeTextField.setText(longitude.getValue());

            } else {
                gedcomLatitudeTextField.setText("");
                gedcomLongitudeTextField.setText("");
            }
        } else {
            addPlaceButton.setVisible(true);
            linkToPlaceButton.setVisible(true);
            editPlaceButton.setVisible(false);
        }
    }

    public String getPlaceString() {

        String placeString = "";
        javax.swing.JTextField gedcomFields[] = {
            gedcomHamletTextField,
            gedcomParishTextField,
            gedcomTownTextField,
            gedcomZipCodeTextField,
            gedcomCountyTextField,
            gedcomGeoIDTextField,
            gedcomStateTextField,
            gedcomCountryTextField
        };

        javax.swing.JTextField gedcomFieldsOrder[] = new javax.swing.JTextField[8];
        for (int index = 0; index < mPlaceOrder.length; index++) {
            if (mPlaceOrder[index] != -1) {
                gedcomFieldsOrder[index] = gedcomFields[mPlaceOrder[index]];
            }
        }

        for (int index = 0; index < mPlaceFormat.length; index++) {
            if (index > 0) {
                placeString += PropertyPlace.JURISDICTION_SEPARATOR;
            }
            placeString += gedcomFieldsOrder[index].getText();
        }

        return placeString;
    }

    public PropertyPlace commit() {
        try {
            mPlace.getGedcom().doUnitOfWork(new UnitOfWork() {

                @Override
                public void perform(Gedcom gedcom) throws GedcomException {
                    mPlace.setValue(getPlaceString());

                    if (!gedcomLatitudeTextField.getText().isEmpty() && !gedcomLongitudeTextField.getText().isEmpty()) {
                        Property map;
                        if (mPlace.getGedcom().getGrammar().getVersion().equals("5.5.1") == true) {
                            map = mPlace.getProperty("MAP");
                            if (map == null) {
                                map = mPlace.addProperty("MAP", "");
                                map.addProperty("LATI", gedcomLatitudeTextField.getText());
                                map.addProperty("LONG", gedcomLongitudeTextField.getText());
                            } else {
                                Property latitude = map.getProperty("LATI");
                                if (latitude == null) {
                                    map.addProperty("LATI", gedcomLatitudeTextField.getText());
                                } else {
                                    latitude.setValue(gedcomLatitudeTextField.getText());
                                }
                                Property longitude = map.getProperty("LONG");
                                if (longitude == null) {
                                    map.addProperty("LONG", gedcomLongitudeTextField.getText());
                                } else {
                                    longitude.setValue(gedcomLongitudeTextField.getText());
                                }
                            }
                        } else {
                            map = mPlace.getProperty("_MAP");
                            if (map == null) {
                                map = mPlace.addProperty("_MAP", "");
                                map.addProperty("_LATI", gedcomLatitudeTextField.getText());
                                map.addProperty("_LONG", gedcomLatitudeTextField.getText());
                            } else {
                                Property latitude = map.getProperty("_LATI");
                                if (latitude == null) {
                                    map.addProperty("_LATI", gedcomLatitudeTextField.getText());
                                } else {
                                    latitude.setValue(gedcomLatitudeTextField.getText());
                                }
                                Property longitude = map.getProperty("_LONG");
                                if (longitude == null) {
                                    map.addProperty("_LONG", gedcomLongitudeTextField.getText());
                                } else {
                                    longitude.setValue(gedcomLongitudeTextField.getText());
                                }
                            }
                        }
                    }
                }
            }); // end of doUnitOfWork
            return mPlace;

        } catch (GedcomException ex) {
            Exceptions.printStackTrace(ex);
            return null;
        }
    }
}