package ancestris.modules.editors.genealogyeditor.panels;

import ancestris.modules.editors.genealogyeditor.models.EventsTableModel;
import ancestris.modules.editors.genealogyeditor.models.EventsTypeComboBoxModel;
import ancestris.modules.gedcom.utilities.PropertyTag2Name;
import ancestris.util.swing.DialogManager.ADialog;
import genj.gedcom.*;
import java.util.List;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import org.openide.DialogDescriptor;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle;

/**
 *
 * @author dominique
 */
public class EventsListPanel extends javax.swing.JPanel {

    private Property mRoot;
    private EventsTypeComboBoxModel eventsTypeComboBoxModelModel = new EventsTypeComboBoxModel();
    private EventsTableModel mEventsTableModel = new EventsTableModel();
    private PropertyEvent mEvent = null;

    /**
     * Creates new form EventsListPanel
     */
    public EventsListPanel() {
        initComponents();
        TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(eventsTable.getModel());
        eventsTable.setID(EventsListPanel.class.getName());
        eventsTable.setRowSorter(sorter);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        eventsToolBar = new javax.swing.JToolBar();
        jLabel1 = new javax.swing.JLabel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(3, 0), new java.awt.Dimension(3, 0), new java.awt.Dimension(3, 32767));
        eventTypeComboBox = new javax.swing.JComboBox<String>();
        editEventButton = new javax.swing.JButton();
        deleteEventButton = new javax.swing.JButton();
        eventsScrollPane = new javax.swing.JScrollPane();
        eventsTable = new ancestris.modules.editors.genealogyeditor.table.EditorTable();

        eventsToolBar.setFloatable(false);
        eventsToolBar.setRollover(true);

        jLabel1.setText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("EventsListPanel.jLabel1.text"), new Object[] {})); // NOI18N
        eventsToolBar.add(jLabel1);
        eventsToolBar.add(filler1);

        eventTypeComboBox.setModel(eventsTypeComboBoxModelModel);
        eventTypeComboBox.setToolTipText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("EventsListPanel.eventTypeComboBox.toolTipText"), new Object[] {})); // NOI18N
        eventTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eventTypeComboBoxActionPerformed(evt);
            }
        });
        eventsToolBar.add(eventTypeComboBox);

        editEventButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/edit.png"))); // NOI18N
        editEventButton.setToolTipText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("EventsListPanel.editEventButton.toolTipText"), new Object[] {})); // NOI18N
        editEventButton.setFocusable(false);
        editEventButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        editEventButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        editEventButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editEventButtonActionPerformed(evt);
            }
        });
        eventsToolBar.add(editEventButton);

        deleteEventButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/edit_delete.png"))); // NOI18N
        deleteEventButton.setToolTipText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("EventsListPanel.deleteEventButton.toolTipText"), new Object[] {})); // NOI18N
        deleteEventButton.setFocusable(false);
        deleteEventButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        deleteEventButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        deleteEventButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteEventButtonActionPerformed(evt);
            }
        });
        eventsToolBar.add(deleteEventButton);

        eventsTable.setModel(mEventsTableModel);
        eventsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                eventsTableMouseClicked(evt);
            }
        });
        eventsScrollPane.setViewportView(eventsTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(eventsToolBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(eventsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 539, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(eventsToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(eventsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void editEventButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editEventButtonActionPerformed
        int selectedRow = eventsTable.getSelectedRow();
        if (selectedRow != -1) {
            int rowIndex = eventsTable.convertRowIndexToModel(selectedRow);
            PropertyEvent event = mEventsTableModel.getValueAt(rowIndex);
            EventEditorPanel eventEditorPanel = new EventEditorPanel();
            eventEditorPanel.set(mRoot, event);

            ADialog eventEditorDialog = new ADialog(
                    NbBundle.getMessage(EventEditorPanel.class, "EventEditorPanel.edit.title", PropertyTag2Name.getTagName(event.getTag())),
                    eventEditorPanel);
            eventEditorDialog.setDialogId(EventEditorPanel.class.getName());

            if (eventEditorDialog.show() == DialogDescriptor.OK_OPTION) {
                eventEditorPanel.commit();
            } else {
                while (mRoot.getGedcom().canUndo()) {
                    mRoot.getGedcom().undoUnitOfWork(false);
                }
            }
        }
    }//GEN-LAST:event_editEventButtonActionPerformed

    private void deleteEventButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteEventButtonActionPerformed
        final int selectedRow = eventsTable.getSelectedRow();
        Gedcom gedcom = mRoot.getGedcom();

        if (selectedRow != -1) {
            try {
                gedcom.doUnitOfWork(new UnitOfWork() {

                    @Override
                    public void perform(Gedcom gedcom) throws GedcomException {
                        int rowIndex = eventsTable.convertRowIndexToModel(selectedRow);
                        mRoot.delProperty(mEventsTableModel.remove(rowIndex));
                    }
                }); // end of doUnitOfWork
            } catch (GedcomException ex) {
                Exceptions.printStackTrace(ex);
            }
        }
    }//GEN-LAST:event_deleteEventButtonActionPerformed

    private void eventTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eventTypeComboBoxActionPerformed
        Gedcom gedcom = mRoot.getGedcom();
        final String eventType = eventTypeComboBox.getSelectedItem().toString();
        try {
            gedcom.doUnitOfWork(new UnitOfWork() {

                @Override
                public void perform(Gedcom gedcom) throws GedcomException {
                    mEvent = (PropertyEvent) mRoot.addProperty(PropertyTag2Name.getPropertyTag(eventType), "");
                    mEvent.addProperty("DATE", "");
                }
            }); // end of doUnitOfWork

            EventEditorPanel eventEditorPanel = new EventEditorPanel();

            eventEditorPanel.set(mRoot, mEvent);

            ADialog eventEditorDialog = new ADialog(NbBundle.getMessage(EventEditorPanel.class,
                    "EventEditorPanel.create.title", eventType), eventEditorPanel);

            eventEditorDialog.setDialogId(EventEditorPanel.class.getName());
            if (eventEditorDialog.show() == DialogDescriptor.OK_OPTION) {
                mEventsTableModel.add(eventEditorPanel.commit());
            } else {
                while (gedcom.canUndo()) {
                    gedcom.undoUnitOfWork(false);
                }
            }
        } catch (GedcomException ex) {
            Exceptions.printStackTrace(ex);
        }
    }//GEN-LAST:event_eventTypeComboBoxActionPerformed

    private void eventsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_eventsTableMouseClicked
        if (evt.getClickCount() >= 2) {
            int selectedRow = eventsTable.getSelectedRow();
            if (selectedRow != -1) {
                int rowIndex = eventsTable.convertRowIndexToModel(selectedRow);
                PropertyEvent event = mEventsTableModel.getValueAt(rowIndex);
                EventEditorPanel eventEditorPanel = new EventEditorPanel();
                eventEditorPanel.set(mRoot, event);

                ADialog eventEditorDialog = new ADialog(
                        NbBundle.getMessage(EventEditorPanel.class, "EventEditorPanel.edit.title", PropertyTag2Name.getTagName(event.getTag())),
                        eventEditorPanel);
                eventEditorDialog.setDialogId(EventEditorPanel.class.getName());

                if (eventEditorDialog.show() == DialogDescriptor.OK_OPTION) {
                    eventEditorPanel.commit();
                    mEventsTableModel.update();
                } else {
                    while (mRoot.getGedcom().canUndo()) {
                        mRoot.getGedcom().undoUnitOfWork(false);
                    }
                }
            }
        }
    }//GEN-LAST:event_eventsTableMouseClicked
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deleteEventButton;
    private javax.swing.JButton editEventButton;
    private javax.swing.JComboBox<String> eventTypeComboBox;
    private javax.swing.JScrollPane eventsScrollPane;
    private ancestris.modules.editors.genealogyeditor.table.EditorTable eventsTable;
    private javax.swing.JToolBar eventsToolBar;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

    public void setEventsList(Property root, List<PropertyEvent> eventsList) {
        this.mRoot = root;
        mEventsTableModel.addAll(eventsList);
    }

    public PropertyEvent getSelectedEvent() {
        int selectedRow = eventsTable.getSelectedRow();
        if (selectedRow != -1) {
            int rowIndex = eventsTable.convertRowIndexToModel(selectedRow);
            return mEventsTableModel.getValueAt(rowIndex);
        } else {
            return null;
        }
    }

    public void commit() {
    }
}
