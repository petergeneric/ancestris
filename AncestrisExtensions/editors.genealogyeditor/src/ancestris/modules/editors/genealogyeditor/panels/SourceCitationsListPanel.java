package ancestris.modules.editors.genealogyeditor.panels;

import ancestris.modules.editors.genealogyeditor.models.SourceCitationsTableModel;
import ancestris.util.swing.DialogManager.ADialog;
import genj.gedcom.Gedcom;
import genj.gedcom.GedcomException;
import genj.gedcom.Property;
import genj.gedcom.UnitOfWork;
import java.util.List;
import org.openide.DialogDescriptor;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle;

/**
 *
 * @author dominique
 */
public class SourceCitationsListPanel extends javax.swing.JPanel {

    private Property mRoot;
    private SourceCitationsTableModel sourceCitationsTableModel = new SourceCitationsTableModel();

    /**
     * Creates new form SourceCitationsListPanel
     */
    public SourceCitationsListPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sourcesToolBar = new javax.swing.JToolBar();
        addSourceCitationButton = new javax.swing.JButton();
        editSourceCitationButton = new javax.swing.JButton();
        deleteSourceCitationButton = new javax.swing.JButton();
        sourcesScrollPane = new javax.swing.JScrollPane();
        sourcesTable = new javax.swing.JTable();

        sourcesToolBar.setFloatable(false);
        sourcesToolBar.setRollover(true);

        addSourceCitationButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/edit_add.png"))); // NOI18N
        addSourceCitationButton.setToolTipText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("SourceCitationsListPanel.addSourceCitationButton.toolTipText"), new Object[] {})); // NOI18N
        addSourceCitationButton.setFocusable(false);
        addSourceCitationButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addSourceCitationButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        addSourceCitationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSourceCitationButtonActionPerformed(evt);
            }
        });
        sourcesToolBar.add(addSourceCitationButton);

        editSourceCitationButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/edit.png"))); // NOI18N
        editSourceCitationButton.setToolTipText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("SourceCitationsListPanel.editSourceCitationButton.toolTipText"), new Object[] {})); // NOI18N
        editSourceCitationButton.setFocusable(false);
        editSourceCitationButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        editSourceCitationButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        editSourceCitationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editSourceCitationButtonActionPerformed(evt);
            }
        });
        sourcesToolBar.add(editSourceCitationButton);

        deleteSourceCitationButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/edit_delete.png"))); // NOI18N
        deleteSourceCitationButton.setToolTipText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("SourceCitationsListPanel.deleteSourceCitationButton.toolTipText"), new Object[] {})); // NOI18N
        deleteSourceCitationButton.setFocusable(false);
        deleteSourceCitationButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        deleteSourceCitationButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        deleteSourceCitationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteSourceCitationButtonActionPerformed(evt);
            }
        });
        sourcesToolBar.add(deleteSourceCitationButton);

        sourcesTable.setModel(sourceCitationsTableModel);
        sourcesTable.setShowHorizontalLines(false);
        sourcesTable.setShowVerticalLines(false);
        sourcesTable.getColumnModel().getColumn(0).setMaxWidth(100);
        sourcesTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sourcesTableMouseClicked(evt);
            }
        });
        sourcesScrollPane.setViewportView(sourcesTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sourcesToolBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(sourcesScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 539, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(sourcesToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sourcesScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addSourceCitationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSourceCitationButtonActionPerformed

        Gedcom gedcom = mRoot.getGedcom();
        SourceCitationEditorPanel sourceCitationEditorPanel = new SourceCitationEditorPanel();
        // create a the source link
        sourceCitationEditorPanel.setSource(mRoot, mRoot.addProperty("SOUR", "@@"));

        ADialog  sourceCitationEditorDialog = new ADialog(
                NbBundle.getMessage(SourceCitationEditorPanel.class,
                "SourceCitationEditorPanel.create.title"), sourceCitationEditorPanel);
         sourceCitationEditorDialog.setDialogId(SourceCitationEditorPanel.class.getName());

        if ( sourceCitationEditorDialog.show() == DialogDescriptor.OK_OPTION) {
            sourceCitationsTableModel.add(sourceCitationEditorPanel.commit());
        } else {
            while (gedcom.canUndo()) {
                gedcom.undoUnitOfWork(false);
            }
        }
    }//GEN-LAST:event_addSourceCitationButtonActionPerformed

    private void editSourceCitationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editSourceCitationButtonActionPerformed
        int selectedRow = sourcesTable.getSelectedRow();
        if (selectedRow != -1) {
            int rowIndex = sourcesTable.convertRowIndexToModel(selectedRow);
            SourceCitationEditorPanel sourceCitationEditorPanel = new SourceCitationEditorPanel();
            sourceCitationEditorPanel.setSource(mRoot, sourceCitationsTableModel.getValueAt(rowIndex));
            ADialog  sourceCitationEditorDialog = new ADialog(
                    NbBundle.getMessage(SourceEditorPanel.class, "SourceCitationEditorPanel.edit.title"),
                    sourceCitationEditorPanel);
             sourceCitationEditorDialog.setDialogId(SourceCitationEditorPanel.class.getName());

            if ( sourceCitationEditorDialog.show() == DialogDescriptor.OK_OPTION) {
                sourceCitationEditorPanel.commit();
            } else {
                Gedcom gedcom = mRoot.getGedcom();
                while (gedcom.canUndo()) {
                    gedcom.undoUnitOfWork(false);
                }
            }
        }
    }//GEN-LAST:event_editSourceCitationButtonActionPerformed

    private void deleteSourceCitationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteSourceCitationButtonActionPerformed
        final int selectedRow = sourcesTable.getSelectedRow();
        Gedcom gedcom = mRoot.getGedcom();

        if (selectedRow != -1) {
            try {
                gedcom.doUnitOfWork(new UnitOfWork() {

                    @Override
                    public void perform(Gedcom gedcom) throws GedcomException {
                        int rowIndex = sourcesTable.convertRowIndexToModel(selectedRow);
                        mRoot.delProperty(sourceCitationsTableModel.remove(rowIndex));
                    }
                }); // end of doUnitOfWork
            } catch (GedcomException ex) {
                Exceptions.printStackTrace(ex);
            }
        }
    }//GEN-LAST:event_deleteSourceCitationButtonActionPerformed

    private void sourcesTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sourcesTableMouseClicked

        if (evt.getClickCount() >= 2) {
            int selectedRow = sourcesTable.getSelectedRow();
            if (selectedRow != -1) {

                int rowIndex = sourcesTable.convertRowIndexToModel(selectedRow);
                SourceCitationEditorPanel sourceCitationEditorPanel = new SourceCitationEditorPanel();
                sourceCitationEditorPanel.setSource(mRoot, sourceCitationsTableModel.getValueAt(rowIndex));
                ADialog sourceEditorDialog = new ADialog(NbBundle.getMessage(SourceEditorPanel.class, "SourceCitationEditorPanel.edit.title"),
                        sourceCitationEditorPanel);
                sourceEditorDialog.setDialogId(SourceCitationEditorPanel.class.getName());

                if (sourceEditorDialog.show() == DialogDescriptor.OK_OPTION) {
                    sourceCitationEditorPanel.commit();
                } else {
                    Gedcom gedcom = mRoot.getGedcom();
                    while (gedcom.canUndo()) {
                        gedcom.undoUnitOfWork(false);
                    }
                }
            }
        }
    }//GEN-LAST:event_sourcesTableMouseClicked
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addSourceCitationButton;
    private javax.swing.JButton deleteSourceCitationButton;
    private javax.swing.JButton editSourceCitationButton;
    private javax.swing.JScrollPane sourcesScrollPane;
    private javax.swing.JTable sourcesTable;
    private javax.swing.JToolBar sourcesToolBar;
    // End of variables declaration//GEN-END:variables

    public void set(Property root, List<Property> sourcesList) {
        this.mRoot = root;
        sourceCitationsTableModel.addAll(sourcesList);
    }

    public void commit() {
    }
}
