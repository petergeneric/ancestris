package ancestris.modules.editors.genealogyeditor.panels;

import ancestris.modules.gedcom.utilities.PropertyTag2Name;
import ancestris.util.swing.DialogManager;
import ancestris.util.swing.DialogManager.ADialog;
import genj.gedcom.*;
import org.openide.DialogDescriptor;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle;

/**
 *
 * @author dominique
 */
public class RecordedEventEditorPanel extends javax.swing.JPanel {

    private Property mEvent = null;
    private PropertyPlace mPlace = null;
    private PropertyDate mDate = null;
    private String[] mEvents = {
        /*
         * INDIVIDUAL_EVENT
         */
        PropertyTag2Name.getTagName("BIRT"),
        PropertyTag2Name.getTagName("CHR"),
        PropertyTag2Name.getTagName("DEAT"),
        PropertyTag2Name.getTagName("BURI"),
        PropertyTag2Name.getTagName("CREM"),
        PropertyTag2Name.getTagName("ADOP"),
        PropertyTag2Name.getTagName("BAPM"),
        PropertyTag2Name.getTagName("BARM"),
        PropertyTag2Name.getTagName("BASM"),
        PropertyTag2Name.getTagName("BLES"),
        PropertyTag2Name.getTagName("CHRA"),
        PropertyTag2Name.getTagName("CONF"),
        PropertyTag2Name.getTagName("FCOM"),
        PropertyTag2Name.getTagName("ORDN"),
        PropertyTag2Name.getTagName("NATU"),
        PropertyTag2Name.getTagName("EMIG"),
        PropertyTag2Name.getTagName("IMMI"),
        PropertyTag2Name.getTagName("CENS"),
        PropertyTag2Name.getTagName("PROB"),
        PropertyTag2Name.getTagName("WILL"),
        PropertyTag2Name.getTagName("GRAD"),
        PropertyTag2Name.getTagName("RETI"),
        PropertyTag2Name.getTagName("EVEN"),
        /*
         * INDIVIDUAL_ATTRIBUTE
         */
        PropertyTag2Name.getTagName("CAST"),
        PropertyTag2Name.getTagName("DSCR"),
        PropertyTag2Name.getTagName("EDUC"),
        PropertyTag2Name.getTagName("IDNO"),
        PropertyTag2Name.getTagName("NATI"),
        PropertyTag2Name.getTagName("NCHI"),
        PropertyTag2Name.getTagName("NMR"),
        PropertyTag2Name.getTagName("OCCU"),
        PropertyTag2Name.getTagName("PROP"),
        PropertyTag2Name.getTagName("RELI"),
        PropertyTag2Name.getTagName("RESI"),
        PropertyTag2Name.getTagName("SSN"),
        PropertyTag2Name.getTagName("TITL"),
        //        PropertyTag2Name.getTagName("FACT"), not defined in gedcom xml definition file
        /*
         * FAMILY_EVENT
         */
        PropertyTag2Name.getTagName("ANUL"),
        PropertyTag2Name.getTagName("CENS"),
        PropertyTag2Name.getTagName("DIV"),
        PropertyTag2Name.getTagName("DIVF"),
        PropertyTag2Name.getTagName("MARR"),
        PropertyTag2Name.getTagName("ENGA"),
        PropertyTag2Name.getTagName("MARB"),
        PropertyTag2Name.getTagName("MARC"),
        PropertyTag2Name.getTagName("MARL"),
        PropertyTag2Name.getTagName("MARS"),
        PropertyTag2Name.getTagName("RESI"),
        PropertyTag2Name.getTagName("EVEN")
    };

    /**
     * Creates new form RecordedEventEditorPanel
     */
    public RecordedEventEditorPanel() {
        initComponents();
        aDateBean.setPreferHorizontal(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        recordedEventsLabel = new javax.swing.JLabel();
        dateLabel = new javax.swing.JLabel();
        aDateBean = new ancestris.modules.beans.ADateBean();
        recordedEventsTextField = new javax.swing.JTextField();
        placeLabel = new javax.swing.JLabel();
        placeTextField = new javax.swing.JTextField();
        addPlaceButton = new javax.swing.JButton();
        editPlaceButton = new javax.swing.JButton();
        linkToPlaceButton = new javax.swing.JButton();

        recordedEventsLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        recordedEventsLabel.setText(org.openide.util.NbBundle.getMessage(RecordedEventEditorPanel.class, "RecordedEventEditorPanel.recordedEventsLabel.text")); // NOI18N

        dateLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        dateLabel.setText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("RecordedEventEditorPanel.dateLabel.text"), new Object[] {})); // NOI18N

        placeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        placeLabel.setText(org.openide.util.NbBundle.getMessage(RecordedEventEditorPanel.class, "RecordedEventEditorPanel.placeLabel.text")); // NOI18N

        placeTextField.setEditable(false);
        placeTextField.setText(org.openide.util.NbBundle.getMessage(RecordedEventEditorPanel.class, "RecordedEventEditorPanel.placeTextField.text")); // NOI18N

        addPlaceButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/edit_add.png"))); // NOI18N
        addPlaceButton.setMaximumSize(new java.awt.Dimension(26, 26));
        addPlaceButton.setMinimumSize(new java.awt.Dimension(26, 26));
        addPlaceButton.setPreferredSize(new java.awt.Dimension(26, 26));
        addPlaceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPlaceButtonActionPerformed(evt);
            }
        });

        editPlaceButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/edit.png"))); // NOI18N
        editPlaceButton.setToolTipText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("RecordedEventEditorPanel.editPlaceButton.toolTipText"), new Object[] {})); // NOI18N
        editPlaceButton.setFocusable(false);
        editPlaceButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        editPlaceButton.setMaximumSize(new java.awt.Dimension(26, 26));
        editPlaceButton.setMinimumSize(new java.awt.Dimension(26, 26));
        editPlaceButton.setPreferredSize(new java.awt.Dimension(26, 26));
        editPlaceButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        editPlaceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editPlaceButtonActionPerformed(evt);
            }
        });

        linkToPlaceButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/editors/genealogyeditor/resources/link_add.png"))); // NOI18N
        linkToPlaceButton.setToolTipText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/panels/Bundle").getString("RecordedEventEditorPanel.linkToPlaceButton.toolTipText"), new Object[] {})); // NOI18N
        linkToPlaceButton.setFocusable(false);
        linkToPlaceButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        linkToPlaceButton.setMaximumSize(new java.awt.Dimension(26, 26));
        linkToPlaceButton.setMinimumSize(new java.awt.Dimension(26, 26));
        linkToPlaceButton.setPreferredSize(new java.awt.Dimension(26, 26));
        linkToPlaceButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        linkToPlaceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linkToPlaceButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(placeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dateLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(recordedEventsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(aDateBean, javax.swing.GroupLayout.DEFAULT_SIZE, 526, Short.MAX_VALUE)
                    .addComponent(recordedEventsTextField)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(placeTextField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addPlaceButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editPlaceButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(linkToPlaceButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(recordedEventsLabel)
                    .addComponent(recordedEventsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(aDateBean, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(linkToPlaceButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editPlaceButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(placeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(placeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addPlaceButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addPlaceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPlaceButtonActionPerformed
        Gedcom gedcom = mEvent.getGedcom();
        PlaceEditorPanel placeEditorPanel = new PlaceEditorPanel();
        int undoNb = gedcom.getUndoNb();

        placeEditorPanel.set(mEvent, mPlace, null);

        ADialog eventEditorDialog = new ADialog(
                NbBundle.getMessage(
                        PlaceEditorPanel.class, "PlaceEditorPanel.edit.title"),
                placeEditorPanel);
        eventEditorDialog.setDialogId(PlaceEditorPanel.class.getName());

        if (eventEditorDialog.show() == DialogDescriptor.OK_OPTION) {
            placeEditorPanel.commit();
            mPlace = (PropertyPlace) mEvent.getProperty(PropertyPlace.TAG, false);
            placeTextField.setText(mPlace != null ? mPlace.getDisplayValue() : "");
            addPlaceButton.setVisible(false);
            editPlaceButton.setVisible(true);
        } else {
            while (gedcom.getUndoNb() > undoNb && gedcom.canUndo()) {
                gedcom.undoUnitOfWork(false);
            }
        }
    }//GEN-LAST:event_addPlaceButtonActionPerformed

    private void editPlaceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editPlaceButtonActionPerformed
        Gedcom gedcom = mEvent.getGedcom();
        int undoNb = gedcom.getUndoNb();
        PlaceEditorPanel placeEditorPanel = new PlaceEditorPanel();
        placeEditorPanel.set(mEvent, mPlace, null);

        ADialog eventEditorDialog = new ADialog(
                NbBundle.getMessage(
                        PlaceEditorPanel.class, "PlaceEditorPanel.edit.title"),
                placeEditorPanel);
        eventEditorDialog.setDialogId(PlaceEditorPanel.class.getName());

        if (eventEditorDialog.show() == DialogDescriptor.OK_OPTION) {
            placeEditorPanel.commit();
            mPlace = (PropertyPlace) mEvent.getProperty(PropertyPlace.TAG, false);
            placeTextField.setText(mPlace != null ? mPlace.getDisplayValue() : "");
        } else {
            while (gedcom.getUndoNb() > undoNb && gedcom.canUndo()) {
                gedcom.undoUnitOfWork(false);
            }
        }
    }//GEN-LAST:event_editPlaceButtonActionPerformed

    private void linkToPlaceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linkToPlaceButtonActionPerformed
        PlacesListPanel placesListPanel = new PlacesListPanel(mEvent.getGedcom());
        DialogManager.ADialog placesListPanelDialog = new DialogManager.ADialog(
                NbBundle.getMessage(PlacesListPanel.class, "PlacesListPanel.title.link"),
                placesListPanel);
        placesListPanelDialog.setDialogId(PlacesListPanel.class.getName());

        if (placesListPanelDialog.show() == DialogDescriptor.OK_OPTION) {
            final PropertyPlace selectedPlace = placesListPanel.getSelectedPlace();
            if (selectedPlace != null) {
                try {
                    mEvent.getGedcom().doUnitOfWork(new UnitOfWork() {

                        @Override
                        public void perform(Gedcom gedcom) throws GedcomException {
                            if (mPlace == null) {
                                mPlace = (PropertyPlace) mEvent.addProperty("PLAC", selectedPlace.format("all"));
                            } else {
                                mPlace.setValue(selectedPlace.format("all"));
                            }

                            Property map;
                            Property selectedPlaceMap;
                            if (mPlace.getGedcom().getGrammar().getVersion().equals("5.5.1") == true) {
                                selectedPlaceMap = selectedPlace.getProperty("MAP");
                                if (selectedPlaceMap != null) {
                                    map = mPlace.getProperty("MAP");
                                    if (map == null) {
                                        map = mPlace.addProperty("MAP", "");
                                        map.addProperty("LATI", selectedPlaceMap.getProperty("LATI").getValue());
                                        map.addProperty("LONG", selectedPlaceMap.getProperty("LONG").getValue());
                                    } else {
                                        Property latitude = map.getProperty("LATI");
                                        if (latitude == null) {
                                            map.addProperty("LATI", selectedPlaceMap.getProperty("LATI").getValue());
                                        } else {
                                            latitude.setValue(selectedPlaceMap.getProperty("LATI").getValue());
                                        }
                                        Property longitude = map.getProperty("LONG");
                                        if (longitude == null) {
                                            map.addProperty("LONG", selectedPlaceMap.getProperty("LONG").getValue());
                                        } else {
                                            longitude.setValue(selectedPlaceMap.getProperty("LONG").getValue());
                                        }
                                    }
                                } else {
                                    map = mPlace.getProperty("MAP");
                                    if (map != null) {
                                        mPlace.delProperty(map);
                                    }
                                }
                            } else {
                                map = mPlace.getProperty("_MAP");
                                selectedPlaceMap = selectedPlace.getProperty("MAP");
                                if (selectedPlaceMap != null) {
                                    if (map == null) {
                                        map = mPlace.addProperty("_MAP", "");
                                    } else {
                                        Property latitude = map.getProperty("_LATI");
                                        if (latitude == null) {
                                            map.addProperty("_LATI", selectedPlaceMap.getProperty("_LATI").getValue());
                                        } else {
                                            latitude.setValue(selectedPlaceMap.getProperty("_LATI").getValue());
                                        }
                                        Property longitude = map.getProperty("_LONG");
                                        if (longitude == null) {
                                            map.addProperty("_LONG", selectedPlaceMap.getProperty("_LONG").getValue());
                                        } else {
                                            longitude.setValue(selectedPlaceMap.getProperty("_LONG").getValue());
                                        }
                                    }
                                } else {
                                    map = mPlace.getProperty("_MAP");
                                    if (map != null) {
                                        mPlace.delProperty(map);
                                    }
                                }
                            }
                        }
                    }); // end of doUnitOfWork

                    placeTextField.setText(mPlace.getDisplayValue());

                    addPlaceButton.setVisible(false);
                    editPlaceButton.setVisible(true);
                } catch (GedcomException ex) {
                    Exceptions.printStackTrace(ex);
                }
            }
        }
    }//GEN-LAST:event_linkToPlaceButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private ancestris.modules.beans.ADateBean aDateBean;
    private javax.swing.JButton addPlaceButton;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JButton editPlaceButton;
    private javax.swing.JButton linkToPlaceButton;
    private javax.swing.JLabel placeLabel;
    private javax.swing.JTextField placeTextField;
    private javax.swing.JLabel recordedEventsLabel;
    private javax.swing.JTextField recordedEventsTextField;
    // End of variables declaration//GEN-END:variables

    void set(Property event) {
        this.mEvent = event;

        recordedEventsTextField.setText(mEvent.getValue());
        mDate = (PropertyDate) mEvent.getProperty("DATE", false);
        if (mDate == null) {
            try {
                mEvent.getGedcom().doUnitOfWork(new UnitOfWork() {

                    @Override
                    public void perform(Gedcom gedcom) throws GedcomException {
                        mDate = (PropertyDate) mEvent.addProperty("DATE", "");
                    }
                }); // end of doUnitOfWork
            } catch (GedcomException ex) {
                Exceptions.printStackTrace(ex);
            }
        }
        aDateBean.setContext(mDate);

        mPlace = (PropertyPlace) mEvent.getProperty(PropertyPlace.TAG, false);
        if (mPlace == null) {
            try {
                mEvent.getGedcom().doUnitOfWork(new UnitOfWork() {

                    @Override
                    public void perform(Gedcom gedcom) throws GedcomException {
                        mPlace = (PropertyPlace) mEvent.addProperty(PropertyPlace.TAG, "");
                    }
                }); // end of doUnitOfWork
            } catch (GedcomException ex) {
                Exceptions.printStackTrace(ex);
            }
        }

        placeTextField.setText(mPlace.getDisplayValue());
    }

    Property commit() {
        try {
            mEvent.getGedcom().doUnitOfWork(new UnitOfWork() {

                @Override
                public void perform(Gedcom gedcom) throws GedcomException {
                    String eventType = recordedEventsTextField.getText();
//                    mEvent.setValue(PropertyTag2Name.getPropertyTag(eventType));
                    mEvent.setValue(eventType);
                    try {
                        aDateBean.commit();
                    } catch (GedcomException ex) {
                        Exceptions.printStackTrace(ex);
                    }
                }
            }); // end of doUnitOfWork
            return mEvent;
        } catch (GedcomException ex) {
            Exceptions.printStackTrace(ex);
            return null;
        }
    }

}
