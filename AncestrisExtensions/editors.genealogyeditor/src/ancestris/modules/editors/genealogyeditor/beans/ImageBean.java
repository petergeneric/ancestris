package ancestris.modules.editors.genealogyeditor.beans;

import genj.gedcom.Property;
import genj.gedcom.PropertyFile;
import genj.gedcom.PropertyMedia;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import org.openide.util.Exceptions;

/**
 *
 * @author dominique
 */
public class ImageBean extends javax.swing.JPanel {

    private BufferedImage resizedImage;
    private BufferedImage loadImage = null;

    /**
     * Creates new form ImageBean
     */
    public ImageBean() {
        super();
        InputStream imageInputStream = ImageBean.class.getResourceAsStream("/ancestris/modules/editors/genealogyeditor/resources/indi_defaultimage.png");
        try {
            loadImage = ImageIO.read(imageInputStream);
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setToolTipText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("ancestris/modules/editors/genealogyeditor/beans/Bundle").getString("ImageBean.toolTipText"), new Object[] {})); // NOI18N
        setMinimumSize(new java.awt.Dimension(150, 200));
        setName(org.openide.util.NbBundle.getMessage(ImageBean.class, "ImageBean.name")); // NOI18N
        setPreferredSize(new java.awt.Dimension(150, 200));
        setRequestFocusEnabled(false);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 150, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 200, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        if (loadImage != null) {
            resizedImage = resizeImage(loadImage, getWidth(), getHeight());
        }
    }//GEN-LAST:event_formComponentResized

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    public void setImage(Property multimediaObject) {
        Property file;
        InputStream imageInputStream;

        if (multimediaObject != null) {
            if (multimediaObject instanceof PropertyMedia) {
                file = ((PropertyMedia) multimediaObject).getTargetEntity().getProperty("FILE", true);
            } else {
                file = multimediaObject.getProperty("FILE", true);
            }
            if (file != null && file instanceof PropertyFile && ((PropertyFile) file).getFile().exists()) {
                try {
                    imageInputStream = new FileInputStream(((PropertyFile) file).getFile());
                    loadImage = ImageIO.read(imageInputStream);
                    resizedImage = resizeImage(loadImage, this.getPreferredSize().width, this.getPreferredSize().height);
                } catch (IOException ex) {
                    Exceptions.printStackTrace(ex);
                }
            }
        }
    }

    public BufferedImage resizeImage(BufferedImage img, int newW, int newH) {
        int w = img.getWidth();
        int h = img.getHeight();
        float percentW = (float) newW / (float) w;
        float percentH = (float) newH / (float) h;
        BufferedImage dimg;
        if (h * percentW < newH) {
            dimg = new BufferedImage((int) (w * percentW), (int) (h * percentW), img.getType());
            Graphics2D g = dimg.createGraphics();
            g.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
            g.drawImage(img, 0, 0, (int) (w * percentW), (int) (h * percentW), 0, 0, w, h, null);
            g.dispose();
        } else {
            dimg = new BufferedImage((int) (w * percentH), (int) (h * percentH), img.getType());
            Graphics2D g = dimg.createGraphics();
            g.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
            g.drawImage(img, 0, 0, (int) (w * percentH), (int) (h * percentH), 0, 0, w, h, null);
            g.dispose();
        }
        System.out.println("obtain size:" + dimg.getWidth() + " ; " + dimg.getHeight());
        return dimg;
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        g.drawImage(resizedImage, 0, 0, null);
    }
}
