author   = Jo Pol
version  = 0.6

name     = SPARQL based reports and exports
info     =  <h1><center>SPARQL based reports and exports</center></h1>
 <h2>Built in reports</h2>
 <p>
  For some reports, the query needs a rule set that provides shorthands.
  The default is set 1. Set 2 may take minutes. Set 0 (zero) is an empty set.
 </p>
 <ul>
  <li>general reports (no entity as context)
   <ol>
    <li>Large age difference between husband and wife.</li>
    <li>Count names.</li>
    <li>Count events per place</li>
   </ol>
  </li>
  <li>Reports based on an individual
   <ol>
    <li>Time line with birth death and marriages of close relatives. Needs rule set 1.
    <li>Ancestors without parents. Needs rule set 2.
    <li>Multimedia objects of ancestors. Needs rule set 2. Variation hint:
        Remove the line "?indi p:id '%s'; r:ancestor ?a." 
        to make it gedcom wide and get rid of rule sets.
    <li>Migration lines per branch. Needs rule set 2.
   </ol>
  </li>
  <li>Reports based on a family
   <ol>
    <li>Composition of a patchwork family.
   </ol>
  </li>
 </ul>
 <h2>Intro</h2>
 <p>
  A report is configured with two steps: 
  what to show (with a SPARQL query) and how show it (format the layout). 
  Skip the second step if the looks are not important.
 </p>
 <h2>
  Step 1: Create a <a href="http://openjena.org/ARQ/documentation.html">SPARQL</a>
  query (or tweak an existing one)
 </h2>
 <p>
  You can find multiline versions (easier to read for humans) of the default queries in the 
  <a href="https://genj.svn.sourceforge.net/svnroot/genj/trunk/genj/src/report/rdf/ReportRdf.properties">properties</a>
  file. Locate this file on your system to avoid version conflicts. 
  The default queries are intended as examples showing various tricks of the trade.
  The age difference report is easily turned into a statistical report: 
  drop or invert the filter and select just "avg(?diff)".
 </p>
 <p>
  See the extensions notes for syntax hints.
  A query can compare plain complete Gregorian dates.
 </p>
 <p>
  Rules may provide handy shortcuts for the queries.
  But computing ancestors and descendants for each individual may take minutes.
  So three sets of rules are provided, set 0 is empty, set 1 is without ancestors and descendants, set 2 is with.
 </p>
 <h2>Step 2: Tweak the layout</h2>
 <p>
  The second step is a transformation of the query result into HTML (or whatever) with an
  <a href="http://www.w3.org/TR/rdf-sparql-XMLres/result-to-html.xsl">xsl style sheet</a> or
  <a href="http://www.w3.org/TR/rdf-sparql-XMLres/result-to-html.xq">xQuery</a>, 
  follow the links to download examples that generate a plain HTML table layout.
  The options allow to put your copy of the style sheet in the generated XML file.
  An XSL style sheet and the query result should be published in the same domain.
  For xQuery you need to put the name of the generated XML file in the xQuery file.
 </p>
 <h2>Options</h2>
 <h3>URI's for entities</h3>
 <p>
  To enable the SPARQL queries, the gedcom needs a conversion.
  The new format requires to turn the ID's into URI's.
  URI's may look like URL's, but they are universal resource <em>identifiers</em>, 
  they need not but might <em>locate</em> an actual web page.
  If the formats are unique per gedcom, you could paste the converted gedcoms together 
  to query them with another SPARQL tool.
 </p>
 <h3>Output</h3>
 The report panel receives at least progress information (see performance notes per report) and error messages.
 <p>output file name</p>
 <ul>
 <li><strong>Clear</strong> the field to get a dialog to browse the file system.
 <li>Just a <strong>#</strong> renders the output on the report panel, good to develop a query step by step. 
     The report panel also allows GUI integration: select an entity through the report
 <li><strong>{0}</strong> is replaced with the id of the entity for which the report is executed</li>
 </ul>
 <p>converted gedcom extensions</p>
 <p>
  The extension n3 and ttl have a lot in common with SPARQL,
  so examining the converted gedcom can help to write and customize queries.
  The gedcom is not converted into any specific RDF ontology.
  The conversion is just done in syntactical 1:1 way, so the result 
  is similar to the gedcom mode of GenJ's edit view.
 </p>
 <h3>Queries</h3>
  You can write a query (or rule set) directly in the option field, 
  specify a file containing a query 
  or select a built in query by its number.
  A '%s' in a query is a place holder for the id of the entity from which the report was launched.
 </p>
 <h2>To do</h2>
 <ul>
  <li>
   Put the jar files of
   <a href="http://sourceforge.net/projects/jena/files/Jena/Jena-2.6.4/">jena-2.6.4.zip</a> on the classpath.
  </li>
  <li>Make more dates fully comparable.</li>
  <li>Propably ID's returned by a SPAQRQL query could be used as an export filter.</li>
 </ul>
 <h2>Revisions</h2>
 <ul>
  <li>0.6 - 2 Oct 2011: changed options to specify output files.
              New report: Multimedia objects of ancestors
              Though there may not be default queries, you can configure reports for all the types of entities.
              Renamed to SPARQL based as blueprint based might cause confusion with the tree view.
              Changed p:value to rdfs:label
              Changed name space URIs</li>
  <li>0.5 - 11 May 2011: rule set with ancestors and descendants.</li>
  <li>0.4 - 3 May 2011: Allow for multiple built in queries.</li>
  <li>0.3 - 3 May 2011: Replaced default report. New: show large age differences. Was: count names.</li>
  <li>0.2 - 2 May 2011: A slight change in formating the dates and name parts. Enabled rules</li>
  <li>0.1 - 25 April 2011: Initial revision</li>
 </ul>

###########################################################
#################### option labels ########################
###########################################################

uriFormats = format for entity URIs ({0} is a place holder for id's)

fam = family
indi = individual
obje = object
note = note
sour = source
repo = repository
subm = submitter

output = output: where and how to write converted gedcom and/or query results

styleSheet = file name of XSL style sheet to embed in the XML result
reuseConversion = read a previously saved conversion
convertedFileName = file name of gedcom converted to n3/nt/ttl/rdf
reportFileName = name of output file (optional, extensions xml/txt)
askForOverwrite = ask before overwriting existing files

queries = SPARQL queries (query, file name, or number of built in query; see info)

qFam = query context is family 
qIndi = query context is individual
qMedia = query context is multi media object
qNote = query context is note
qSource = query context is source
qRepository = query context is repository
qSubmitter = query context is submitter
qGedcom = query is about complete gedcom
qRules = rules or shorthands

###########################################################
#################### optional dialog ######################
###########################################################

overwrite.question = {0} allready exists. Overwrite it?

###########################################################
#################### messages #############################
###########################################################

# {0} is replaced with a file name
progress.writing = writing {0}

#################################################
######### below no further translations   #######
#################################################

query.function.prefixes = \n
 PREFIX  fn: <http://www.w3.org/2005/xpath-functions#> \n
 PREFIX afn: <http://jena.hpl.hp.com/ARQ/function#> \n
 PREFIX apf: <http://jena.hpl.hp.com/ARQ/property#> \n
 \n

query.rules.0 = 

query.rules.1 = 
 [(?fam p:WIFE ?wife)   (?fam p:HUSB ?husband)->(?wife r:spouse ?husband)(?husband r:spouse ?wife)]
 [(?fam p:HUSB ?dad )   (?fam p:CHIL ?child  )->(?dad  r:child ?child)(?child r:parent ?dad)(?child r:dad ?dad)]
 [(?fam p:WIFE ?mom )   (?fam p:CHIL ?child  )->(?mom  r:child ?child)(?child r:parent ?mom)(?child r:mom ?mom)]
 [(?fam p:CHIL ?c1)(?fam p:CHIL ?c2)notEqual(?c1,?c2)->(?c1 r:sibling ?c2)]
 [(?parent r:child ?child)(?child p:SEX ?sex)(?sex rdfs:label "M")->(?parent r:son      ?child)]
 [(?parent r:child ?child)(?child p:SEX ?sex)(?sex rdfs:label "M")->(?parent r:daughter ?child)]
 [(?indi r:sibling ?sibling)(?sibling p:SEX ?sex)(?sex rdfs:label "M")->(?indi r:brother ?sibling)]
 [(?indi r:sibling ?sibling)(?sibling p:SEX ?sex)(?sex rdfs:label "M")->(?indi r:sister  ?sibling)]
 [(?indi r:spouse ?spouse)(?spouse r:dad ?fil)->(?indi r:fatherInLaw ?fil)]
 [(?indi r:spouse ?spouse)(?spouse r:mom ?mil)->(?indi r:motherInLaw ?mil)]

query.rules.2 = 
 [(?fam p:WIFE ?wife)   (?fam p:HUSB ?husband)->(?wife r:spouse ?husband)(?husband r:spouse ?wife)]
 [(?fam p:HUSB ?dad )   (?fam p:CHIL ?child  )->(?dad  r:child ?child)(?child r:parent ?dad)(?child r:ancestor ?dad)(?dad r:descendant ?child)]
 [(?fam p:WIFE ?mom )   (?fam p:CHIL ?child  )->(?mom  r:child ?child)(?child r:parent ?mom)(?child r:ancestor ?mom)(?mom r:descendant ?child)]
 [(?fam p:CHIL ?c1)(?fam p:CHIL ?c2)notEqual(?c1,?c2)->(?c1 r:sibling ?c2)]
 [(?a r:ancestor ?b)(?b r:ancestor ?c)->(?a r:ancestor ?c)(?c r:descendant ?a)]
 [(?parent r:child ?child)(?child p:SEX ?sex)(?sex rdfs:label "M")->(?parent r:son      ?child)]
 [(?parent r:child ?child)(?child p:SEX ?sex)(?sex rdfs:label "M")->(?parent r:daughter ?child)]
 [(?indi r:sibling ?sibling)(?sibling p:SEX ?sex)(?sex rdfs:label "M")->(?indi r:brother ?sibling)]
 [(?indi r:sibling ?sibling)(?sibling p:SEX ?sex)(?sex rdfs:label "M")->(?indi r:sister  ?sibling)]
 [(?indi r:spouse ?spouse)(?spouse r:dad ?fil)->(?indi r:fatherInLaw ?fil)]
 [(?indi r:spouse ?spouse)(?spouse r:mom ?mil)->(?indi r:motherInLaw ?mil)]

# large age differences between husband and wife
query.gedcom.1 = 
 SELECT 
  (str(?idHusb) as ?idM) 
  (?yearHusb as ?birthM) 
  (str(?idWife)as ?idF) 
  (?yearWife as ?birthF) 
  ?diff
 {
  ?fam p:HUSB ?husb; p:WIFE ?wife.
  ?husb p:id ?idHusb; p:BIRT [p:DATE [rdfs:label ?dateHusb]].
  ?wife p:id ?idWife;  p:BIRT [p:DATE [rdfs:label ?dateWife]].
  LET (?yearHusb := fn:substring(str(?dateHusb),0,4))
  LET (?yearWife := fn:substring(str(?dateWife),0,4))
  LET (?diff := xsd:int(?yearHusb) - xsd:int(?yearWife))
  FILTER (?diff > 20 || ?diff < -20)
 } 
 ORDER BY ?diff
 
# count first names
query.gedcom.2 = SELECT count(?indi) ?first
 {?indi a t:INDI ; p:NAME [p:first ?first] . }
 GROUP BY ?first ORDER BY ?first
 
# count events per place 
query.gedcom.3 =  SELECT ?place count(?eventType) afn:localname(?eventType)
 {?entity ?e [a ?eventType; p:PLAC [rdfs:label ?place]]}
 GROUP BY ?place ?eventType
 ORDER BY ?place ?eventType
 
# shows the configuration of a patchwork family (remarried widow and widower)
query.fam.1 =
 SELECT DISTINCT 
 ?name1 
 ?name2 
 (?nameChild as ?Child)
 (fn:substring(str(?dateBirth),0,10) as ?born)
 (fn:substring(str(?dateDeath),0,10) as ?died)
 ?age
 {
  ?fam1 p:id '%s'; p:HUSB ?husb1.
  ?indi1 p:FAMS ?fam1, ?fam2.
  ?indi2 p:FAMS ?fam2.
  ?fam2 p:CHIL ?child.
  OPTIONAL { ?child p:BIRT [p:DATE [rdfs:label ?dateBirth]] }
  OPTIONAL { ?child p:DEAT [p:DATE [rdfs:label ?dateDeath]] }
  OPTIONAL { ?child p:NAME [p:first ?nameChild] }
  OPTIONAL { ?indi1 p:NAME [rdfs:label ?name1] }
  OPTIONAL { ?indi2 p:NAME [rdfs:label ?name2] }
  LET (?age := xsd:int(fn:substring(str(?dateDeath),0,4)) - xsd:int(fn:substring(str(?dateBirth),0,4)) )
  FILTER( ?indi1 != ?indi2 && ?indi2 != ?husb1)
 } 
 ORDER BY ?dateBirth

# time line with births, deaths and marriages of close relatives
query.indi.1 = 
 SELECT DISTINCT 
  ?alive
  ?age
  (fn:substring(str(?eventDate),0,10) as ?date)
  (?eventType as ?event)
  ?name
 {
  ?indi 
   p:id '%s';
   p:BIRT [p:DATE [rdfs:label ?birthDate]];
   p:DEAT [p:DATE [rdfs:label ?deathDate]].
  {?indi                              p:NAME [rdfs:label ?name]; p:BIRT [p:DATE [rdfs:label ?eventDate]]. LET (?eventType := "born").}UNION
  {?indi                              p:NAME [rdfs:label ?name]; p:DEAT [p:DATE [rdfs:label ?eventDate]]. LET (?eventType := "died").}UNION
  {?indi r:parent  ?parent.   ?parent p:NAME [rdfs:label ?name]; p:BIRT [p:DATE [rdfs:label ?eventDate]]. LET (?eventType := "parent born").}UNION
  {?indi r:parent  ?parent.   ?parent p:NAME [rdfs:label ?name]; p:DEAT [p:DATE [rdfs:label ?eventDate]]. LET (?eventType := "parent died").}UNION
  {?indi r:child   ?child.     ?child p:NAME [rdfs:label ?name]; p:BIRT [p:DATE [rdfs:label ?eventDate]]. LET (?eventType := "child born").}UNION
  {?indi r:child   ?child.     ?child p:NAME [rdfs:label ?name]; p:DEAT [p:DATE [rdfs:label ?eventDate]]. LET (?eventType := "child died").}UNION
  {?indi r:sibling ?sibling. ?sibling p:NAME [rdfs:label ?name]; p:BIRT [p:DATE [rdfs:label ?eventDate]]. LET (?eventType := "sibling born").}UNION
  {?indi r:sibling ?sibling. ?sibling p:NAME [rdfs:label ?name]; p:DEAT [p:DATE [rdfs:label ?eventDate]]. LET (?eventType := "sibling died").}UNION
  {?indi r:spouse  ?spouse.   ?spouse p:NAME [rdfs:label ?name]; p:BIRT [p:DATE [rdfs:label ?eventDate]]. LET (?eventType := "spouse born").}UNION
  {?indi r:spouse  ?spouse.   ?spouse p:NAME [rdfs:label ?name]; p:DEAT [p:DATE [rdfs:label ?eventDate]]. LET (?eventType := "spouse died").}UNION
  {?indi r:spouse  ?spouse.   ?spouse p:NAME [rdfs:label ?name]. 
                 ?indi p:FAMS ?fam. ?spouse p:FAMS ?fam. ?fam p:MARR [p:DATE [rdfs:label ?eventDate]]. LET (?eventType := "married").}UNION
  {?indi r:child  ?child. ?child p:FAMS ?fam; p:NAME [rdfs:label ?name]. 
                                                         ?fam p:MARR [p:DATE [rdfs:label ?eventDate]]. LET (?eventType := "child married").}UNION
  {?indi r:sibling  ?sibling. ?sibling p:FAMS ?fam; p:NAME [rdfs:label ?name]. 
                                                         ?fam p:MARR [p:DATE [rdfs:label ?eventDate]]. LET (?eventType := "sibling married").}
  LET(?eventYear := fn:substring(str(?eventDate),1,4))
  LET(?birthYear := fn:substring(str(?birthDate),1,4))
  LET(?deathYear := fn:substring(str(?deathDate),1,4))
  LET(?age := xsd:int(?eventYear) - xsd:int(?birthYear))
  LET(?alive := ?birthYear <= ?eventYear && ?eventYear <= ?deathYear)
 }
 ORDER BY ?eventDate

# find roots
query.indi.2 = 
 SELECT str(?id) ?name
 {
  ?indi p:id '%s'; r:ancestor ?a. 
  ?a p:id ?id; p:NAME [rdfs:label ?name]. 
  OPTIONAL {?a r:ancestor ?a2}
  FILTER (!bound(?a2))
 } 

# find multi media of ancestors
query.indi.3 = 
 SELECT str(?id) ?name ?event ?file
 {
  ?indi p:id '%s'; r:ancestor ?a. 
  ?a p:id ?id; p:NAME [rdfs:label ?name].
  {
    ?a p:OBJE ?o. 
    ?o p:FILE [rdfs:label ?file].
  } UNION {
    ?a p:BIRT ?e.
    ?e p:OBJE ?o. 
    ?o p:FILE [rdfs:label ?file].
    LET (?event := 'birth')
  } UNION {
    ?a p:DEAT ?e.
    ?e p:OBJE ?o. 
    ?o p:FILE [rdfs:label ?file].
    LET (?event := 'death')
  } UNION {
    ?a p:FAMS ?f.
    ?f p:OBJE ?o. 
    ?o p:FILE [rdfs:label ?file].
    LET (?event := 'family')
  } UNION {
    ?a p:FAMS ?f.
    ?f p:MARR ?m. 
    ?m p:OBJE ?o. 
    ?o p:FILE [rdfs:label ?file].
    LET (?event := 'mariage')
  }
  FILTER( fn:contains(?file,'/familysearch/') )
 } ORDER BY ?name ?id ?event

# migration lines per branch
query.indi.4 = 
 SELECT DISTINCT str(?idP) ?nameP fn:substring(str(?marriedDate),1,4) str(?idA) ?placeMarried ?placeBirth ?placeDeath ?nameA
 {
   ?indi p:id       'I103'; 
         r:ancestor ?patriarch.
   {
     ?indi r:ancestor ?ancestor.
     ?patriarch p:id ?idP; p:NAME [rdfs:label ?nameP].
     ?ancestor  p:id ?idA; p:NAME [rdfs:label ?nameA];
                r:ancestor ?patriarch.
     OPTIONAL {
       ?ancestor  p:FAMS ?fam.
       ?fam       p:MARR [p:DATE [rdfs:label ?marriedDate]];
                  p:HUSB ?husb;
                  p:WIFE ?wife.
       ?indi r:ancestor ?husb, ?wife;
       OPTIONAL { ?fam      p:MARR [ p:PLAC [rdfs:label ?placeMarried]]}
     }
     OPTIONAL { ?ancestor p:BIRT [ p:PLAC [rdfs:label ?placeBirth]]}
     OPTIONAL { ?ancestor p:DEAT [ p:PLAC [rdfs:label ?placeDeath]]}
     OPTIONAL {?patriarch r:ancestor ?a2}
     FILTER (!bound(?a2))
   } 
   UNION
   {
     ?patriarch p:id ?idP; p:NAME [rdfs:label ?nameP].
     OPTIONAL {
       ?patriarch  p:FAMS ?fam.
       ?fam       p:MARR [p:DATE [rdfs:label ?marriedDate]; p:PLAC [rdfs:label ?placeMarried]];
     }
     OPTIONAL {?patriarch r:ancestor ?a2}
     FILTER (!bound(?a2))
     LET (?nameA := ?nameP)
     LET (?idA   := ?idP)
   }
 } order by ?nameP ?married ?nameA
 