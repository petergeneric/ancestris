package ancestris.extensions.reportsview;

import genj.fo.Format;
import genj.fo.FormatOptionsWidget;
import genj.util.swing.Action2;
import genj.util.swing.DialogHelper;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Action;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import org.openide.util.ImageUtilities;
import org.netbeans.api.settings.ConvertAsProperties;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//ancestris.extensions.reportsview//ReportView//EN",
autostore = false)
public final class ReportViewTopComponent extends TopComponent {

    private static ReportViewTopComponent instance;
    /** path to the icon used by the component and its open action */
    static final String ICON_PATH = "ancestris/extensions/reportsview/View.png";
    private static final String PREFERRED_ID = "ReportViewTopComponent";
    genj.util.Registry foRegistry = genj.util.Registry.get(getClass());
    private Logger LOG = Logger.getLogger(this.getClass().getSimpleName());

    public ReportViewTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(ReportViewTopComponent.class, "CTL_ReportViewTopComponent"));
        setToolTipText(NbBundle.getMessage(ReportViewTopComponent.class, "HINT_ReportViewTopComponent"));
        setIcon(ImageUtilities.loadImage(ICON_PATH, true));

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        reportViewScrollPane = new javax.swing.JScrollPane();
        reportViewEditorPane = new javax.swing.JEditorPane();

        setLayout(new java.awt.BorderLayout());

        reportViewEditorPane.setEditable(false);
        reportViewScrollPane.setViewportView(reportViewEditorPane);

        add(reportViewScrollPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JEditorPane reportViewEditorPane;
    private javax.swing.JScrollPane reportViewScrollPane;
    // End of variables declaration//GEN-END:variables

    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     */
    public static synchronized ReportViewTopComponent getDefault() {
        if (instance == null) {
            instance = new ReportViewTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the ReportViewTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized ReportViewTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(ReportViewTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof ReportViewTopComponent) {
            return (ReportViewTopComponent) win;
        }
        Logger.getLogger(ReportViewTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID
                + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    Object readProperties(java.util.Properties p) {
        if (instance == null) {
            instance = this;
        }
        instance.readPropertiesImpl(p);
        return instance;
    }

    private void readPropertiesImpl(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    /**
     * @return the reportViewEditorPane
     */
    public javax.swing.JEditorPane getReportViewEditorPane() {
        return reportViewEditorPane;
    }

    /**
     * @return the reportViewScrollPane
     */
    public javax.swing.JScrollPane getReportViewScrollPane() {
        return reportViewScrollPane;
    }

    public void test(genj.fo.Document doc) {
        Action[] actions = Action2.okCancel();
        FormatOptionsWidget options = new FormatOptionsWidget(doc, foRegistry);
        options.connect(actions[0]);

        int rc = DialogHelper.openDialog("Document " + doc.getTitle(), DialogHelper.QUESTION_MESSAGE, options, actions, this);
        Format formatter = options.getFormat();
        File file = options.getFile();
        if (rc != 0 || formatter.getFileExtension() == null || file == null) {
            return;
        }

        // format and write
        try {
            file.getParentFile().mkdirs();
            formatter.format(doc, file);
        } catch (Throwable t) {
            LOG.log(Level.WARNING, "formatting " + doc + " failed", t);
            return;
        }

        try {
            reportViewEditorPane.setPage(file.toURI().toURL());
        } catch (IOException e) {
            LOG.log(Level.WARNING, "formatting " + doc + " failed", e);
        }
    }
}
