/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package genjfr.app.tools.merge;

import genj.gedcom.Gedcom;
import genjfr.app.GenjInterface;
import genjfr.app.pluginservice.PluginInterface;
import java.util.logging.Logger;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import org.openide.util.ImageUtilities;
import org.netbeans.api.settings.ConvertAsProperties;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//genjfr.app.tools.merge//Merge//EN",
autostore = false)
public final class MergeTopComponent extends TopComponent implements PluginInterface {

    private static MergeTopComponent instance;
    /** path to the icon used by the component and its open action */
    static final String ICON_PATH = "genjfr/app/tools/merge/merge.png";
    private static final String PREFERRED_ID = "MergeTopComponent";
    private static final String PREFERRED_PLUGIN_NAME = "Merge";
    private static final String GENJ_TOPCOMPONENT = "GenjViewTopComponent";
    Gedcom gedcom = null;

    public MergeTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(MergeTopComponent.class, "CTL_MergeTopComponent"));
        setToolTipText(NbBundle.getMessage(MergeTopComponent.class, "HINT_MergeTopComponent"));
        setIcon(ImageUtilities.loadImage(ICON_PATH, true));

        // Get Gedcom
        GenjInterface tc = (GenjInterface)WindowManager.getDefault().findTopComponent(GENJ_TOPCOMPONENT);
        gedcom = tc.getSelectedGedcom();
        tmpMerge tmpm = new tmpMerge();
        tmpm.start(gedcom);

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 766, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 645, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     */
    public static synchronized MergeTopComponent getDefault() {
        if (instance == null) {
            instance = new MergeTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the MergeTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized MergeTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(MergeTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof MergeTopComponent) {
            return (MergeTopComponent) win;
        }
        Logger.getLogger(MergeTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID +
                "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    Object readProperties(java.util.Properties p) {
        MergeTopComponent singleton = MergeTopComponent.getDefault();
        singleton.readPropertiesImpl(p);
        return singleton;
    }

    private void readPropertiesImpl(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    /**
     * Plugin interface
     * Use following code to get implementation and interact with this plugin
     */
    // // Get all plugin implementations
    // for (PluginInterface sInterface : Lookup.getDefault().lookupAll(PluginInterface.class)) {
    //    System.out.println("Plugin " + sInterface.getPluginName() + " loaded successfully.");
    // }
    public String getPluginName() {
        return PREFERRED_PLUGIN_NAME;
    }
}
