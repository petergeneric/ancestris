package ancestris.modules.viewers.entityviewer.panels;

import ancestris.modules.viewers.entityviewer.EntityTag2Icon;
import ancestris.modules.viewers.entityviewer.models.EntityComboBoxModel;
import genj.gedcom.Entity;
import genj.gedcom.Gedcom;
import java.awt.Component;
import java.util.Collection;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.ListCellRenderer;

/**
 *
 * @author lemovice
 */
public class SelectEntityPanel extends javax.swing.JPanel {
    
    EntityComboBoxModel entityComboBoxModel = new EntityComboBoxModel();

    /**
     * Creates new form SelectEntityPanel
     */
    public SelectEntityPanel(Gedcom gedcom, String entityTag) {
        Collection<? extends Entity> entities = gedcom.getEntities(entityTag);
        
        entityComboBoxModel.addAll(entities);
        entityComboBoxModel.setSelectedItem(entities.isEmpty() ? null : entities.toArray()[0]);
        
        initComponents();
        
        entityTypeLabel.setIcon(EntityTag2Icon.getIcon(entityTag));
        entityComboBox.setSelectedIndex(entities.isEmpty() ? -1 : 0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        entityTypeLabel = new javax.swing.JLabel();
        entityComboBox = new javax.swing.JComboBox<Entity>();

        setLayout(new java.awt.GridBagLayout());

        entityTypeLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ancestris/modules/viewers/entityviewer/resources/Individual.png"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 12, 0, 0);
        add(entityTypeLabel, gridBagConstraints);

        entityComboBox.setModel(entityComboBoxModel);
        entityComboBox.setRenderer(new ComboBoxRenderer ());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 136;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 12, 12, 12);
        add(entityComboBox, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<Entity> entityComboBox;
    private javax.swing.JLabel entityTypeLabel;
    // End of variables declaration//GEN-END:variables

    public Entity getSelectedEntity() {
        return (Entity) entityComboBoxModel.getSelectedItem();
    }
    
    public void setSelectedEntity(Entity selectedEntity) {
        entityComboBoxModel.setSelectedItem(selectedEntity);
    }
    
    class ComboBoxRenderer extends JLabel implements ListCellRenderer {
        
        public ComboBoxRenderer() {
            setOpaque(true);
            setHorizontalAlignment(LEFT);
            setVerticalAlignment(CENTER);
        }

        /*
         * This method finds the image and text corresponding to the selected
         * value and returns the label, set up to display the text and image.
         */
        @Override
        public Component getListCellRendererComponent(
                JList list,
                Object value,
                int index,
                boolean isSelected,
                boolean cellHasFocus) {
            if (isSelected) {
                setBackground(list.getSelectionBackground());
                setForeground(list.getSelectionForeground());
            } else {
                setBackground(list.getBackground());
                setForeground(list.getForeground());
            }
            
            setText(((Entity) value).toString(true));
            setFont(list.getFont());
            return this;
        }
    }
}
