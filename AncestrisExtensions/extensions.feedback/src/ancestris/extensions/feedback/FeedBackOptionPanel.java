package ancestris.extensions.feedback;

import java.util.prefs.Preferences;
import org.openide.util.NbPreferences;

final class FeedBackOptionPanel extends javax.swing.JPanel {

    FeedBackOptionPanel(FeedBackOptionsPanelController controller) {
        initComponents();
        // TODO listen to changes in form fields and call controller.changed()
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelSMTPHost = new javax.swing.JLabel();
        textFieldSMTPHost = new javax.swing.JFormattedTextField();
        labelName = new javax.swing.JLabel();
        textFieldName = new javax.swing.JFormattedTextField();
        textFieldEmailAddress = new javax.swing.JFormattedTextField();
        labelEmailAddress = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        textFieldSMTPPort = new javax.swing.JTextField();
        checkBoxAuthenticationRequired = new javax.swing.JCheckBox();
        labelLoginName = new javax.swing.JLabel();
        textFieldLoginName = new javax.swing.JTextField();
        labelPassord = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();
        checkBoxTLSSupport = new javax.swing.JCheckBox();

        org.openide.awt.Mnemonics.setLocalizedText(labelSMTPHost, org.openide.util.NbBundle.getMessage(FeedBackOptionPanel.class, "FeedBackOptionPanel.labelSMTPHost.text")); // NOI18N

        textFieldSMTPHost.setText(org.openide.util.NbBundle.getMessage(FeedBackOptionPanel.class, "FeedBackOptionPanel.textFieldSMTPHost.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(labelName, org.openide.util.NbBundle.getMessage(FeedBackOptionPanel.class, "FeedBackOptionPanel.labelName.text")); // NOI18N

        textFieldName.setText(org.openide.util.NbBundle.getMessage(FeedBackOptionPanel.class, "FeedBackOptionPanel.textFieldName.text")); // NOI18N

        textFieldEmailAddress.setText(org.openide.util.NbBundle.getMessage(FeedBackOptionPanel.class, "FeedBackOptionPanel.textFieldEmailAddress.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(labelEmailAddress, org.openide.util.NbBundle.getMessage(FeedBackOptionPanel.class, "FeedBackOptionPanel.labelEmailAddress.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(FeedBackOptionPanel.class, "FeedBackOptionPanel.jLabel1.text")); // NOI18N

        textFieldSMTPPort.setText(org.openide.util.NbBundle.getMessage(FeedBackOptionPanel.class, "FeedBackOptionPanel.textFieldSMTPPort.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(checkBoxAuthenticationRequired, org.openide.util.NbBundle.getMessage(FeedBackOptionPanel.class, "FeedBackOptionPanel.checkBoxAuthenticationRequired.text")); // NOI18N
        checkBoxAuthenticationRequired.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        checkBoxAuthenticationRequired.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxAuthenticationRequiredActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(labelLoginName, org.openide.util.NbBundle.getMessage(FeedBackOptionPanel.class, "FeedBackOptionPanel.labelLoginName.text")); // NOI18N
        labelLoginName.setEnabled(false);

        textFieldLoginName.setText(org.openide.util.NbBundle.getMessage(FeedBackOptionPanel.class, "FeedBackOptionPanel.textFieldLoginName.text")); // NOI18N
        textFieldLoginName.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(labelPassord, org.openide.util.NbBundle.getMessage(FeedBackOptionPanel.class, "FeedBackOptionPanel.labelPassord.text")); // NOI18N
        labelPassord.setEnabled(false);

        passwordField.setText(org.openide.util.NbBundle.getMessage(FeedBackOptionPanel.class, "FeedBackOptionPanel.passwordField.text")); // NOI18N
        passwordField.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(checkBoxTLSSupport, org.openide.util.NbBundle.getMessage(FeedBackOptionPanel.class, "FeedBackOptionPanel.checkBoxTLSSupport.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(checkBoxAuthenticationRequired)
                    .addComponent(checkBoxTLSSupport)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelEmailAddress)
                            .addComponent(labelName)
                            .addComponent(labelSMTPHost)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textFieldSMTPHost, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE)
                            .addComponent(textFieldEmailAddress, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE)
                            .addComponent(textFieldName, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE)
                            .addComponent(textFieldSMTPPort, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelLoginName)
                            .addComponent(labelPassord))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textFieldLoginName, javax.swing.GroupLayout.DEFAULT_SIZE, 333, Short.MAX_VALUE)
                            .addComponent(passwordField, javax.swing.GroupLayout.DEFAULT_SIZE, 333, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textFieldName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textFieldEmailAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelEmailAddress))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textFieldSMTPHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelSMTPHost))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(textFieldSMTPPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkBoxTLSSupport)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkBoxAuthenticationRequired)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelLoginName)
                    .addComponent(textFieldLoginName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelPassord)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void checkBoxAuthenticationRequiredActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxAuthenticationRequiredActionPerformed
        if (checkBoxAuthenticationRequired.isSelected() == true) {
            labelLoginName.setEnabled(true);
            textFieldLoginName.setEnabled(true);

            labelPassord.setEnabled(true);
            passwordField.setEnabled(true);
        } else {
            labelLoginName.setEnabled(false);
            textFieldLoginName.setEnabled(false);
            textFieldLoginName.setText("");

            labelPassord.setEnabled(false);
            passwordField.setEnabled(false);
            passwordField.setText("");
        }
    }//GEN-LAST:event_checkBoxAuthenticationRequiredActionPerformed

    void load() {
        Preferences modulePreferences = NbPreferences.forModule(FeedBackPlugin.class);
        textFieldName.setText(modulePreferences.get("mail.name", "Set SMTP server"));
        textFieldEmailAddress.setText(modulePreferences.get("mail.address", "Set SMTP server"));

        textFieldSMTPHost.setText(modulePreferences.get("mail.host", "Set SMTP server"));
        textFieldSMTPPort.setText(modulePreferences.get("mail.host.port", "25"));

        checkBoxTLSSupport.setSelected(modulePreferences.getBoolean("mail.host.TLSSupport", false));

        checkBoxAuthenticationRequired.setSelected(modulePreferences.getBoolean("mail.host.AuthenticationRequired", false));
        if (checkBoxAuthenticationRequired.isSelected() == true) {
            labelLoginName.setEnabled(true);
            textFieldLoginName.setEnabled(true);
            textFieldLoginName.setText(modulePreferences.get("mail.host.login", "login"));

            labelPassord.setEnabled(true);
            passwordField.setEnabled(true);
            passwordField.setText(modulePreferences.get("mail.host.password", "password"));
        } else {
            labelLoginName.setEnabled(false);
            textFieldLoginName.setEnabled(false);
            textFieldLoginName.setText("");

            labelPassord.setEnabled(false);
            passwordField.setEnabled(false);
            passwordField.setText("");
        }
    }

    void store() {
        Preferences modulePreferences = NbPreferences.forModule(FeedBackPlugin.class);
        modulePreferences.put("mail.name", textFieldName.getText());
        modulePreferences.put("mail.address", textFieldEmailAddress.getText());
        modulePreferences.put("mail.host", textFieldSMTPHost.getText());
        modulePreferences.put("mail.host.port", textFieldSMTPPort.getText());
        modulePreferences.putBoolean("mail.host.TLSSupport", checkBoxTLSSupport.isSelected());
        modulePreferences.putBoolean("mail.host.AuthenticationRequired", checkBoxAuthenticationRequired.isSelected());
        if (checkBoxAuthenticationRequired.isSelected() == true) {
            modulePreferences.put("mail.host.login", textFieldLoginName.getText());
            modulePreferences.put("mail.host.password", String.copyValueOf(passwordField.getPassword()));
        } else {
            modulePreferences.put("mail.host.login", "");
            modulePreferences.put("mail.host.password", "");
        }
    }

    boolean valid() {
        // TODO check whether form is consistent and complete
        return true;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox checkBoxAuthenticationRequired;
    private javax.swing.JCheckBox checkBoxTLSSupport;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel labelEmailAddress;
    private javax.swing.JLabel labelLoginName;
    private javax.swing.JLabel labelName;
    private javax.swing.JLabel labelPassord;
    private javax.swing.JLabel labelSMTPHost;
    private javax.swing.JPasswordField passwordField;
    javax.swing.JFormattedTextField textFieldEmailAddress;
    private javax.swing.JTextField textFieldLoginName;
    javax.swing.JFormattedTextField textFieldName;
    javax.swing.JFormattedTextField textFieldSMTPHost;
    private javax.swing.JTextField textFieldSMTPPort;
    // End of variables declaration//GEN-END:variables
}
