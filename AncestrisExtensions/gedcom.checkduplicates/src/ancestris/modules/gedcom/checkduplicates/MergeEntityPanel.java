package ancestris.modules.gedcom.checkduplicates;

import ancestris.modules.viewers.entityviewer.nodes.EntityChildFactory;
import ancestris.modules.viewers.entityviewer.nodes.EntityNode;
import ancestris.modules.viewers.entityviewer.panels.DisplayEntityPanel;
import genj.gedcom.Entity;
import genj.gedcom.Property;
import genj.gedcom.PropertyXRef;
import org.openide.nodes.Children;

/**
 *
 * @author lemovice
 */
public class MergeEntityPanel extends javax.swing.JPanel {

    DisplayEntityPanel leftDisplayEntityPanel;
    DisplayEntityPanel rightDisplayEntityPanel;

    /**
     * Creates new form MergeEntityPanel
     */
    public MergeEntityPanel(Entity leftEntity, Entity rightEntity) {
        initComponents();
        // Synchronize Horizontal and Vertical scroll bars
        leftDisplayEntityPanel.getVerticalScrollBar().setModel(rightDisplayEntityPanel.getVerticalScrollBar().getModel());
        leftDisplayEntityPanel.getHorizontalScrollBar().setModel(rightDisplayEntityPanel.getHorizontalScrollBar().getModel());
        leftDisplayEntityPanel.getExplorerManager().setRootContext(new EntityNode(Children.create(new EntityChildFactory(leftEntity), true), leftEntity));
        rightDisplayEntityPanel.getExplorerManager().setRootContext(new EntityNode(Children.create(new EntityChildFactory(rightEntity), true), rightEntity));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel6 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();

        setMinimumSize(new java.awt.Dimension(648, 364));
        setLayout(new java.awt.BorderLayout());

        jSplitPane1.setResizeWeight(0.5);

        jPanel6.setLayout(new java.awt.BorderLayout());

        leftDisplayEntityPanel = new DisplayEntityPanel ();
        jPanel6.add(leftDisplayEntityPanel, java.awt.BorderLayout.CENTER);

        jSplitPane1.setLeftComponent(jPanel6);

        jPanel5.setLayout(new java.awt.BorderLayout());

        rightDisplayEntityPanel = new DisplayEntityPanel ();
        jPanel5.add(rightDisplayEntityPanel, java.awt.BorderLayout.CENTER);

        jSplitPane1.setRightComponent(jPanel5);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JSplitPane jSplitPane1;
    // End of variables declaration//GEN-END:variables

    /**
     * Copy properties beneath a property to another property (copy a cluster)
     */
    private void MergePropertiesRecursively(Property srcProperty, Property destProperty) {

        if (srcProperty == null || destProperty == null) {
            return;
        }

        Property[] srcProperties = srcProperty.getProperties();

        for (Property property : srcProperties) {
            // Xref properties shall not be copy
            if (!(property instanceof PropertyXRef)) {
                MergePropertiesRecursively(property, destProperty.addProperty(property.getTag(), property.getValue()));
            } else {
                // Update Xref
                PropertyXRef propertyXRef = (PropertyXRef) property;
                PropertyXRef target = propertyXRef.getTarget();
                if (target != null) {
                    MergePropertiesRecursively(property, destProperty.addProperty(property.getTag(), property.getValue()));
                } else {
                }
            }
        }
    }
}
